/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_error";
exports.ids = ["pages/_error"];
exports.modules = {

/***/ "./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),\n/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),\n/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),\n/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),\n/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),\n/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),\n/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),\n/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages/module.compiled */ \"./node_modules/next/dist/server/future/route-modules/pages/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! private-next-pages/_document */ \"./node_modules/next/dist/pages/_document.js\");\n/* harmony import */ var private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_document__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.jsx\");\n/* harmony import */ var private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! private-next-pages/_error */ \"./node_modules/next/dist/pages/_error.js\");\n/* harmony import */ var private_next_pages_error__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__]);\nprivate_next_pages_app__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the app and document modules.\n\n\n// Import the userland code.\n\n// Re-export the component (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"default\"));\n// Re-export methods.\nconst getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getStaticProps\");\nconst getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getStaticPaths\");\nconst getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"getServerSideProps\");\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"config\");\nconst reportWebVitals = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"reportWebVitals\");\n// Re-export legacy methods.\nconst unstable_getStaticProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticProps\");\nconst unstable_getStaticPaths = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticPaths\");\nconst unstable_getStaticParams = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getStaticParams\");\nconst unstable_getServerProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerProps\");\nconst unstable_getServerSideProps = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__, \"unstable_getServerSideProps\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES,\n        page: \"/_error\",\n        pathname: \"/_error\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    components: {\n        App: private_next_pages_app__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        Document: (private_next_pages_document__WEBPACK_IMPORTED_MODULE_3___default())\n    },\n    userland: private_next_pages_error__WEBPACK_IMPORTED_MODULE_5__\n});\n\n//# sourceMappingURL=pages.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTJnBhZ2U9JTJGX2Vycm9yJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfZXJyb3ImYWJzb2x1dGVBcHBQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmYWJzb2x1dGVEb2N1bWVudFBhdGg9cHJpdmF0ZS1uZXh0LXBhZ2VzJTJGX2RvY3VtZW50Jm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDaEM7QUFDTDtBQUMxRDtBQUNvRDtBQUNWO0FBQzFDO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyx1QkFBdUIsd0VBQUssQ0FBQyxxREFBUTtBQUNyQyx1QkFBdUIsd0VBQUssQ0FBQyxxREFBUTtBQUNyQywyQkFBMkIsd0VBQUssQ0FBQyxxREFBUTtBQUN6QyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDN0Isd0JBQXdCLHdFQUFLLENBQUMscURBQVE7QUFDN0M7QUFDTyxnQ0FBZ0Msd0VBQUssQ0FBQyxxREFBUTtBQUM5QyxnQ0FBZ0Msd0VBQUssQ0FBQyxxREFBUTtBQUM5QyxpQ0FBaUMsd0VBQUssQ0FBQyxxREFBUTtBQUMvQyxnQ0FBZ0Msd0VBQUssQ0FBQyxxREFBUTtBQUM5QyxvQ0FBb0Msd0VBQUssQ0FBQyxxREFBUTtBQUN6RDtBQUNPLHdCQUF3Qix5R0FBZ0I7QUFDL0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXO0FBQ1gsZ0JBQWdCO0FBQ2hCLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvbnQtZ2F1bnRsZXQtY2xvbmUvPzQwMGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSBhcHAgYW5kIGRvY3VtZW50IG1vZHVsZXMuXG5pbXBvcnQgRG9jdW1lbnQgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fZG9jdW1lbnRcIjtcbmltcG9ydCBBcHAgZnJvbSBcInByaXZhdGUtbmV4dC1wYWdlcy9fYXBwXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19lcnJvclwiO1xuLy8gUmUtZXhwb3J0IHRoZSBjb21wb25lbnQgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBtZXRob2RzLlxuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1Byb3BzID0gaG9pc3QodXNlcmxhbmQsIFwiZ2V0U3RhdGljUHJvcHNcIik7XG5leHBvcnQgY29uc3QgZ2V0U3RhdGljUGF0aHMgPSBob2lzdCh1c2VybGFuZCwgXCJnZXRTdGF0aWNQYXRoc1wiKTtcbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHMgPSBob2lzdCh1c2VybGFuZCwgXCJnZXRTZXJ2ZXJTaWRlUHJvcHNcIik7XG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuZXhwb3J0IGNvbnN0IHJlcG9ydFdlYlZpdGFscyA9IGhvaXN0KHVzZXJsYW5kLCBcInJlcG9ydFdlYlZpdGFsc1wiKTtcbi8vIFJlLWV4cG9ydCBsZWdhY3kgbWV0aG9kcy5cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9nZXRTdGF0aWNQcm9wcyA9IGhvaXN0KHVzZXJsYW5kLCBcInVuc3RhYmxlX2dldFN0YXRpY1Byb3BzXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFN0YXRpY1BhdGhzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U3RhdGljUGF0aHNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U3RhdGljUGFyYW1zID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U3RhdGljUGFyYW1zXCIpO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX2dldFNlcnZlclByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U2VydmVyUHJvcHNcIik7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzID0gaG9pc3QodXNlcmxhbmQsIFwidW5zdGFibGVfZ2V0U2VydmVyU2lkZVByb3BzXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVMsXG4gICAgICAgIHBhZ2U6IFwiL19lcnJvclwiLFxuICAgICAgICBwYXRobmFtZTogXCIvX2Vycm9yXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXBwLFxuICAgICAgICBEb2N1bWVudFxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "./contexts/FontContext.js":
/*!*********************************!*\
  !*** ./contexts/FontContext.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FontProvider: () => (/* binding */ FontProvider),\n/* harmony export */   useFontContext: () => (/* binding */ useFontContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hooks_useFontManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks/useFontManager */ \"./hooks/useFontManager.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_hooks_useFontManager__WEBPACK_IMPORTED_MODULE_2__]);\n_hooks_useFontManager__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// 1. Создаем контекст\nconst FontContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\n// 2. Создаем провайдер\nconst FontProvider = ({ children })=>{\n    // Вызываем хук useFontManager один раз здесь\n    const fontManagerData = (0,_hooks_useFontManager__WEBPACK_IMPORTED_MODULE_2__.useFontManager)();\n    // Передаем все возвращаемые значения хука через value провайдера\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FontContext.Provider, {\n        value: fontManagerData,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/igormocalov/Desktop/Font/contexts/FontContext.js\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, undefined);\n};\n// 3. Создаем кастомный хук для удобного доступа к контексту\nconst useFontContext = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(FontContext);\n    if (!context) {\n        // Эта ошибка сработает, если компонент, использующий useFontContext,\n        // не будет обернут в FontProvider\n        throw new Error(\"useFontContext must be used within a FontProvider\");\n    }\n    return context;\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250ZXh0cy9Gb250Q29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF5RDtBQUNBO0FBRXpELHNCQUFzQjtBQUN0QixNQUFNSSw0QkFBY0gsb0RBQWFBLENBQUM7QUFFbEMsdUJBQXVCO0FBQ2hCLE1BQU1JLGVBQWUsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7SUFDdkMsNkNBQTZDO0lBQzdDLE1BQU1DLGtCQUFrQkoscUVBQWNBO0lBRXRDLGlFQUFpRTtJQUNqRSxxQkFDRSw4REFBQ0MsWUFBWUksUUFBUTtRQUFDQyxPQUFPRjtrQkFDMUJEOzs7Ozs7QUFHUCxFQUFFO0FBRUYsNERBQTREO0FBQ3JELE1BQU1JLGlCQUFpQjtJQUM1QixNQUFNQyxVQUFVVCxpREFBVUEsQ0FBQ0U7SUFDM0IsSUFBSSxDQUFDTyxTQUFTO1FBQ1oscUVBQXFFO1FBQ3JFLGtDQUFrQztRQUNsQyxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFDQSxPQUFPRDtBQUNULEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb250LWdhdW50bGV0LWNsb25lLy4vY29udGV4dHMvRm9udENvbnRleHQuanM/NDJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZvbnRNYW5hZ2VyIH0gZnJvbSAnLi4vaG9va3MvdXNlRm9udE1hbmFnZXInO1xuXG4vLyAxLiDQodC+0LfQtNCw0LXQvCDQutC+0L3RgtC10LrRgdGCXG5jb25zdCBGb250Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8vIDIuINCh0L7Qt9C00LDQtdC8INC/0YDQvtCy0LDQudC00LXRgFxuZXhwb3J0IGNvbnN0IEZvbnRQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgLy8g0JLRi9C30YvQstCw0LXQvCDRhdGD0LogdXNlRm9udE1hbmFnZXIg0L7QtNC40L0g0YDQsNC3INC30LTQtdGB0YxcbiAgY29uc3QgZm9udE1hbmFnZXJEYXRhID0gdXNlRm9udE1hbmFnZXIoKTtcblxuICAvLyDQn9C10YDQtdC00LDQtdC8INCy0YHQtSDQstC+0LfQstGA0LDRidCw0LXQvNGL0LUg0LfQvdCw0YfQtdC90LjRjyDRhdGD0LrQsCDRh9C10YDQtdC3IHZhbHVlINC/0YDQvtCy0LDQudC00LXRgNCwXG4gIHJldHVybiAoXG4gICAgPEZvbnRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtmb250TWFuYWdlckRhdGF9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRm9udENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG4vLyAzLiDQodC+0LfQtNCw0LXQvCDQutCw0YHRgtC+0LzQvdGL0Lkg0YXRg9C6INC00LvRjyDRg9C00L7QsdC90L7Qs9C+INC00L7RgdGC0YPQv9CwINC6INC60L7QvdGC0LXQutGB0YLRg1xuZXhwb3J0IGNvbnN0IHVzZUZvbnRDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChGb250Q29udGV4dCk7XG4gIGlmICghY29udGV4dCkge1xuICAgIC8vINCt0YLQsCDQvtGI0LjQsdC60LAg0YHRgNCw0LHQvtGC0LDQtdGCLCDQtdGB0LvQuCDQutC+0LzQv9C+0L3QtdC90YIsINC40YHQv9C+0LvRjNC30YPRjtGJ0LjQuSB1c2VGb250Q29udGV4dCxcbiAgICAvLyDQvdC1INCx0YPQtNC10YIg0L7QsdC10YDQvdGD0YIg0LIgRm9udFByb3ZpZGVyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VGb250Q29udGV4dCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgRm9udFByb3ZpZGVyJyk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59OyAiXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUZvbnRNYW5hZ2VyIiwiRm9udENvbnRleHQiLCJGb250UHJvdmlkZXIiLCJjaGlsZHJlbiIsImZvbnRNYW5hZ2VyRGF0YSIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VGb250Q29udGV4dCIsImNvbnRleHQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./contexts/FontContext.js\n");

/***/ }),

/***/ "./contexts/SettingsContext.js":
/*!*************************************!*\
  !*** ./contexts/SettingsContext.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SettingsProvider: () => (/* binding */ SettingsProvider),\n/* harmony export */   useSettings: () => (/* binding */ useSettings)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Создаем контекст\nconst SettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n// <<< Ключи для localStorage >>>\nconst LOCAL_STORAGE_KEYS = {\n    BACKGROUND_COLOR: \"backgroundColor\",\n    TEXT_COLOR: \"textColor\",\n    FONT_SIZE: \"fontSize\",\n    LINE_HEIGHT: \"lineHeight\",\n    LETTER_SPACING: \"letterSpacing\",\n    VIEW_MODE: \"viewMode\",\n    TEXT_DIRECTION: \"textDirection\",\n    TEXT_ALIGNMENT: \"textAlignment\",\n    TEXT_CASE: \"textCase\",\n    TEXT_CENTER: \"textCenter\",\n    TEXT_FILL: \"textFill\"\n};\n// <<< Дефолтные значения >>>\nconst DEFAULT_SETTINGS = {\n    TEXT: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n    FONT_SIZE: 150,\n    LINE_HEIGHT: 1.05,\n    LETTER_SPACING: 0,\n    TEXT_COLOR: \"#000000\",\n    BACKGROUND_COLOR: \"#FFFFFF\",\n    VIEW_MODE: \"plain\",\n    TEXT_DIRECTION: \"ltr\",\n    TEXT_ALIGNMENT: \"left\",\n    TEXT_CASE: \"uppercase\",\n    TEXT_CENTER: false,\n    TEXT_FILL: false\n};\n// <<< Функция для безопасного чтения из localStorage >>>\nconst getLocalStorageItem = (key, defaultValue)=>{\n    if (false) {} else {\n        return defaultValue;\n    }\n};\n// <<< Функция для безопасной записи в localStorage >>>\nconst setLocalStorageItem = (key, value)=>{\n    if (false) {}\n};\n// Создаем провайдер контекста\nconst SettingsProvider = ({ children })=>{\n    // Состояние для отслеживания клиентской стороны (предотвращение гидратации)\n    const [isClient, setIsClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Переносим состояния из pages/index.jsx\n    const [text, setText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT); // Текст не храним в LS пока\n    const [fontSize, setFontSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.FONT_SIZE); // Инициализируем дефолтом\n    const [lineHeight, setLineHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.LINE_HEIGHT);\n    const [letterSpacing, setLetterSpacing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.LETTER_SPACING);\n    const [textColor, setTextColor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_COLOR);\n    const [backgroundColor, setBackgroundColor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.BACKGROUND_COLOR);\n    const [viewMode, setViewMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.VIEW_MODE);\n    const [textDirection, setTextDirection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_DIRECTION);\n    const [textAlignment, setTextAlignment] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_ALIGNMENT);\n    const [textCase, setTextCase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_CASE);\n    const [textCenter, setTextCenter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_CENTER);\n    const [textFill, setTextFill] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(DEFAULT_SETTINGS.TEXT_FILL);\n    // Эффект для инициализации клиентской стороны и загрузки из localStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setIsClient(true);\n        // Загружаем значения из localStorage только на клиенте\n        setFontSize(getLocalStorageItem(LOCAL_STORAGE_KEYS.FONT_SIZE, DEFAULT_SETTINGS.FONT_SIZE));\n        setLineHeight(getLocalStorageItem(LOCAL_STORAGE_KEYS.LINE_HEIGHT, DEFAULT_SETTINGS.LINE_HEIGHT));\n        setLetterSpacing(getLocalStorageItem(LOCAL_STORAGE_KEYS.LETTER_SPACING, DEFAULT_SETTINGS.LETTER_SPACING));\n        setTextColor(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_COLOR, DEFAULT_SETTINGS.TEXT_COLOR));\n        setBackgroundColor(getLocalStorageItem(LOCAL_STORAGE_KEYS.BACKGROUND_COLOR, DEFAULT_SETTINGS.BACKGROUND_COLOR));\n        setViewMode(getLocalStorageItem(LOCAL_STORAGE_KEYS.VIEW_MODE, DEFAULT_SETTINGS.VIEW_MODE));\n        setTextDirection(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_DIRECTION, DEFAULT_SETTINGS.TEXT_DIRECTION));\n        setTextAlignment(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_ALIGNMENT, DEFAULT_SETTINGS.TEXT_ALIGNMENT));\n        setTextCase(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_CASE, DEFAULT_SETTINGS.TEXT_CASE));\n        setTextCenter(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_CENTER, DEFAULT_SETTINGS.TEXT_CENTER));\n        setTextFill(getLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_FILL, DEFAULT_SETTINGS.TEXT_FILL));\n    }, []);\n    // <<< useEffects для сохранения в localStorage (только после клиентской инициализации) >>>\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.BACKGROUND_COLOR, backgroundColor);\n    }, [\n        backgroundColor,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_COLOR, textColor);\n    }, [\n        textColor,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.FONT_SIZE, fontSize);\n    }, [\n        fontSize,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.LINE_HEIGHT, lineHeight);\n    }, [\n        lineHeight,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.LETTER_SPACING, letterSpacing);\n    }, [\n        letterSpacing,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.VIEW_MODE, viewMode);\n    }, [\n        viewMode,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_DIRECTION, textDirection);\n    }, [\n        textDirection,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_ALIGNMENT, textAlignment);\n    }, [\n        textAlignment,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_CASE, textCase);\n    }, [\n        textCase,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_CENTER, textCenter);\n    }, [\n        textCenter,\n        isClient\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isClient) setLocalStorageItem(LOCAL_STORAGE_KEYS.TEXT_FILL, textFill);\n    }, [\n        textFill,\n        isClient\n    ]);\n    // <<< Функция сброса настроек >>>\n    const resetSettings = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setText(DEFAULT_SETTINGS.TEXT);\n        setFontSize(DEFAULT_SETTINGS.FONT_SIZE);\n        setLineHeight(DEFAULT_SETTINGS.LINE_HEIGHT);\n        setLetterSpacing(DEFAULT_SETTINGS.LETTER_SPACING);\n        setTextColor(DEFAULT_SETTINGS.TEXT_COLOR);\n        setBackgroundColor(DEFAULT_SETTINGS.BACKGROUND_COLOR);\n        setViewMode(DEFAULT_SETTINGS.VIEW_MODE);\n        setTextDirection(DEFAULT_SETTINGS.TEXT_DIRECTION);\n        setTextAlignment(DEFAULT_SETTINGS.TEXT_ALIGNMENT);\n        setTextCase(DEFAULT_SETTINGS.TEXT_CASE);\n        setTextCenter(DEFAULT_SETTINGS.TEXT_CENTER);\n        setTextFill(DEFAULT_SETTINGS.TEXT_FILL);\n        // Очищаем localStorage\n        Object.values(LOCAL_STORAGE_KEYS).forEach((key)=>{\n            if (false) {}\n        });\n        console.log(\"[SettingsContext] Настройки сброшены к дефолтным и localStorage очищен.\");\n    }, []); // Нет зависимостей, т.к. используем только сеттеры и константы\n    // Значение, которое будет передано через контекст\n    const value = {\n        text,\n        setText,\n        fontSize,\n        setFontSize,\n        lineHeight,\n        setLineHeight,\n        letterSpacing,\n        setLetterSpacing,\n        textColor,\n        setTextColor,\n        backgroundColor,\n        setBackgroundColor,\n        viewMode,\n        setViewMode,\n        textDirection,\n        setTextDirection,\n        textAlignment,\n        setTextAlignment,\n        textCase,\n        setTextCase,\n        textCenter,\n        setTextCenter,\n        textFill,\n        setTextFill,\n        resetSettings\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SettingsContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/igormocalov/Desktop/Font/contexts/SettingsContext.js\",\n        lineNumber: 166,\n        columnNumber: 5\n    }, undefined);\n};\n// Хук для удобного использования контекста\nconst useSettings = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SettingsContext);\n    if (context === undefined) {\n        throw new Error(\"useSettings must be used within a SettingsProvider\");\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./contexts/SettingsContext.js\n");

/***/ }),

/***/ "./hooks/useFontCss.js":
/*!*****************************!*\
  !*** ./hooks/useFontCss.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontCss: () => (/* binding */ useFontCss)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cssGenerator */ \"./utils/cssGenerator.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n/**\n * Хук для управления CSS стилями шрифтов.\n * \n * @param {Object} selectedFont - Текущий выбранный объект шрифта.\n * @param {Object} variableSettings - Текущие настройки вариативных осей.\n * @param {boolean} isSelectedFontVariable - Флаг, является ли выбранный шрифт вариативным.\n * @returns {Object} - Объект с CSS функциями и свойствами.\n */ function useFontCss(selectedFont, variableSettings, isSelectedFontVariable) {\n    /**\n   * Возвращает строку font-family для текущего или указанного шрифта.\n   * (Перенесено из useFontManager)\n   * \n   * @param {Object|null} font - Шрифт для получения font-family (по умолчанию selectedFont).\n   * @returns {string} - Строка font-family для CSS.\n   */ const getFontFamily = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font = null)=>{\n        const targetFont = font || selectedFont;\n        if (!targetFont) return \"inherit\";\n        // Используем fontFamily из объекта шрифта, если он есть\n        if (targetFont.fontFamily) {\n            return `\"${targetFont.fontFamily}\"`;\n        }\n        // Для Fontsource шрифтов генерируем имя на основе name\n        if (targetFont.source === \"fontsource\" && targetFont.name) {\n            return `\"${targetFont.name}\"`;\n        }\n        // Для локальных шрифтов используем name или filename\n        if (targetFont.name) {\n            return `\"${targetFont.name}\"`;\n        }\n        // Если есть filename (без расширения), используем его\n        if (targetFont.filename) {\n            const nameWithoutExt = targetFont.filename.replace(/\\.[^/.]+$/, \"\");\n            return `\"${nameWithoutExt}\"`;\n        }\n        // Если ничего не найдено, используем ID как fallback\n        if (targetFont.id) {\n            console.warn(\"getFontFamily: Возвращаем временное имя на основе ID, т.к. fontFamily еще не установлен.\");\n            return `\"Font_${targetFont.id}\"`;\n        }\n        return \"inherit\";\n    }, [\n        selectedFont\n    ]);\n    /**\n   * Возвращает строку font-variation-settings для текущего или указанного шрифта.\n   * (Перенесено из useFontManager)\n   * \n   * @param {Object|null} font - Шрифт для получения настроек (по умолчанию selectedFont).\n   * @param {Object|null} settings - Настройки осей (по умолчанию variableSettings).\n   * @returns {string} - Строка font-variation-settings для CSS.\n   */ const getVariationSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font = null, settings = null)=>{\n        const targetFont = font || selectedFont;\n        const targetSettings = settings || variableSettings;\n        if (!targetFont || !targetFont.isVariableFont || !targetSettings) {\n            return \"normal\";\n        }\n        // Проверяем, что targetSettings - это объект с настройками\n        if (typeof targetSettings !== \"object\" || Object.keys(targetSettings).length === 0) {\n            return \"normal\";\n        }\n        // Генерируем строку font-variation-settings\n        const variationString = Object.entries(targetSettings).map(([tag, value])=>`\"${tag}\" ${value}`).join(\", \");\n        return variationString || \"normal\";\n    }, [\n        selectedFont,\n        variableSettings\n    ]);\n    /**\n   * Мемоизированные CSS свойства для текущего шрифта.\n   * (Перенесено из useFontManager)\n   */ const fontCssProperties = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!selectedFont) {\n            return {\n                fontFamily: \"inherit\"\n            };\n        }\n        const properties = {\n            fontFamily: getFontFamily()\n        };\n        if (isSelectedFontVariable) {\n            const variationSettings = getVariationSettings();\n            if (variationSettings && variationSettings !== \"normal\") {\n                properties.fontVariationSettings = variationSettings;\n            }\n        } else {\n            // Для статических шрифтов добавляем weight и style\n            if (selectedFont.currentWeight) {\n                properties.fontWeight = selectedFont.currentWeight;\n            }\n            if (selectedFont.currentStyle && selectedFont.currentStyle !== \"normal\") {\n                properties.fontStyle = selectedFont.currentStyle;\n            }\n        }\n        console.log(`[fontCssProperties] Обновляем CSS для ${selectedFont.name}:`, properties);\n        return properties;\n    }, [\n        selectedFont,\n        selectedFont?.currentWeight,\n        selectedFont?.currentStyle,\n        isSelectedFontVariable,\n        getFontFamily,\n        getVariationSettings\n    ]);\n    /**\n   * Генерирует CSS свойства для применения к элементам.\n   * (Перенесено из useFontManager)\n   * \n   * @returns {Object} - Объект с CSS свойствами.\n   */ const generateCSS = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return fontCssProperties;\n    }, [\n        fontCssProperties\n    ]);\n    /**\n   * Загружает шрифт с использованием FontFace API.\n   * (Перенесено из useFontManager)\n   * \n   * @param {Object} font - Объект шрифта для загрузки.\n   * @param {Object} settings - Настройки вариативных осей (опционально).\n   * @returns {Promise<FontFace|null>} - Промис с объектом FontFace или null.\n   */ const loadFontFace = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (font, settings = {})=>{\n        if (!font) return null;\n        try {\n            const fontFamily = getFontFamily(font);\n            const url = font.url;\n            if (!url) {\n                console.warn(\"Нет URL для загрузки шрифта:\", font);\n                return null;\n            }\n            const fontFace = await (0,_utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__.loadFontFaceIfNeeded)(fontFamily.replace(/\"/g, \"\"), url, settings);\n            return fontFace;\n        } catch (error) {\n            console.error(\"Ошибка при загрузке FontFace:\", error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка загрузки шрифта: ${error.message}`);\n            return null;\n        }\n    }, [\n        getFontFamily\n    ]);\n    /**\n   * Обновляет CSS для вариативного шрифта.\n   * (Перенесено из useFontManager)\n   * \n   * @param {Object} font - Объект шрифта.\n   * @param {Object} currentSettings - Текущие настройки осей.\n   * @param {Object} prevSettings - Предыдущие настройки осей.\n   */ const updateVariableFontCss = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font, currentSettings, prevSettings = null)=>{\n        if (!font || !font.isVariableFont) return;\n        try {\n            (0,_utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__.updateVariableFontSettings)(font, currentSettings, prevSettings);\n        } catch (error) {\n            console.error(\"Ошибка при обновлении CSS вариативного шрифта:\", error);\n        }\n    }, []);\n    /**\n   * Debounced версия обновления CSS для вариативного шрифта.\n   * (Перенесено из useFontManager)\n   */ const debouncedUpdateVariableFontCss = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font, currentSettings, prevSettings = null)=>{\n        if (!font || !font.isVariableFont) return;\n        try {\n            (0,_utils_cssGenerator__WEBPACK_IMPORTED_MODULE_2__.debouncedUpdateVariableFontSettings)(font, currentSettings, prevSettings);\n        } catch (error) {\n            console.error(\"Ошибка при debounced обновлении CSS вариативного шрифта:\", error);\n        }\n    }, []);\n    /**\n   * Генерирует CSS строку для экспорта.\n   * (Перенесено из useFontManager)\n   * \n   * @param {Object} font - Объект шрифта (по умолчанию selectedFont).\n   * @param {string} selectedFontName - Имя выбранного шрифта.\n   * @returns {string} - CSS строка для экспорта.\n   */ const exportToCSS = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font = null, selectedFontName = \"\")=>{\n        const targetFont = font || selectedFont;\n        const targetFontName = selectedFontName || targetFont?.name || \"Unknown Font\";\n        if (!targetFont) {\n            return `/* Нет выбранного шрифта для экспорта */`;\n        }\n        const css = generateCSS(); // Получаем { fontFamily, fontVariationSettings?, fontWeight?, fontStyle? }\n        let cssString = `/* CSS для шрифта: ${targetFontName} */\\n`;\n        cssString += `.font-${targetFontName.replace(/\\s+/g, \"-\").toLowerCase()} {\\n`;\n        Object.entries(css).forEach(([property, value])=>{\n            // Конвертируем camelCase в kebab-case\n            const kebabProperty = property.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n            cssString += `  ${kebabProperty}: ${value};\\n`;\n        });\n        cssString += `}\\n`;\n        return cssString;\n    }, [\n        selectedFont,\n        generateCSS\n    ]);\n    return {\n        // CSS функции\n        getFontFamily,\n        getVariationSettings,\n        generateCSS,\n        // FontFace API\n        loadFontFace,\n        // Обновление CSS\n        updateVariableFontCss,\n        debouncedUpdateVariableFontCss,\n        // Экспорт\n        exportToCSS,\n        // Мемоизированные свойства\n        fontCssProperties\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFontCss.js\n");

/***/ }),

/***/ "./hooks/useFontExport.js":
/*!********************************!*\
  !*** ./hooks/useFontExport.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontExport: () => (/* binding */ useFontExport)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _utils_staticFontGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/staticFontGenerator */ \"./utils/staticFontGenerator.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__]);\nreact_toastify__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n/**\n * Хук для экспорта и скачивания шрифтов и CSS\n * \n * Включает в себя:\n * - Универсальную логику скачивания файлов\n * - Экспорт CSS с возможностью скачивания\n * - Создание статических версий вариативных шрифтов\n * - Подготовка к будущей логике генерации статических шрифтов\n * \n * @param {Function} exportToCSSFromHook - Функция генерации CSS из useFontCss\n * @returns {Object} Объект с методами экспорта\n */ function useFontExport(exportToCSSFromHook) {\n    /**\n   * Универсальная функция скачивания файлов\n   * \n   * @param {string|Blob} content - Содержимое файла (строка или Blob)\n   * @param {string} filename - Имя файла для скачивания\n   * @param {string} mimeType - MIME тип файла (игнорируется если content это Blob)\n   * @returns {boolean} Успешность операции\n   */ const downloadFile = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((content, filename, mimeType = \"text/plain\")=>{\n        try {\n            let blob;\n            if (content instanceof Blob) {\n                blob = content;\n            } else {\n                blob = new Blob([\n                    content\n                ], {\n                    type: mimeType\n                });\n            }\n            const url = URL.createObjectURL(blob);\n            const downloadLink = document.createElement(\"a\");\n            downloadLink.href = url;\n            downloadLink.download = filename;\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            // Очищаем ресурсы\n            setTimeout(()=>{\n                document.body.removeChild(downloadLink);\n                URL.revokeObjectURL(url);\n            }, 100);\n            return true;\n        } catch (error) {\n            console.error(\"Ошибка скачивания файла:\", error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Не удалось скачать файл: ${error.message}`);\n            return false;\n        }\n    }, []);\n    /**\n   * Создает статическую версию вариативного шрифта с текущими настройками осей\n   * \n   * @param {Object} selectedFont - Выбранный шрифт\n   * @param {string} selectedFontName - Имя выбранного шрифта\n   * @param {Object} variableSettings - Настройки вариативных осей\n   * @param {Function} setExportedFont - Функция установки экспортированного шрифта\n   * @returns {Object|undefined} Объект статического шрифта или undefined\n   */ const createStaticFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((selectedFont, selectedFontName, variableSettings, setExportedFont)=>{\n        if (!selectedFont) {\n            return;\n        }\n        // Создаем новое имя для статической версии шрифта\n        const staticName = `${selectedFontName.replace(/\\.[^/.]+$/, \"\")}-static`;\n        // Определяем текущие настройки\n        const settings = {\n            ...variableSettings\n        };\n        // Создаем статический экспортированный шрифт\n        const newExportedFont = {\n            name: staticName,\n            settings: settings,\n            isStatic: true,\n            originalFont: selectedFontName,\n            createdAt: new Date().toISOString()\n        };\n        setExportedFont(newExportedFont);\n        react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(`Создана статическая версия шрифта: ${staticName}`);\n        return newExportedFont;\n    }, []);\n    /**\n   * Экспортирует текущие настройки шрифта в CSS с возможностью скачивания\n   * \n   * @param {Object} selectedFont - Выбранный шрифт\n   * @param {string} selectedFontName - Имя выбранного шрифта\n   * @param {boolean} download - Если true, автоматически скачивает CSS файл\n   * @returns {string} CSS-код для текущего шрифта с примененными настройками\n   */ const exportToCSS = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((selectedFont, selectedFontName, download = false)=>{\n        // Используем функцию из useFontCss для генерации CSS\n        const cssCode = exportToCSSFromHook(selectedFont, selectedFontName);\n        if (download && cssCode) {\n            const filename = `${selectedFontName.replace(/\\s+/g, \"-\").toLowerCase()}-styles.css`;\n            const success = downloadFile(cssCode, filename, \"text/css\");\n            if (success) {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(`CSS файл ${filename} скачан`);\n            }\n        }\n        return cssCode;\n    }, [\n        exportToCSSFromHook,\n        downloadFile\n    ]);\n    /**\n   * Генерирует статический шрифт из вариативного используя современные методы\n   * \n   * @param {Object} selectedFont - Вариативный шрифт\n   * @param {Object} variableSettings - Настройки осей\n   * @param {string} format - Формат выходного файла ('woff2', 'woff', 'ttf', 'otf')\n   * @returns {Promise<Blob|null>} Blob статического шрифта или null при ошибке\n   */ const generateStaticFontFile = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (selectedFont, variableSettings, format = \"woff2\")=>{\n        if (!selectedFont || !selectedFont.isVariableFont) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Выберите вариативный шрифт для создания статической версии\");\n            return null;\n        }\n        if (!selectedFont.url && !selectedFont.arrayBuffer) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Нет доступа к файлу шрифта для генерации\");\n            return null;\n        }\n        try {\n            // 1. Импортируем новую утилиту для генерации\n            const { generateStaticFont, checkGenerationCapabilities } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/staticFontGenerator */ \"./utils/staticFontGenerator.js\"));\n            // 2. Проверяем доступные методы\n            const capabilities = await checkGenerationCapabilities();\n            // Показываем пользователю информацию о методе\n            if (capabilities.harfbuzz) {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Используется HarfBuzz для качественной генерации\");\n            } else if (capabilities.server) {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Используется серверная генерация\");\n            } else {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.warning(\"Используется псевдо-статический метод (ограниченная функциональность)\");\n            }\n            // 3. Получаем данные шрифта\n            let fontData;\n            if (selectedFont.arrayBuffer) {\n                fontData = selectedFont.arrayBuffer;\n            } else if (selectedFont.url) {\n                const response = await fetch(selectedFont.url);\n                if (!response.ok) {\n                    throw new Error(`Не удалось загрузить шрифт: ${response.status}`);\n                }\n                fontData = await response.arrayBuffer();\n            } else {\n                throw new Error(\"Нет доступных данных шрифта\");\n            }\n            // Проверяем что fontData это действительно ArrayBuffer\n            if (!fontData || !(fontData instanceof ArrayBuffer)) {\n                throw new Error(`Неправильный тип данных шрифта. Ожидается ArrayBuffer, получен: ${typeof fontData}`);\n            }\n            // 4. Генерируем статический шрифт с помощью новой утилиты\n            const result = await generateStaticFont(fontData, variableSettings, {\n                format,\n                fontName: selectedFont.name || \"VariableFont\"\n            });\n            // Показываем предупреждение если это псевдо-статический шрифт\n            if (result.warning) {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.warning(result.warning);\n            }\n            // Если есть CSS (для псевдо-статического), предлагаем его скачать\n            if (result.css) {\n                const downloadCSS = window.confirm(\"Создан псевдо-статический шрифт с CSS. Скачать CSS файл?\");\n                if (downloadCSS) {\n                    downloadFile(result.css, `${selectedFont.name}-static.css`, \"text/css\");\n                }\n            }\n            // Определяем MIME тип\n            let mimeType;\n            switch(format.toLowerCase()){\n                case \"ttf\":\n                    mimeType = \"font/ttf\";\n                    break;\n                case \"otf\":\n                    mimeType = \"font/otf\";\n                    break;\n                case \"woff\":\n                    mimeType = \"font/woff\";\n                    break;\n                case \"woff2\":\n                    mimeType = \"font/woff2\";\n                    break;\n                default:\n                    mimeType = \"font/ttf\";\n            }\n            // 5. Создаем Blob\n            const blob = new Blob([\n                result.buffer\n            ], {\n                type: mimeType\n            });\n            const statusMessage = result.isRealStatic ? `Настоящий статический шрифт сгенерирован (${(blob.size / 1024).toFixed(1)} KB)` : `Псевдо-статический шрифт создан (${(blob.size / 1024).toFixed(1)} KB)`;\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(statusMessage);\n            return blob;\n        } catch (error) {\n            console.error(\"[generateStaticFontFile] Ошибка при генерации:\", error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка генерации статического шрифта: ${error.message}`);\n            return null;\n        }\n    }, []);\n    /**\n   * Скачивает статический шрифт, сгенерированный из вариативного\n   * \n   * @param {Object} selectedFont - Вариативный шрифт\n   * @param {Object} variableSettings - Настройки осей\n   * @param {string} format - Формат файла\n   * @returns {Promise<boolean>} Успешность операции\n   */ const downloadStaticFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (selectedFont, variableSettings, format = \"ttf\")=>{\n        if (!selectedFont || !selectedFont.isVariableFont) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Выберите вариативный шрифт для создания статической версии\");\n            return false;\n        }\n        try {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Генерируем статический шрифт...\", {\n                autoClose: 2000\n            });\n            const fontBlob = await generateStaticFontFile(selectedFont, variableSettings, format);\n            if (fontBlob) {\n                // Создаем описательное имя файла с настройками осей\n                const fontBaseName = (selectedFont.name || selectedFont.fontFamily || \"font\").replace(/\\s+/g, \"-\").toLowerCase().replace(/[^a-z0-9\\-]/g, \"\");\n                // Добавляем информацию об основных осях в имя файла\n                let axisInfo = \"\";\n                // Основные оси (стандартные)\n                if (variableSettings.wght && variableSettings.wght !== 400) {\n                    axisInfo += `_w${Math.round(variableSettings.wght)}`;\n                }\n                if (variableSettings.wdth && variableSettings.wdth !== 100) {\n                    axisInfo += `_wd${Math.round(variableSettings.wdth)}`;\n                }\n                if (variableSettings.slnt && variableSettings.slnt !== 0) {\n                    axisInfo += `_sl${Math.round(Math.abs(variableSettings.slnt))}`;\n                }\n                if (variableSettings.opsz && variableSettings.opsz !== 14) {\n                    axisInfo += `_opsz${Math.round(variableSettings.opsz)}`;\n                }\n                if (variableSettings.GRAD && variableSettings.GRAD !== 0) {\n                    axisInfo += `_grad${Math.round(variableSettings.GRAD)}`;\n                }\n                // Параметрические оси (если отличаются от дефолтных значений)\n                const parametricAxes = [\n                    \"XOPQ\",\n                    \"YOPQ\",\n                    \"XTRA\",\n                    \"YTUC\",\n                    \"YTLC\",\n                    \"YTAS\",\n                    \"YTDE\",\n                    \"YTFI\"\n                ];\n                parametricAxes.forEach((axis)=>{\n                    if (variableSettings[axis] !== undefined) {\n                        const value = Math.round(variableSettings[axis]);\n                        axisInfo += `_${axis.toLowerCase()}${value}`;\n                    }\n                });\n                // Ограничиваем длину имени файла (если слишком много осей)\n                if (axisInfo.length > 50) {\n                    axisInfo = axisInfo.substring(0, 47) + \"...\";\n                }\n                const filename = `${fontBaseName}${axisInfo}_static.${format}`;\n                const success = downloadFile(fontBlob, filename, `font/${format}`);\n                if (success) {\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(`Статический шрифт скачан: ${filename}`);\n                }\n                return success;\n            }\n            return false;\n        } catch (error) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка при создании статического шрифта: ${error.message}`);\n            return false;\n        }\n    }, [\n        generateStaticFontFile,\n        downloadFile\n    ]);\n    return {\n        // Универсальные функции\n        downloadFile,\n        // CSS экспорт\n        exportToCSS,\n        // Работа со статическими версиями\n        createStaticFont,\n        // Будущая функциональность генерации статических шрифтов\n        generateStaticFontFile,\n        downloadStaticFont\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFontExport.js\n");

/***/ }),

/***/ "./hooks/useFontLoader.js":
/*!********************************!*\
  !*** ./hooks/useFontLoader.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontLoader: () => (/* binding */ useFontLoader)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/fontUtilsCommon */ \"./utils/fontUtilsCommon.js\");\n/* harmony import */ var _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/localFontProcessor */ \"./utils/localFontProcessor.js\");\n/* harmony import */ var _utils_db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/db */ \"./utils/db.js\");\n/* harmony import */ var _utils_fontManagerUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/fontManagerUtils */ \"./utils/fontManagerUtils.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_3__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n// Кэш для хранения загруженных файлов шрифтов (статических Fontsource)\nconst fontFaceCache = new Map();\n// Хеш-функция для создания уникальных ключей кэширования\nconst createCacheKey = (fontFamily, weight, style)=>`fontsource_${fontFamily}_${weight}_${style}`;\n/**\n * Хук для управления загрузкой шрифтов из различных источников.\n * @param {Function} setFonts - Функция для обновления состояния массива шрифтов.\n * @param {Function} setIsLoading - Функция для установки состояния загрузки.\n * @param {Function} safeSelectFont - Функция для безопасного выбора шрифта после загрузки.\n * @param {Array} currentFonts - Текущий массив шрифтов (для проверки дубликатов).\n */ function useFontLoader(setFonts, setIsLoading, safeSelectFont, currentFonts) {\n    // Вспомогательная функция для загрузки одного статического варианта стиля Fontsource\n    // (Перенесена из useFontManager)\n    const loadFontStyleVariant = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fontFamily, weight, style, fontObj, returnBlob = false)=>{\n        // НЕ загружаем статические стили, если шрифт определен как вариативный\n        if (fontObj.isVariableFont) {\n            return returnBlob ? null : undefined;\n        }\n        const cacheKey = createCacheKey(fontFamily, weight, style);\n        if (!returnBlob && fontFaceCache.has(cacheKey)) {\n            console.log(`[FontLoader] Используем кэшированные данные для ${fontFamily} ${weight} ${style}`);\n            const cachedData = fontFaceCache.get(cacheKey);\n            if (fontObj.loadedStyles && !fontObj.loadedStyles.some((s)=>s.weight === weight && s.style === style)) {\n                fontObj.loadedStyles.push({\n                    weight,\n                    style,\n                    cached: true\n                });\n            }\n            return returnBlob ? null : undefined;\n        }\n        let blob = null;\n        let fontDataUrl = null;\n        try {\n            const fontFamilyName = fontObj.fontFamily || fontFamily;\n            const apiUrl = `/api/fontsource/${encodeURIComponent(fontFamily)}?weight=${weight}&style=${style}&subset=latin`;\n            console.log(`[FontLoader] Запрос к API: ${apiUrl}`);\n            const response = await fetch(apiUrl);\n            if (!response.ok) throw new Error(`Ошибка HTTP: ${response.status}`);\n            // Проверяем, что ответ содержит JSON\n            const contentType = response.headers.get(\"content-type\");\n            console.log(`[FontLoader] Content-Type ответа: ${contentType}`);\n            if (!contentType || !contentType.includes(\"application/json\")) {\n                throw new Error(`Неожиданный тип ответа: ${contentType}`);\n            }\n            const responseText = await response.text();\n            console.log(`[FontLoader] Ответ API (первые 100 символов): ${responseText.substring(0, 100)}`);\n            if (!responseText || responseText === \"undefined\") {\n                throw new Error(\"API вернул пустой или undefined ответ\");\n            }\n            const { fontBufferBase64, fileName } = JSON.parse(responseText);\n            if (!fontBufferBase64) throw new Error(\"Пустой буфер шрифта\");\n            const fontBuffer = (0,_utils_fontManagerUtils__WEBPACK_IMPORTED_MODULE_5__.base64ToArrayBuffer)(fontBufferBase64);\n            const mimeType = `font/${(0,_utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.getFormatFromExtension)(fileName || \".woff2\")}`;\n            blob = new Blob([\n                fontBuffer\n            ], {\n                type: mimeType\n            });\n            fontDataUrl = URL.createObjectURL(blob);\n            const fontFaceRule = `\n        @font-face {\n          font-family: '${fontFamilyName}';\n          src: url('${fontDataUrl}') format('woff2');\n          font-weight: ${weight};\n          font-style: ${style};\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n        }\n      `;\n            const styleElement = document.createElement(\"style\");\n            styleElement.textContent = fontFaceRule;\n            document.head.appendChild(styleElement);\n            fontFaceCache.set(cacheKey, {\n                url: fontDataUrl,\n                styleElement,\n                weight,\n                style\n            });\n            const fontFace = new FontFace(fontFamilyName, `url(${fontDataUrl})`, {\n                weight: String(weight),\n                style\n            });\n            try {\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                if (fontObj.loadedStyles && !fontObj.loadedStyles.some((s)=>s.weight === weight && s.style === style)) {\n                    fontObj.loadedStyles.push({\n                        weight,\n                        style,\n                        cached: false\n                    });\n                }\n                console.log(`[FontLoader] Загружен стиль ${fontFamily} ${weight} ${style}`);\n                return returnBlob ? blob : undefined;\n            } catch (loadError) {\n                console.warn(`Не удалось загрузить FontFace для ${fontFamily} ${weight} ${style}:`, loadError);\n                if (fontDataUrl) URL.revokeObjectURL(fontDataUrl);\n                return returnBlob ? null : undefined;\n            }\n        } catch (error) {\n            console.error(`Ошибка при загрузке стиля ${fontFamily} ${weight} ${style}:`, error);\n            if (fontDataUrl) URL.revokeObjectURL(fontDataUrl);\n            if (returnBlob) return null;\n            else throw error;\n        } finally{\n            if (!returnBlob && fontDataUrl) {\n                // URL.revokeObjectURL(fontDataUrl); // Пока не удаляем, чтобы стили не пропадали\n                console.warn(`[FontLoader] Blob URL ${fontDataUrl} для ${fontFamily} ${weight} ${style} НЕ удален (для стабильности стилей).`);\n            }\n        }\n    }, [\n        _utils_fontManagerUtils__WEBPACK_IMPORTED_MODULE_5__.base64ToArrayBuffer,\n        _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.getFormatFromExtension\n    ]); // Добавляем зависимости утилит\n    // Загружает все стили/вариативный файл для шрифта Fontsource\n    // (Перенесена из useFontManager)\n    const loadAllFontsourceStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fontFamily, forceVariableFont = false)=>{\n        try {\n            const metaApiUrl = `/api/fontsource/${encodeURIComponent(fontFamily)}?meta=true`;\n            console.log(`[FontLoader] Запрос метаданных к API: ${metaApiUrl}`);\n            const metaResponse = await fetch(metaApiUrl);\n            if (!metaResponse.ok) throw new Error(`Метаданные для ${fontFamily} не найдены (статус ${metaResponse.status})`);\n            // Проверяем, что ответ содержит JSON\n            const metaContentType = metaResponse.headers.get(\"content-type\");\n            console.log(`[FontLoader] Content-Type метаданных: ${metaContentType}`);\n            if (!metaContentType || !metaContentType.includes(\"application/json\")) {\n                throw new Error(`Неожиданный тип ответа от API метаданных: ${metaContentType}`);\n            }\n            const metaResponseText = await metaResponse.text();\n            console.log(`[FontLoader] Ответ API метаданных (первые 100 символов): ${metaResponseText.substring(0, 100)}`);\n            if (!metaResponseText || metaResponseText === \"undefined\") {\n                throw new Error(\"API метаданных вернул пустой или undefined ответ\");\n            }\n            const metadata = JSON.parse(metaResponseText);\n            const actualIsVariableFont = metadata?.metadata?.variable && forceVariableFont;\n            const displayName = actualIsVariableFont ? `${fontFamily} Variable` : fontFamily;\n            const fontId = `fontsource-${fontFamily}-${actualIsVariableFont ? \"variable\" : \"static\"}`;\n            const fontObj = {\n                id: fontId,\n                name: fontFamily,\n                displayName: displayName,\n                source: \"fontsource\",\n                fontFamily: `'${displayName}'`,\n                variableAxes: actualIsVariableFont ? metadata?.metadata?.axes : {},\n                isVariableFont: actualIsVariableFont,\n                availableStyles: [],\n                loadedStyles: [],\n                file: null,\n                url: null\n            };\n            if (actualIsVariableFont && metadata.variable && metadata.variable.url) {\n                console.log(`[FontLoader] Загружаем вариативный шрифт ${displayName} по URL: ${metadata.variable.url}`);\n                try {\n                    const fontFileResponse = await fetch(metadata.variable.url);\n                    if (!fontFileResponse.ok) throw new Error(`Не удалось загрузить файл вариативного шрифта (статус ${fontFileResponse.status})`);\n                    const fontBuffer = await fontFileResponse.arrayBuffer();\n                    const fileExtension = metadata.variable.url.split(\".\").pop()?.toLowerCase() || \"woff2\";\n                    const mimeType = `font/${fileExtension === \"ttf\" ? \"ttf\" : fileExtension === \"otf\" ? \"otf\" : fileExtension === \"woff\" ? \"woff\" : \"woff2\"}`;\n                    const blob = new Blob([\n                        fontBuffer\n                    ], {\n                        type: mimeType\n                    });\n                    fontObj.file = blob;\n                    fontObj.url = URL.createObjectURL(blob);\n                    console.log(`[FontLoader] Вариативный шрифт ${displayName} загружен, Blob создан, URL: ${fontObj.url}`);\n                    // TODO: Перенести логику добавления @font-face в useFontCss\n                    const fontFaceRule = `\n              @font-face {\n                  font-family: ${fontObj.fontFamily};\n                  src: url('${fontObj.url}') format('${fileExtension === \"ttf\" ? \"truetype\" : fileExtension === \"otf\" ? \"opentype\" : fileExtension}');\n                  font-display: swap;\n              }\n            `;\n                    const styleElement = document.createElement(\"style\");\n                    styleElement.textContent = fontFaceRule;\n                    document.head.appendChild(styleElement);\n                    console.log(`[FontLoader] Вариативный шрифт ${displayName} добавлен через <style> tag.`);\n                } catch (loadError) {\n                    console.error(`[FontLoader] Ошибка при загрузке/обработке вариативного файла ${displayName}:`, loadError);\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка загрузки вариативного шрифта ${displayName}`);\n                }\n            }\n            const weightsArray = Array.isArray(metadata?.metadata?.weights) ? metadata.metadata.weights : [];\n            const stylesArray = Array.isArray(metadata?.metadata?.styles) ? metadata.metadata.styles : [];\n            const availableStyles = weightsArray.flatMap((weight)=>{\n                return stylesArray.map((style)=>{\n                    const weightNum = parseInt(weight, 10) || 400;\n                    const styleInfo = (0,_utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle)(weightNum, style);\n                    return {\n                        name: styleInfo ? styleInfo.name : `${weight} ${style}`,\n                        weight: weightNum,\n                        style: style\n                    };\n                });\n            });\n            fontObj.availableStyles = availableStyles;\n            if (!actualIsVariableFont) {\n                const regularWeight = weightsArray.includes(\"400\") ? \"400\" : weightsArray[0] || \"400\";\n                const regularStyle = stylesArray.includes(\"normal\") ? \"normal\" : stylesArray[0] || \"normal\";\n                try {\n                    console.log(`[FontLoader] Загружаем основной статический стиль ${fontFamily} ${regularWeight} ${regularStyle}`);\n                    const mainStyleBlob = await loadFontStyleVariant(fontFamily, parseInt(regularWeight, 10), regularStyle, fontObj, true);\n                    if (mainStyleBlob instanceof Blob) {\n                        fontObj.file = mainStyleBlob;\n                        fontObj.url = URL.createObjectURL(mainStyleBlob);\n                        console.log(`[FontLoader] Основной статический стиль ${displayName} загружен, Blob сохранен, URL: ${fontObj.url}`);\n                    } else {\n                        console.warn(`[FontLoader] Не удалось получить Blob для основного стиля ${displayName}. Глифы могут быть недоступны.`);\n                    }\n                } catch (mainStyleError) {\n                    console.error(`[FontLoader] Критическая ошибка при загрузке основного стиля ${displayName}:`, mainStyleError);\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка загрузки основного стиля ${displayName}. Глифы будут недоступны.`);\n                }\n                // Загружаем остальные стили в фоне\n                setTimeout(async ()=>{\n                    const promises = [];\n                    for (const weight of weightsArray){\n                        for (const style of stylesArray){\n                            if (weight === regularWeight && style === regularStyle) continue;\n                            promises.push(loadFontStyleVariant(fontFamily, parseInt(weight, 10), style, fontObj, false).catch((error)=>console.error(`Ошибка фоновой загрузки стиля ${fontFamily} ${weight} ${style}:`, error)));\n                        }\n                    }\n                    await Promise.allSettled(promises);\n                    console.log(`[FontLoader] Фоновая загрузка всех стилей для ${fontFamily} завершена.`);\n                    setFonts((currentFonts)=>currentFonts.map((f)=>f.id === fontId ? {\n                                ...f\n                            } : f));\n                }, 100);\n            }\n            return fontObj;\n        } catch (error) {\n            console.error(`[FontLoader] Ошибка при загрузке всех стилей шрифта ${fontFamily}:`, error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Не удалось загрузить шрифт ${fontFamily}: ${error.message}`);\n            throw error; // Пробрасываем ошибку для обработки в вызывающей функции\n        }\n    }, [\n        setFonts,\n        loadFontStyleVariant,\n        _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle\n    ]); // Добавляем зависимости\n    // Обрабатывает загруженные локальные шрифты\n    // (Переименована из handleFontsUploaded)\n    const handleLocalFontsUpload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (newFonts)=>{\n        console.log(\"[handleLocalFontsUpload] Начало обработки:\", newFonts);\n        if (!Array.isArray(newFonts) || newFonts.length === 0) {\n            console.log(\"[handleLocalFontsUpload] Ошибка: пустой массив или не массив\");\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Ошибка: Не указаны файлы шрифтов\");\n            return;\n        }\n        console.log(\"[handleLocalFontsUpload] Устанавливаем isLoading=true\");\n        setIsLoading(true); // Показываем индикатор загрузки\n        try {\n            const processedFonts = await Promise.all(newFonts.map(async (font)=>{\n                if (font.file instanceof Blob) {\n                    return await (0,_utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_3__.processLocalFont)(font); // processLocalFont ожидает { file: Blob, name: string, ... }\n                } else {\n                    console.warn(\"[FontLoader] Пропущен элемент в handleLocalFontsUpload, так как отсутствует Blob:\", font);\n                    return null;\n                }\n            }));\n            const validFonts = processedFonts.filter((font)=>font !== null);\n            if (validFonts.length > 0) {\n                // Определяем новые шрифты ДО вызова setFonts\n                const currentIds = new Set(currentFonts.map((f)=>f.id).filter(Boolean));\n                const trulyNewFonts = validFonts.filter((f)=>!f.id || !currentIds.has(f.id));\n                console.log(`[handleLocalFontsUpload] Найдено новых шрифтов: ${trulyNewFonts.length} из ${validFonts.length}`);\n                if (trulyNewFonts.length > 0) {\n                    // Обновляем состояние\n                    setFonts((prevFonts)=>[\n                            ...prevFonts,\n                            ...trulyNewFonts\n                        ]);\n                    // Сохраняем новые шрифты в IndexedDB\n                    await Promise.all(trulyNewFonts.map((fontToSave)=>(0,_utils_db__WEBPACK_IMPORTED_MODULE_4__.saveFont)(fontToSave)));\n                    console.log(`[FontLoader/DB] ${trulyNewFonts.length} локальных шрифтов сохранено.`);\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(`Успешно загружено и сохранено новых локальных шрифтов: ${trulyNewFonts.length}`);\n                    // Выбираем первый из *только что добавленных*\n                    if (typeof safeSelectFont === \"function\") {\n                        safeSelectFont(trulyNewFonts[0]);\n                    }\n                } else {\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Загруженные локальные шрифты уже были добавлены ранее.\");\n                }\n            } else {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.warning(\"Не удалось обработать ни одного из загруженных локальных файлов.\");\n            }\n        } catch (error) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка при загрузке локальных шрифтов: ${error.message}`);\n            console.error(\"[FontLoader] Ошибка в handleLocalFontsUpload:\", error);\n        } finally{\n            setIsLoading(false); // Убираем индикатор загрузки\n        }\n    }, [\n        setFonts,\n        setIsLoading,\n        safeSelectFont,\n        _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_3__.processLocalFont,\n        _utils_db__WEBPACK_IMPORTED_MODULE_4__.saveFont,\n        currentFonts\n    ]); // Добавляем зависимости\n    // Выбирает или загружает шрифт Fontsource\n    // (Переименована из selectOrAddFontsourceFont)\n    const loadAndSelectFontsourceFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fontFamilyName, forceVariableFont = false)=>{\n        try {\n            // Проверяем существующие шрифты (переданные как currentFonts)\n            const existingFont = currentFonts.find((font)=>{\n                const nameMatch = font.name === fontFamilyName;\n                const variableMatch = font.isVariableFont === forceVariableFont;\n                // Для вариативных также проверяем displayName, чтобы отличить от статической версии с тем же familyName\n                const displayNameMatch = forceVariableFont ? font.displayName?.includes(\"Variable\") : !font.displayName?.includes(\"Variable\");\n                return nameMatch && variableMatch && displayNameMatch;\n            });\n            if (existingFont) {\n                if (typeof safeSelectFont === \"function\") {\n                    safeSelectFont(existingFont);\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(`Шрифт ${existingFont.displayName} уже загружен.`);\n                }\n                return;\n            }\n            setIsLoading(true);\n            const fontObj = await loadAllFontsourceStyles(fontFamilyName, forceVariableFont);\n            if (fontObj) {\n                await (0,_utils_db__WEBPACK_IMPORTED_MODULE_4__.saveFont)(fontObj); // Сохраняем в DB\n                setFonts((prevFonts)=>[\n                        ...prevFonts,\n                        fontObj\n                    ]); // Добавляем в состояние\n                if (typeof safeSelectFont === \"function\") {\n                    safeSelectFont(fontObj); // Выбираем новый шрифт\n                }\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(`Шрифт ${fontObj.displayName} успешно загружен и добавлен`);\n            }\n        // Ошибка уже обработана и показана в loadAllFontsourceStyles\n        } catch (error) {\n        // Ошибка уже залогирована и показана в loadAllFontsourceStyles\n        // toast.error(`Не удалось загрузить шрифт ${fontFamilyName}`); // Можно добавить общее сообщение\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        currentFonts,\n        setIsLoading,\n        setFonts,\n        safeSelectFont,\n        loadAllFontsourceStyles,\n        _utils_db__WEBPACK_IMPORTED_MODULE_4__.saveFont\n    ]); // Добавляем зависимости\n    return {\n        handleLocalFontsUpload,\n        loadAndSelectFontsourceFont,\n        loadFontsourceStyleVariant: loadFontStyleVariant\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTO2dCQUNsSCxPQUFPbUcsYUFBYUMsaUJBQWlCQztZQUN2QztZQUVBLElBQUlKLGNBQWM7Z0JBQ2hCLElBQUksT0FBTy9ILG1CQUFtQixZQUFZO29CQUN4Q0EsZUFBZStIO29CQUNmL0ksaURBQUtBLENBQUM0SSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUVHLGFBQWF2RCxXQUFXLENBQUMsY0FBYyxDQUFDO2dCQUM5RDtnQkFDQTtZQUNGO1lBRUF6RSxhQUFhO1lBQ2IsTUFBTUksVUFBVSxNQUFNNEQsd0JBQXdCM0MsZ0JBQWdCNEM7WUFFOUQsSUFBSTdELFNBQVM7Z0JBQ1gsTUFBTWQsbURBQVFBLENBQUNjLFVBQVUsaUJBQWlCO2dCQUMxQ0wsU0FBUzJILENBQUFBLFlBQWE7MkJBQUlBO3dCQUFXdEg7cUJBQVEsR0FBRyx3QkFBd0I7Z0JBQ3hFLElBQUksT0FBT0gsbUJBQW1CLFlBQVk7b0JBQ3JDQSxlQUFlRyxVQUFVLHVCQUF1QjtnQkFDckQ7Z0JBQ0FuQixpREFBS0EsQ0FBQzJJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRXhILFFBQVFxRSxXQUFXLENBQUMsNEJBQTRCLENBQUM7WUFDMUU7UUFDQSw2REFBNkQ7UUFDL0QsRUFBRSxPQUFPVixPQUFPO1FBQ2QsK0RBQStEO1FBQy9ELGlHQUFpRztRQUNuRyxTQUFVO1lBQ1IvRCxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNFO1FBQWNGO1FBQWNEO1FBQVVFO1FBQWdCK0Q7UUFBeUIxRSwrQ0FBUUE7S0FBQyxHQUFHLHdCQUF3QjtJQUV2SCxPQUFPO1FBQ0x3SDtRQUNBaUI7UUFDQU0sNEJBQTRCbEk7SUFFOUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZvbnQtZ2F1bnRsZXQtY2xvbmUvLi9ob29rcy91c2VGb250TG9hZGVyLmpzPzYwNDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5JztcbmltcG9ydCB7IGZpbmRTdHlsZUluZm9CeVdlaWdodEFuZFN0eWxlLCBnZXRGb3JtYXRGcm9tRXh0ZW5zaW9uLCBQUkVTRVRfU1RZTEVTIH0gZnJvbSAnLi4vdXRpbHMvZm9udFV0aWxzQ29tbW9uJztcbmltcG9ydCB7IHByb2Nlc3NMb2NhbEZvbnQgfSBmcm9tICcuLi91dGlscy9sb2NhbEZvbnRQcm9jZXNzb3InO1xuaW1wb3J0IHsgc2F2ZUZvbnQgfSBmcm9tICcuLi91dGlscy9kYic7XG5pbXBvcnQgeyBiYXNlNjRUb0FycmF5QnVmZmVyIH0gZnJvbSAnLi4vdXRpbHMvZm9udE1hbmFnZXJVdGlscyc7XG5cbi8vINCa0Y3RiCDQtNC70Y8g0YXRgNCw0L3QtdC90LjRjyDQt9Cw0LPRgNGD0LbQtdC90L3Ri9GFINGE0LDQudC70L7QsiDRiNGA0LjRhNGC0L7QsiAo0YHRgtCw0YLQuNGH0LXRgdC60LjRhSBGb250c291cmNlKVxuY29uc3QgZm9udEZhY2VDYWNoZSA9IG5ldyBNYXAoKTtcblxuLy8g0KXQtdGILdGE0YPQvdC60YbQuNGPINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINGD0L3QuNC60LDQu9GM0L3Ri9GFINC60LvRjtGH0LXQuSDQutGN0YjQuNGA0L7QstCw0L3QuNGPXG5jb25zdCBjcmVhdGVDYWNoZUtleSA9IChmb250RmFtaWx5LCB3ZWlnaHQsIHN0eWxlKSA9PiBgZm9udHNvdXJjZV8ke2ZvbnRGYW1pbHl9XyR7d2VpZ2h0fV8ke3N0eWxlfWA7XG5cbi8qKlxuICog0KXRg9C6INC00LvRjyDRg9C/0YDQsNCy0LvQtdC90LjRjyDQt9Cw0LPRgNGD0LfQutC+0Lkg0YjRgNC40YTRgtC+0LIg0LjQtyDRgNCw0LfQu9C40YfQvdGL0YUg0LjRgdGC0L7Rh9C90LjQutC+0LIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRGb250cyAtINCk0YPQvdC60YbQuNGPINC00LvRjyDQvtCx0L3QvtCy0LvQtdC90LjRjyDRgdC+0YHRgtC+0Y/QvdC40Y8g0LzQsNGB0YHQuNCy0LAg0YjRgNC40YTRgtC+0LIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRJc0xvYWRpbmcgLSDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0YPRgdGC0LDQvdC+0LLQutC4INGB0L7RgdGC0L7Rj9C90LjRjyDQt9Cw0LPRgNGD0LfQutC4LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2FmZVNlbGVjdEZvbnQgLSDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0LHQtdC30L7Qv9Cw0YHQvdC+0LPQviDQstGL0LHQvtGA0LAg0YjRgNC40YTRgtCwINC/0L7RgdC70LUg0LfQsNCz0YDRg9C30LrQuC5cbiAqIEBwYXJhbSB7QXJyYXl9IGN1cnJlbnRGb250cyAtINCi0LXQutGD0YnQuNC5INC80LDRgdGB0LjQsiDRiNGA0LjRhNGC0L7QsiAo0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0LTRg9Cx0LvQuNC60LDRgtC+0LIpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9udExvYWRlcihzZXRGb250cywgc2V0SXNMb2FkaW5nLCBzYWZlU2VsZWN0Rm9udCwgY3VycmVudEZvbnRzKSB7XG5cbiAgLy8g0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3QsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDQt9Cw0LPRgNGD0LfQutC4INC+0LTQvdC+0LPQviDRgdGC0LDRgtC40YfQtdGB0LrQvtCz0L4g0LLQsNGA0LjQsNC90YLQsCDRgdGC0LjQu9GPIEZvbnRzb3VyY2VcbiAgLy8gKNCf0LXRgNC10L3QtdGB0LXQvdCwINC40LcgdXNlRm9udE1hbmFnZXIpXG4gIGNvbnN0IGxvYWRGb250U3R5bGVWYXJpYW50ID0gdXNlQ2FsbGJhY2soYXN5bmMgKGZvbnRGYW1pbHksIHdlaWdodCwgc3R5bGUsIGZvbnRPYmosIHJldHVybkJsb2IgPSBmYWxzZSkgPT4ge1xuICAgIC8vINCd0JUg0LfQsNCz0YDRg9C20LDQtdC8INGB0YLQsNGC0LjRh9C10YHQutC40LUg0YHRgtC40LvQuCwg0LXRgdC70Lgg0YjRgNC40YTRgiDQvtC/0YDQtdC00LXQu9C10L0g0LrQsNC6INCy0LDRgNC40LDRgtC40LLQvdGL0LlcbiAgICBpZiAoZm9udE9iai5pc1ZhcmlhYmxlRm9udCkge1xuICAgICAgcmV0dXJuIHJldHVybkJsb2IgPyBudWxsIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGNhY2hlS2V5ID0gY3JlYXRlQ2FjaGVLZXkoZm9udEZhbWlseSwgd2VpZ2h0LCBzdHlsZSk7XG5cbiAgICBpZiAoIXJldHVybkJsb2IgJiYgZm9udEZhY2VDYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG4gICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXJdINCY0YHQv9C+0LvRjNC30YPQtdC8INC60Y3RiNC40YDQvtCy0LDQvdC90YvQtSDQtNCw0L3QvdGL0LUg0LTQu9GPICR7Zm9udEZhbWlseX0gJHt3ZWlnaHR9ICR7c3R5bGV9YCk7XG4gICAgICBjb25zdCBjYWNoZWREYXRhID0gZm9udEZhY2VDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgaWYgKGZvbnRPYmoubG9hZGVkU3R5bGVzICYmICFmb250T2JqLmxvYWRlZFN0eWxlcy5zb21lKHMgPT4gcy53ZWlnaHQgPT09IHdlaWdodCAmJiBzLnN0eWxlID09PSBzdHlsZSkpIHtcbiAgICAgICAgZm9udE9iai5sb2FkZWRTdHlsZXMucHVzaCh7IHdlaWdodCwgc3R5bGUsIGNhY2hlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXR1cm5CbG9iID8gbnVsbCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgYmxvYiA9IG51bGw7XG4gICAgbGV0IGZvbnREYXRhVXJsID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb250RmFtaWx5TmFtZSA9IGZvbnRPYmouZm9udEZhbWlseSB8fCBmb250RmFtaWx5O1xuICAgICAgY29uc3QgYXBpVXJsID0gYC9hcGkvZm9udHNvdXJjZS8ke2VuY29kZVVSSUNvbXBvbmVudChmb250RmFtaWx5KX0/d2VpZ2h0PSR7d2VpZ2h0fSZzdHlsZT0ke3N0eWxlfSZzdWJzZXQ9bGF0aW5gO1xuICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSDQl9Cw0L/RgNC+0YEg0LogQVBJOiAke2FwaVVybH1gKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKGDQntGI0LjQsdC60LAgSFRUUDogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICBcbiAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INC+0YLQstC10YIg0YHQvtC00LXRgNC20LjRgiBKU09OXG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgIGNvbnNvbGUubG9nKGBbRm9udExvYWRlcl0gQ29udGVudC1UeXBlINC+0YLQstC10YLQsDogJHtjb250ZW50VHlwZX1gKTtcbiAgICAgIGlmICghY29udGVudFR5cGUgfHwgIWNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDQndC10L7QttC40LTQsNC90L3Ri9C5INGC0LjQvyDQvtGC0LLQtdGC0LA6ICR7Y29udGVudFR5cGV9YCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBbRm9udExvYWRlcl0g0J7RgtCy0LXRgiBBUEkgKNC/0LXRgNCy0YvQtSAxMDAg0YHQuNC80LLQvtC70L7Qsik6ICR7cmVzcG9uc2VUZXh0LnN1YnN0cmluZygwLCAxMDApfWApO1xuICAgICAgaWYgKCFyZXNwb25zZVRleHQgfHwgcmVzcG9uc2VUZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSDQstC10YDQvdGD0Lsg0L/Rg9GB0YLQvtC5INC40LvQuCB1bmRlZmluZWQg0L7RgtCy0LXRgicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB7IGZvbnRCdWZmZXJCYXNlNjQsIGZpbGVOYW1lIH0gPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XG4gICAgICBpZiAoIWZvbnRCdWZmZXJCYXNlNjQpIHRocm93IG5ldyBFcnJvcihcItCf0YPRgdGC0L7QuSDQsdGD0YTQtdGAINGI0YDQuNGE0YLQsFwiKTtcblxuICAgICAgY29uc3QgZm9udEJ1ZmZlciA9IGJhc2U2NFRvQXJyYXlCdWZmZXIoZm9udEJ1ZmZlckJhc2U2NCk7XG4gICAgICBjb25zdCBtaW1lVHlwZSA9IGBmb250LyR7Z2V0Rm9ybWF0RnJvbUV4dGVuc2lvbihmaWxlTmFtZSB8fCAnLndvZmYyJyl9YDtcbiAgICAgIGJsb2IgPSBuZXcgQmxvYihbZm9udEJ1ZmZlcl0sIHsgdHlwZTogbWltZVR5cGUgfSk7XG4gICAgICBmb250RGF0YVVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cbiAgICAgIGNvbnN0IGZvbnRGYWNlUnVsZSA9IGBcbiAgICAgICAgQGZvbnQtZmFjZSB7XG4gICAgICAgICAgZm9udC1mYW1pbHk6ICcke2ZvbnRGYW1pbHlOYW1lfSc7XG4gICAgICAgICAgc3JjOiB1cmwoJyR7Zm9udERhdGFVcmx9JykgZm9ybWF0KCd3b2ZmMicpO1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiAke3dlaWdodH07XG4gICAgICAgICAgZm9udC1zdHlsZTogJHtzdHlsZX07XG4gICAgICAgICAgdW5pY29kZS1yYW5nZTogVSswMDAwLTAwRkYsIFUrMDEzMSwgVSswMTUyLTAxNTMsIFUrMDJCQi0wMkJDLCBVKzAyQzYsIFUrMDJEQSwgVSswMkRDLCBVKzIwMDAtMjA2RiwgVSsyMDc0LCBVKzIwQUMsIFUrMjEyMiwgVSsyMTkxLCBVKzIxOTMsIFUrMjIxMiwgVSsyMjE1LCBVK0ZFRkYsIFUrRkZGRDtcbiAgICAgICAgfVxuICAgICAgYDtcbiAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBmb250RmFjZVJ1bGU7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG5cbiAgICAgIGZvbnRGYWNlQ2FjaGUuc2V0KGNhY2hlS2V5LCB7IHVybDogZm9udERhdGFVcmwsIHN0eWxlRWxlbWVudCwgd2VpZ2h0LCBzdHlsZSB9KTtcblxuICAgICAgY29uc3QgZm9udEZhY2UgPSBuZXcgRm9udEZhY2UoZm9udEZhbWlseU5hbWUsIGB1cmwoJHtmb250RGF0YVVybH0pYCwgeyB3ZWlnaHQ6IFN0cmluZyh3ZWlnaHQpLCBzdHlsZSB9KTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZm9udEZhY2UubG9hZCgpO1xuICAgICAgICBkb2N1bWVudC5mb250cy5hZGQoZm9udEZhY2UpO1xuICAgICAgICBpZiAoZm9udE9iai5sb2FkZWRTdHlsZXMgJiYgIWZvbnRPYmoubG9hZGVkU3R5bGVzLnNvbWUocyA9PiBzLndlaWdodCA9PT0gd2VpZ2h0ICYmIHMuc3R5bGUgPT09IHN0eWxlKSkge1xuICAgICAgICAgIGZvbnRPYmoubG9hZGVkU3R5bGVzLnB1c2goeyB3ZWlnaHQsIHN0eWxlLCBjYWNoZWQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGBbRm9udExvYWRlcl0g0JfQsNCz0YDRg9C20LXQvSDRgdGC0LjQu9GMICR7Zm9udEZhbWlseX0gJHt3ZWlnaHR9ICR7c3R5bGV9YCk7XG4gICAgICAgIHJldHVybiByZXR1cm5CbG9iID8gYmxvYiA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGxvYWRFcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oYNCd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMIEZvbnRGYWNlINC00LvRjyAke2ZvbnRGYW1pbHl9ICR7d2VpZ2h0fSAke3N0eWxlfTpgLCBsb2FkRXJyb3IpO1xuICAgICAgICBpZiAoZm9udERhdGFVcmwpIFVSTC5yZXZva2VPYmplY3RVUkwoZm9udERhdGFVcmwpO1xuICAgICAgICByZXR1cm4gcmV0dXJuQmxvYiA/IG51bGwgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYNCe0YjQuNCx0LrQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0LjQu9GPICR7Zm9udEZhbWlseX0gJHt3ZWlnaHR9ICR7c3R5bGV9OmAsIGVycm9yKTtcbiAgICAgIGlmIChmb250RGF0YVVybCkgVVJMLnJldm9rZU9iamVjdFVSTChmb250RGF0YVVybCk7XG4gICAgICBpZiAocmV0dXJuQmxvYikgcmV0dXJuIG51bGw7XG4gICAgICBlbHNlIHRocm93IGVycm9yO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoIXJldHVybkJsb2IgJiYgZm9udERhdGFVcmwpIHtcbiAgICAgICAgLy8gVVJMLnJldm9rZU9iamVjdFVSTChmb250RGF0YVVybCk7IC8vINCf0L7QutCwINC90LUg0YPQtNCw0LvRj9C10LwsINGH0YLQvtCx0Ysg0YHRgtC40LvQuCDQvdC1INC/0YDQvtC/0LDQtNCw0LvQuFxuICAgICAgICBjb25zb2xlLndhcm4oYFtGb250TG9hZGVyXSBCbG9iIFVSTCAke2ZvbnREYXRhVXJsfSDQtNC70Y8gJHtmb250RmFtaWx5fSAke3dlaWdodH0gJHtzdHlsZX0g0J3QlSDRg9C00LDQu9C10L0gKNC00LvRjyDRgdGC0LDQsdC40LvRjNC90L7RgdGC0Lgg0YHRgtC40LvQtdC5KS5gKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jhc2U2NFRvQXJyYXlCdWZmZXIsIGdldEZvcm1hdEZyb21FeHRlbnNpb25dKTsgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC30LDQstC40YHQuNC80L7RgdGC0Lgg0YPRgtC40LvQuNGCXG5cbiAgLy8g0JfQsNCz0YDRg9C20LDQtdGCINCy0YHQtSDRgdGC0LjQu9C4L9Cy0LDRgNC40LDRgtC40LLQvdGL0Lkg0YTQsNC50Lsg0LTQu9GPINGI0YDQuNGE0YLQsCBGb250c291cmNlXG4gIC8vICjQn9C10YDQtdC90LXRgdC10L3QsCDQuNC3IHVzZUZvbnRNYW5hZ2VyKVxuICBjb25zdCBsb2FkQWxsRm9udHNvdXJjZVN0eWxlcyA9IHVzZUNhbGxiYWNrKGFzeW5jIChmb250RmFtaWx5LCBmb3JjZVZhcmlhYmxlRm9udCA9IGZhbHNlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1ldGFBcGlVcmwgPSBgL2FwaS9mb250c291cmNlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGZvbnRGYW1pbHkpfT9tZXRhPXRydWVgO1xuICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSDQl9Cw0L/RgNC+0YEg0LzQtdGC0LDQtNCw0L3QvdGL0YUg0LogQVBJOiAke21ldGFBcGlVcmx9YCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldGFSZXNwb25zZSA9IGF3YWl0IGZldGNoKG1ldGFBcGlVcmwpO1xuICAgICAgaWYgKCFtZXRhUmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihg0JzQtdGC0LDQtNCw0L3QvdGL0LUg0LTQu9GPICR7Zm9udEZhbWlseX0g0L3QtSDQvdCw0LnQtNC10L3RiyAo0YHRgtCw0YLRg9GBICR7bWV0YVJlc3BvbnNlLnN0YXR1c30pYCk7XG4gICAgICBcbiAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INC+0YLQstC10YIg0YHQvtC00LXRgNC20LjRgiBKU09OXG4gICAgICBjb25zdCBtZXRhQ29udGVudFR5cGUgPSBtZXRhUmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSBDb250ZW50LVR5cGUg0LzQtdGC0LDQtNCw0L3QvdGL0YU6ICR7bWV0YUNvbnRlbnRUeXBlfWApO1xuICAgICAgaWYgKCFtZXRhQ29udGVudFR5cGUgfHwgIW1ldGFDb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg0J3QtdC+0LbQuNC00LDQvdC90YvQuSDRgtC40L8g0L7RgtCy0LXRgtCwINC+0YIgQVBJINC80LXRgtCw0LTQsNC90L3Ri9GFOiAke21ldGFDb250ZW50VHlwZX1gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgbWV0YVJlc3BvbnNlVGV4dCA9IGF3YWl0IG1ldGFSZXNwb25zZS50ZXh0KCk7XG4gICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXJdINCe0YLQstC10YIgQVBJINC80LXRgtCw0LTQsNC90L3Ri9GFICjQv9C10YDQstGL0LUgMTAwINGB0LjQvNCy0L7Qu9C+0LIpOiAke21ldGFSZXNwb25zZVRleHQuc3Vic3RyaW5nKDAsIDEwMCl9YCk7XG4gICAgICBpZiAoIW1ldGFSZXNwb25zZVRleHQgfHwgbWV0YVJlc3BvbnNlVGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBUEkg0LzQtdGC0LDQtNCw0L3QvdGL0YUg0LLQtdGA0L3Rg9C7INC/0YPRgdGC0L7QuSDQuNC70LggdW5kZWZpbmVkINC+0YLQstC10YInKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgbWV0YWRhdGEgPSBKU09OLnBhcnNlKG1ldGFSZXNwb25zZVRleHQpO1xuXG4gICAgICBjb25zdCBhY3R1YWxJc1ZhcmlhYmxlRm9udCA9IG1ldGFkYXRhPy5tZXRhZGF0YT8udmFyaWFibGUgJiYgZm9yY2VWYXJpYWJsZUZvbnQ7XG4gICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGFjdHVhbElzVmFyaWFibGVGb250ID8gYCR7Zm9udEZhbWlseX0gVmFyaWFibGVgIDogZm9udEZhbWlseTtcbiAgICAgIGNvbnN0IGZvbnRJZCA9IGBmb250c291cmNlLSR7Zm9udEZhbWlseX0tJHthY3R1YWxJc1ZhcmlhYmxlRm9udCA/ICd2YXJpYWJsZScgOiAnc3RhdGljJ31gO1xuXG4gICAgICBjb25zdCBmb250T2JqID0ge1xuICAgICAgICBpZDogZm9udElkLFxuICAgICAgICBuYW1lOiBmb250RmFtaWx5LFxuICAgICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICAgIHNvdXJjZTogJ2ZvbnRzb3VyY2UnLFxuICAgICAgICBmb250RmFtaWx5OiBgJyR7ZGlzcGxheU5hbWV9J2AsXG4gICAgICAgIHZhcmlhYmxlQXhlczogYWN0dWFsSXNWYXJpYWJsZUZvbnQgPyBtZXRhZGF0YT8ubWV0YWRhdGE/LmF4ZXMgOiB7fSxcbiAgICAgICAgaXNWYXJpYWJsZUZvbnQ6IGFjdHVhbElzVmFyaWFibGVGb250LFxuICAgICAgICBhdmFpbGFibGVTdHlsZXM6IFtdLFxuICAgICAgICBsb2FkZWRTdHlsZXM6IFtdLFxuICAgICAgICBmaWxlOiBudWxsLFxuICAgICAgICB1cmw6IG51bGxcbiAgICAgIH07XG5cbiAgICAgIGlmIChhY3R1YWxJc1ZhcmlhYmxlRm9udCAmJiBtZXRhZGF0YS52YXJpYWJsZSAmJiBtZXRhZGF0YS52YXJpYWJsZS51cmwpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSDQl9Cw0LPRgNGD0LbQsNC10Lwg0LLQsNGA0LjQsNGC0LjQstC90YvQuSDRiNGA0LjRhNGCICR7ZGlzcGxheU5hbWV9INC/0L4gVVJMOiAke21ldGFkYXRhLnZhcmlhYmxlLnVybH1gKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBmb250RmlsZVJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobWV0YWRhdGEudmFyaWFibGUudXJsKTtcbiAgICAgICAgICBpZiAoIWZvbnRGaWxlUmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihg0J3QtSDRg9C00LDQu9C+0YHRjCDQt9Cw0LPRgNGD0LfQuNGC0Ywg0YTQsNC50Lsg0LLQsNGA0LjQsNGC0LjQstC90L7Qs9C+INGI0YDQuNGE0YLQsCAo0YHRgtCw0YLRg9GBICR7Zm9udEZpbGVSZXNwb25zZS5zdGF0dXN9KWApO1xuICAgICAgICAgIGNvbnN0IGZvbnRCdWZmZXIgPSBhd2FpdCBmb250RmlsZVJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IG1ldGFkYXRhLnZhcmlhYmxlLnVybC5zcGxpdCgnLicpLnBvcCgpPy50b0xvd2VyQ2FzZSgpIHx8ICd3b2ZmMic7XG4gICAgICAgICAgY29uc3QgbWltZVR5cGUgPSBgZm9udC8ke2ZpbGVFeHRlbnNpb24gPT09ICd0dGYnID8gJ3R0ZicgOiBmaWxlRXh0ZW5zaW9uID09PSAnb3RmJyA/ICdvdGYnIDogZmlsZUV4dGVuc2lvbiA9PT0gJ3dvZmYnID8gJ3dvZmYnIDogJ3dvZmYyJ31gO1xuICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZm9udEJ1ZmZlcl0sIHsgdHlwZTogbWltZVR5cGUgfSk7XG5cbiAgICAgICAgICBmb250T2JqLmZpbGUgPSBibG9iO1xuICAgICAgICAgIGZvbnRPYmoudXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXJdINCS0LDRgNC40LDRgtC40LLQvdGL0Lkg0YjRgNC40YTRgiAke2Rpc3BsYXlOYW1lfSDQt9Cw0LPRgNGD0LbQtdC9LCBCbG9iINGB0L7Qt9C00LDQvSwgVVJMOiAke2ZvbnRPYmoudXJsfWApO1xuXG4gICAgICAgICAgLy8gVE9ETzog0J/QtdGA0LXQvdC10YHRgtC4INC70L7Qs9C40LrRgyDQtNC+0LHQsNCy0LvQtdC90LjRjyBAZm9udC1mYWNlINCyIHVzZUZvbnRDc3NcbiAgICAgICAgICBjb25zdCBmb250RmFjZVJ1bGUgPSBgXG4gICAgICAgICAgICAgIEBmb250LWZhY2Uge1xuICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICR7Zm9udE9iai5mb250RmFtaWx5fTtcbiAgICAgICAgICAgICAgICAgIHNyYzogdXJsKCcke2ZvbnRPYmoudXJsfScpIGZvcm1hdCgnJHtmaWxlRXh0ZW5zaW9uID09PSAndHRmJyA/ICd0cnVldHlwZScgOiBmaWxlRXh0ZW5zaW9uID09PSAnb3RmJyA/ICdvcGVudHlwZScgOiBmaWxlRXh0ZW5zaW9ufScpO1xuICAgICAgICAgICAgICAgICAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgO1xuICAgICAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gZm9udEZhY2VSdWxlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXJdINCS0LDRgNC40LDRgtC40LLQvdGL0Lkg0YjRgNC40YTRgiAke2Rpc3BsYXlOYW1lfSDQtNC+0LHQsNCy0LvQtdC9INGH0LXRgNC10LcgPHN0eWxlPiB0YWcuYCk7XG5cbiAgICAgICAgfSBjYXRjaCAobG9hZEVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgW0ZvbnRMb2FkZXJdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtS/QvtCx0YDQsNCx0L7RgtC60LUg0LLQsNGA0LjQsNGC0LjQstC90L7Qs9C+INGE0LDQudC70LAgJHtkaXNwbGF5TmFtZX06YCwgbG9hZEVycm9yKTtcbiAgICAgICAgICB0b2FzdC5lcnJvcihg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LLQsNGA0LjQsNGC0LjQstC90L7Qs9C+INGI0YDQuNGE0YLQsCAke2Rpc3BsYXlOYW1lfWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdlaWdodHNBcnJheSA9IEFycmF5LmlzQXJyYXkobWV0YWRhdGE/Lm1ldGFkYXRhPy53ZWlnaHRzKSA/IG1ldGFkYXRhLm1ldGFkYXRhLndlaWdodHMgOiBbXTtcbiAgICAgIGNvbnN0IHN0eWxlc0FycmF5ID0gQXJyYXkuaXNBcnJheShtZXRhZGF0YT8ubWV0YWRhdGE/LnN0eWxlcykgPyBtZXRhZGF0YS5tZXRhZGF0YS5zdHlsZXMgOiBbXTtcblxuICAgICAgY29uc3QgYXZhaWxhYmxlU3R5bGVzID0gd2VpZ2h0c0FycmF5LmZsYXRNYXAod2VpZ2h0ID0+IHtcbiAgICAgICAgcmV0dXJuIHN0eWxlc0FycmF5Lm1hcChzdHlsZSA9PiB7XG4gICAgICAgICAgY29uc3Qgd2VpZ2h0TnVtID0gcGFyc2VJbnQod2VpZ2h0LCAxMCkgfHwgNDAwO1xuICAgICAgICAgIGNvbnN0IHN0eWxlSW5mbyA9IGZpbmRTdHlsZUluZm9CeVdlaWdodEFuZFN0eWxlKHdlaWdodE51bSwgc3R5bGUpO1xuICAgICAgICAgIHJldHVybiB7IG5hbWU6IHN0eWxlSW5mbyA/IHN0eWxlSW5mby5uYW1lIDogYCR7d2VpZ2h0fSAke3N0eWxlfWAsIHdlaWdodDogd2VpZ2h0TnVtLCBzdHlsZTogc3R5bGUgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZvbnRPYmouYXZhaWxhYmxlU3R5bGVzID0gYXZhaWxhYmxlU3R5bGVzO1xuXG4gICAgICBpZiAoIWFjdHVhbElzVmFyaWFibGVGb250KSB7XG4gICAgICAgIGNvbnN0IHJlZ3VsYXJXZWlnaHQgPSB3ZWlnaHRzQXJyYXkuaW5jbHVkZXMoJzQwMCcpID8gJzQwMCcgOiAod2VpZ2h0c0FycmF5WzBdIHx8ICc0MDAnKTtcbiAgICAgICAgY29uc3QgcmVndWxhclN0eWxlID0gc3R5bGVzQXJyYXkuaW5jbHVkZXMoJ25vcm1hbCcpID8gJ25vcm1hbCcgOiAoc3R5bGVzQXJyYXlbMF0gfHwgJ25vcm1hbCcpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSDQl9Cw0LPRgNGD0LbQsNC10Lwg0L7RgdC90L7QstC90L7QuSDRgdGC0LDRgtC40YfQtdGB0LrQuNC5INGB0YLQuNC70YwgJHtmb250RmFtaWx5fSAke3JlZ3VsYXJXZWlnaHR9ICR7cmVndWxhclN0eWxlfWApO1xuICAgICAgICAgIGNvbnN0IG1haW5TdHlsZUJsb2IgPSBhd2FpdCBsb2FkRm9udFN0eWxlVmFyaWFudChmb250RmFtaWx5LCBwYXJzZUludChyZWd1bGFyV2VpZ2h0LCAxMCksIHJlZ3VsYXJTdHlsZSwgZm9udE9iaiwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKG1haW5TdHlsZUJsb2IgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICBmb250T2JqLmZpbGUgPSBtYWluU3R5bGVCbG9iO1xuICAgICAgICAgICAgZm9udE9iai51cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKG1haW5TdHlsZUJsb2IpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtGb250TG9hZGVyXSDQntGB0L3QvtCy0L3QvtC5INGB0YLQsNGC0LjRh9C10YHQutC40Lkg0YHRgtC40LvRjCAke2Rpc3BsYXlOYW1lfSDQt9Cw0LPRgNGD0LbQtdC9LCBCbG9iINGB0L7RhdGA0LDQvdC10L0sIFVSTDogJHtmb250T2JqLnVybH1gKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbRm9udExvYWRlcl0g0J3QtSDRg9C00LDQu9C+0YHRjCDQv9C+0LvRg9GH0LjRgtGMIEJsb2Ig0LTQu9GPINC+0YHQvdC+0LLQvdC+0LPQviDRgdGC0LjQu9GPICR7ZGlzcGxheU5hbWV9LiDQk9C70LjRhNGLINC80L7Qs9GD0YIg0LHRi9GC0Ywg0L3QtdC00L7RgdGC0YPQv9C90YsuYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChtYWluU3R5bGVFcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0ZvbnRMb2FkZXJdINCa0YDQuNGC0LjRh9C10YHQutCw0Y8g0L7RiNC40LHQutCwINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INC+0YHQvdC+0LLQvdC+0LPQviDRgdGC0LjQu9GPICR7ZGlzcGxheU5hbWV9OmAsIG1haW5TdHlsZUVycm9yKTtcbiAgICAgICAgICAgIHRvYXN0LmVycm9yKGDQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQvtGB0L3QvtCy0L3QvtCz0L4g0YHRgtC40LvRjyAke2Rpc3BsYXlOYW1lfS4g0JPQu9C40YTRiyDQsdGD0LTRg9GCINC90LXQtNC+0YHRgtGD0L/QvdGLLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0JfQsNCz0YDRg9C20LDQtdC8INC+0YHRgtCw0LvRjNC90YvQtSDRgdGC0LjQu9C4INCyINGE0L7QvdC1XG4gICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCB3ZWlnaHQgb2Ygd2VpZ2h0c0FycmF5KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIHN0eWxlc0FycmF5KSB7XG4gICAgICAgICAgICAgIGlmICh3ZWlnaHQgPT09IHJlZ3VsYXJXZWlnaHQgJiYgc3R5bGUgPT09IHJlZ3VsYXJTdHlsZSkgY29udGludWU7XG4gICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobG9hZEZvbnRTdHlsZVZhcmlhbnQoZm9udEZhbWlseSwgcGFyc2VJbnQod2VpZ2h0LCAxMCksIHN0eWxlLCBmb250T2JqLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihg0J7RiNC40LHQutCwINGE0L7QvdC+0LLQvtC5INC30LDQs9GA0YPQt9C60Lgg0YHRgtC40LvRjyAke2ZvbnRGYW1pbHl9ICR7d2VpZ2h0fSAke3N0eWxlfTpgLCBlcnJvcikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXJdINCk0L7QvdC+0LLQsNGPINC30LDQs9GA0YPQt9C60LAg0LLRgdC10YUg0YHRgtC40LvQtdC5INC00LvRjyAke2ZvbnRGYW1pbHl9INC30LDQstC10YDRiNC10L3QsC5gKTtcbiAgICAgICAgICBzZXRGb250cyhjdXJyZW50Rm9udHMgPT4gY3VycmVudEZvbnRzLm1hcChmID0+IGYuaWQgPT09IGZvbnRJZCA/IHsgLi4uZiB9IDogZikpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9udE9iajtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgW0ZvbnRMb2FkZXJdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDQstGB0LXRhSDRgdGC0LjQu9C10Lkg0YjRgNC40YTRgtCwICR7Zm9udEZhbWlseX06YCwgZXJyb3IpO1xuICAgICAgdG9hc3QuZXJyb3IoYNCd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINGI0YDQuNGE0YIgJHtmb250RmFtaWx5fTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgdGhyb3cgZXJyb3I7IC8vINCf0YDQvtCx0YDQsNGB0YvQstCw0LXQvCDQvtGI0LjQsdC60YMg0LTQu9GPINC+0LHRgNCw0LHQvtGC0LrQuCDQsiDQstGL0LfRi9Cy0LDRjtGJ0LXQuSDRhNGD0L3QutGG0LjQuFxuICAgIH1cbiAgfSwgW3NldEZvbnRzLCBsb2FkRm9udFN0eWxlVmFyaWFudCwgZmluZFN0eWxlSW5mb0J5V2VpZ2h0QW5kU3R5bGVdKTsgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC30LDQstC40YHQuNC80L7RgdGC0LhcblxuICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0LfQsNCz0YDRg9C20LXQvdC90YvQtSDQu9C+0LrQsNC70YzQvdGL0LUg0YjRgNC40YTRgtGLXG4gIC8vICjQn9C10YDQtdC40LzQtdC90L7QstCw0L3QsCDQuNC3IGhhbmRsZUZvbnRzVXBsb2FkZWQpXG4gIGNvbnN0IGhhbmRsZUxvY2FsRm9udHNVcGxvYWQgPSB1c2VDYWxsYmFjayhhc3luYyAobmV3Rm9udHMpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW2hhbmRsZUxvY2FsRm9udHNVcGxvYWRdINCd0LDRh9Cw0LvQviDQvtCx0YDQsNCx0L7RgtC60Lg6JywgbmV3Rm9udHMpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdGb250cykgfHwgbmV3Rm9udHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnW2hhbmRsZUxvY2FsRm9udHNVcGxvYWRdINCe0YjQuNCx0LrQsDog0L/Rg9GB0YLQvtC5INC80LDRgdGB0LjQsiDQuNC70Lgg0L3QtSDQvNCw0YHRgdC40LInKTtcbiAgICAgIHRvYXN0LmVycm9yKCfQntGI0LjQsdC60LA6INCd0LUg0YPQutCw0LfQsNC90Ysg0YTQsNC50LvRiyDRiNGA0LjRhNGC0L7QsicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnW2hhbmRsZUxvY2FsRm9udHNVcGxvYWRdINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8IGlzTG9hZGluZz10cnVlJyk7XG4gICAgc2V0SXNMb2FkaW5nKHRydWUpOyAvLyDQn9C+0LrQsNC30YvQstCw0LXQvCDQuNC90LTQuNC60LDRgtC+0YAg0LfQsNCz0YDRg9C30LrQuFxuICAgIHRyeSB7XG4gICAgICBjb25zdCBwcm9jZXNzZWRGb250cyA9IGF3YWl0IFByb21pc2UuYWxsKG5ld0ZvbnRzLm1hcChhc3luYyAoZm9udCkgPT4ge1xuICAgICAgICBpZiAoZm9udC5maWxlIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzTG9jYWxGb250KGZvbnQpOyAvLyBwcm9jZXNzTG9jYWxGb250INC+0LbQuNC00LDQtdGCIHsgZmlsZTogQmxvYiwgbmFtZTogc3RyaW5nLCAuLi4gfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybignW0ZvbnRMb2FkZXJdINCf0YDQvtC/0YPRidC10L0g0Y3Qu9C10LzQtdC90YIg0LIgaGFuZGxlTG9jYWxGb250c1VwbG9hZCwg0YLQsNC6INC60LDQuiDQvtGC0YHRg9GC0YHRgtCy0YPQtdGCIEJsb2I6JywgZm9udCk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgdmFsaWRGb250cyA9IHByb2Nlc3NlZEZvbnRzLmZpbHRlcihmb250ID0+IGZvbnQgIT09IG51bGwpO1xuXG4gICAgICBpZiAodmFsaWRGb250cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vINCe0L/RgNC10LTQtdC70Y/QtdC8INC90L7QstGL0LUg0YjRgNC40YTRgtGLINCU0J4g0LLRi9C30L7QstCwIHNldEZvbnRzXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJZHMgPSBuZXcgU2V0KGN1cnJlbnRGb250cy5tYXAoZiA9PiBmLmlkKS5maWx0ZXIoQm9vbGVhbikpO1xuICAgICAgICBjb25zdCB0cnVseU5ld0ZvbnRzID0gdmFsaWRGb250cy5maWx0ZXIoZiA9PiAhZi5pZCB8fCAhY3VycmVudElkcy5oYXMoZi5pZCkpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtoYW5kbGVMb2NhbEZvbnRzVXBsb2FkXSDQndCw0LnQtNC10L3QviDQvdC+0LLRi9GFINGI0YDQuNGE0YLQvtCyOiAke3RydWx5TmV3Rm9udHMubGVuZ3RofSDQuNC3ICR7dmFsaWRGb250cy5sZW5ndGh9YCk7XG5cbiAgICAgICAgaWYgKHRydWx5TmV3Rm9udHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC+0YHRgtC+0Y/QvdC40LVcbiAgICAgICAgICBzZXRGb250cyhwcmV2Rm9udHMgPT4gWy4uLnByZXZGb250cywgLi4udHJ1bHlOZXdGb250c10pO1xuXG4gICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC90L7QstGL0LUg0YjRgNC40YTRgtGLINCyIEluZGV4ZWREQlxuICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRydWx5TmV3Rm9udHMubWFwKGZvbnRUb1NhdmUgPT4gc2F2ZUZvbnQoZm9udFRvU2F2ZSkpKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0ZvbnRMb2FkZXIvREJdICR7dHJ1bHlOZXdGb250cy5sZW5ndGh9INC70L7QutCw0LvRjNC90YvRhSDRiNGA0LjRhNGC0L7QsiDRgdC+0YXRgNCw0L3QtdC90L4uYCk7XG4gICAgICAgICAgdG9hc3Quc3VjY2Vzcyhg0KPRgdC/0LXRiNC90L4g0LfQsNCz0YDRg9C20LXQvdC+INC4INGB0L7RhdGA0LDQvdC10L3QviDQvdC+0LLRi9GFINC70L7QutCw0LvRjNC90YvRhSDRiNGA0LjRhNGC0L7QsjogJHt0cnVseU5ld0ZvbnRzLmxlbmd0aH1gKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyDQktGL0LHQuNGA0LDQtdC8INC/0LXRgNCy0YvQuSDQuNC3ICrRgtC+0LvRjNC60L4g0YfRgtC+INC00L7QsdCw0LLQu9C10L3QvdGL0YUqXG4gICAgICAgICAgaWYgKHR5cGVvZiBzYWZlU2VsZWN0Rm9udCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2FmZVNlbGVjdEZvbnQodHJ1bHlOZXdGb250c1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgIHRvYXN0LmluZm8oXCLQl9Cw0LPRgNGD0LbQtdC90L3Ri9C1INC70L7QutCw0LvRjNC90YvQtSDRiNGA0LjRhNGC0Ysg0YPQttC1INCx0YvQu9C4INC00L7QsdCw0LLQu9C10L3RiyDRgNCw0L3QtdC1LlwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9hc3Qud2FybmluZygn0J3QtSDRg9C00LDQu9C+0YHRjCDQvtCx0YDQsNCx0L7RgtCw0YLRjCDQvdC4INC+0LTQvdC+0LPQviDQuNC3INC30LDQs9GA0YPQttC10L3QvdGL0YUg0LvQvtC60LDQu9GM0L3Ri9GFINGE0LDQudC70L7Qsi4nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdG9hc3QuZXJyb3IoYNCe0YjQuNCx0LrQsCDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDQu9C+0LrQsNC70YzQvdGL0YUg0YjRgNC40YTRgtC+0LI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tGb250TG9hZGVyXSDQntGI0LjQsdC60LAg0LIgaGFuZGxlTG9jYWxGb250c1VwbG9hZDonLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7IC8vINCj0LHQuNGA0LDQtdC8INC40L3QtNC40LrQsNGC0L7RgCDQt9Cw0LPRgNGD0LfQutC4XG4gICAgfVxuICB9LCBbc2V0Rm9udHMsIHNldElzTG9hZGluZywgc2FmZVNlbGVjdEZvbnQsIHByb2Nlc3NMb2NhbEZvbnQsIHNhdmVGb250LCBjdXJyZW50Rm9udHNdKTsgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC30LDQstC40YHQuNC80L7RgdGC0LhcblxuICAvLyDQktGL0LHQuNGA0LDQtdGCINC40LvQuCDQt9Cw0LPRgNGD0LbQsNC10YIg0YjRgNC40YTRgiBGb250c291cmNlXG4gIC8vICjQn9C10YDQtdC40LzQtdC90L7QstCw0L3QsCDQuNC3IHNlbGVjdE9yQWRkRm9udHNvdXJjZUZvbnQpXG4gIGNvbnN0IGxvYWRBbmRTZWxlY3RGb250c291cmNlRm9udCA9IHVzZUNhbGxiYWNrKGFzeW5jIChmb250RmFtaWx5TmFtZSwgZm9yY2VWYXJpYWJsZUZvbnQgPSBmYWxzZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0YHRg9GJ0LXRgdGC0LLRg9GO0YnQuNC1INGI0YDQuNGE0YLRiyAo0L/QtdGA0LXQtNCw0L3QvdGL0LUg0LrQsNC6IGN1cnJlbnRGb250cylcbiAgICAgIGNvbnN0IGV4aXN0aW5nRm9udCA9IGN1cnJlbnRGb250cy5maW5kKGZvbnQgPT4ge1xuICAgICAgICBjb25zdCBuYW1lTWF0Y2ggPSBmb250Lm5hbWUgPT09IGZvbnRGYW1pbHlOYW1lO1xuICAgICAgICBjb25zdCB2YXJpYWJsZU1hdGNoID0gZm9udC5pc1ZhcmlhYmxlRm9udCA9PT0gZm9yY2VWYXJpYWJsZUZvbnQ7XG4gICAgICAgIC8vINCU0LvRjyDQstCw0YDQuNCw0YLQuNCy0L3Ri9GFINGC0LDQutC20LUg0L/RgNC+0LLQtdGA0Y/QtdC8IGRpc3BsYXlOYW1lLCDRh9GC0L7QsdGLINC+0YLQu9C40YfQuNGC0Ywg0L7RgiDRgdGC0LDRgtC40YfQtdGB0LrQvtC5INCy0LXRgNGB0LjQuCDRgSDRgtC10Lwg0LbQtSBmYW1pbHlOYW1lXG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lTWF0Y2ggPSBmb3JjZVZhcmlhYmxlRm9udCA/IGZvbnQuZGlzcGxheU5hbWU/LmluY2x1ZGVzKCdWYXJpYWJsZScpIDogIWZvbnQuZGlzcGxheU5hbWU/LmluY2x1ZGVzKCdWYXJpYWJsZScpO1xuICAgICAgICByZXR1cm4gbmFtZU1hdGNoICYmIHZhcmlhYmxlTWF0Y2ggJiYgZGlzcGxheU5hbWVNYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXhpc3RpbmdGb250KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2FmZVNlbGVjdEZvbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzYWZlU2VsZWN0Rm9udChleGlzdGluZ0ZvbnQpO1xuICAgICAgICAgIHRvYXN0LmluZm8oYNCo0YDQuNGE0YIgJHtleGlzdGluZ0ZvbnQuZGlzcGxheU5hbWV9INGD0LbQtSDQt9Cw0LPRgNGD0LbQtdC9LmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgY29uc3QgZm9udE9iaiA9IGF3YWl0IGxvYWRBbGxGb250c291cmNlU3R5bGVzKGZvbnRGYW1pbHlOYW1lLCBmb3JjZVZhcmlhYmxlRm9udCk7XG5cbiAgICAgIGlmIChmb250T2JqKSB7XG4gICAgICAgIGF3YWl0IHNhdmVGb250KGZvbnRPYmopOyAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LIgREJcbiAgICAgICAgc2V0Rm9udHMocHJldkZvbnRzID0+IFsuLi5wcmV2Rm9udHMsIGZvbnRPYmpdKTsgLy8g0JTQvtCx0LDQstC70Y/QtdC8INCyINGB0L7RgdGC0L7Rj9C90LjQtVxuICAgICAgICBpZiAodHlwZW9mIHNhZmVTZWxlY3RGb250ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgc2FmZVNlbGVjdEZvbnQoZm9udE9iaik7IC8vINCS0YvQsdC40YDQsNC10Lwg0L3QvtCy0YvQuSDRiNGA0LjRhNGCXG4gICAgICAgIH1cbiAgICAgICAgdG9hc3Quc3VjY2Vzcyhg0KjRgNC40YTRgiAke2ZvbnRPYmouZGlzcGxheU5hbWV9INGD0YHQv9C10YjQvdC+INC30LDQs9GA0YPQttC10L0g0Lgg0LTQvtCx0LDQstC70LXQvWApO1xuICAgICAgfVxuICAgICAgLy8g0J7RiNC40LHQutCwINGD0LbQtSDQvtCx0YDQsNCx0L7RgtCw0L3QsCDQuCDQv9C+0LrQsNC30LDQvdCwINCyIGxvYWRBbGxGb250c291cmNlU3R5bGVzXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vINCe0YjQuNCx0LrQsCDRg9C20LUg0LfQsNC70L7Qs9C40YDQvtCy0LDQvdCwINC4INC/0L7QutCw0LfQsNC90LAg0LIgbG9hZEFsbEZvbnRzb3VyY2VTdHlsZXNcbiAgICAgIC8vIHRvYXN0LmVycm9yKGDQndC1INGD0LTQsNC70L7RgdGMINC30LDQs9GA0YPQt9C40YLRjCDRiNGA0LjRhNGCICR7Zm9udEZhbWlseU5hbWV9YCk7IC8vINCc0L7QttC90L4g0LTQvtCx0LDQstC40YLRjCDQvtCx0YnQtdC1INGB0L7QvtCx0YnQtdC90LjQtVxuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2N1cnJlbnRGb250cywgc2V0SXNMb2FkaW5nLCBzZXRGb250cywgc2FmZVNlbGVjdEZvbnQsIGxvYWRBbGxGb250c291cmNlU3R5bGVzLCBzYXZlRm9udF0pOyAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LfQsNCy0LjRgdC40LzQvtGB0YLQuFxuXG4gIHJldHVybiB7XG4gICAgaGFuZGxlTG9jYWxGb250c1VwbG9hZCxcbiAgICBsb2FkQW5kU2VsZWN0Rm9udHNvdXJjZUZvbnQsXG4gICAgbG9hZEZvbnRzb3VyY2VTdHlsZVZhcmlhbnQ6IGxvYWRGb250U3R5bGVWYXJpYW50LCAvLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10Lwg0LTQu9GPIHVzZUZvbnRTdHlsZU1hbmFnZXJcbiAgICAvLyBsb2FkQWxsRm9udHNvdXJjZVN0eWxlcyAvLyDQndC1INGN0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCwg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINCy0L3Rg9GC0YDQuCBsb2FkQW5kU2VsZWN0Rm9udHNvdXJjZUZvbnRcbiAgfTtcbn0gIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidG9hc3QiLCJmaW5kU3R5bGVJbmZvQnlXZWlnaHRBbmRTdHlsZSIsImdldEZvcm1hdEZyb21FeHRlbnNpb24iLCJQUkVTRVRfU1RZTEVTIiwicHJvY2Vzc0xvY2FsRm9udCIsInNhdmVGb250IiwiYmFzZTY0VG9BcnJheUJ1ZmZlciIsImZvbnRGYWNlQ2FjaGUiLCJNYXAiLCJjcmVhdGVDYWNoZUtleSIsImZvbnRGYW1pbHkiLCJ3ZWlnaHQiLCJzdHlsZSIsInVzZUZvbnRMb2FkZXIiLCJzZXRGb250cyIsInNldElzTG9hZGluZyIsInNhZmVTZWxlY3RGb250IiwiY3VycmVudEZvbnRzIiwibG9hZEZvbnRTdHlsZVZhcmlhbnQiLCJmb250T2JqIiwicmV0dXJuQmxvYiIsImlzVmFyaWFibGVGb250IiwidW5kZWZpbmVkIiwiY2FjaGVLZXkiLCJoYXMiLCJjb25zb2xlIiwibG9nIiwiY2FjaGVkRGF0YSIsImdldCIsImxvYWRlZFN0eWxlcyIsInNvbWUiLCJzIiwicHVzaCIsImNhY2hlZCIsImJsb2IiLCJmb250RGF0YVVybCIsImZvbnRGYW1pbHlOYW1lIiwiYXBpVXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJjb250ZW50VHlwZSIsImhlYWRlcnMiLCJpbmNsdWRlcyIsInJlc3BvbnNlVGV4dCIsInRleHQiLCJzdWJzdHJpbmciLCJmb250QnVmZmVyQmFzZTY0IiwiZmlsZU5hbWUiLCJKU09OIiwicGFyc2UiLCJmb250QnVmZmVyIiwibWltZVR5cGUiLCJCbG9iIiwidHlwZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImZvbnRGYWNlUnVsZSIsInN0eWxlRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwic2V0IiwidXJsIiwiZm9udEZhY2UiLCJGb250RmFjZSIsIlN0cmluZyIsImxvYWQiLCJmb250cyIsImFkZCIsImxvYWRFcnJvciIsIndhcm4iLCJyZXZva2VPYmplY3RVUkwiLCJlcnJvciIsImxvYWRBbGxGb250c291cmNlU3R5bGVzIiwiZm9yY2VWYXJpYWJsZUZvbnQiLCJtZXRhQXBpVXJsIiwibWV0YVJlc3BvbnNlIiwibWV0YUNvbnRlbnRUeXBlIiwibWV0YVJlc3BvbnNlVGV4dCIsIm1ldGFkYXRhIiwiYWN0dWFsSXNWYXJpYWJsZUZvbnQiLCJ2YXJpYWJsZSIsImRpc3BsYXlOYW1lIiwiZm9udElkIiwiaWQiLCJuYW1lIiwic291cmNlIiwidmFyaWFibGVBeGVzIiwiYXhlcyIsImF2YWlsYWJsZVN0eWxlcyIsImZpbGUiLCJmb250RmlsZVJlc3BvbnNlIiwiYXJyYXlCdWZmZXIiLCJmaWxlRXh0ZW5zaW9uIiwic3BsaXQiLCJwb3AiLCJ0b0xvd2VyQ2FzZSIsIndlaWdodHNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsIndlaWdodHMiLCJzdHlsZXNBcnJheSIsInN0eWxlcyIsImZsYXRNYXAiLCJtYXAiLCJ3ZWlnaHROdW0iLCJwYXJzZUludCIsInN0eWxlSW5mbyIsInJlZ3VsYXJXZWlnaHQiLCJyZWd1bGFyU3R5bGUiLCJtYWluU3R5bGVCbG9iIiwibWFpblN0eWxlRXJyb3IiLCJzZXRUaW1lb3V0IiwicHJvbWlzZXMiLCJjYXRjaCIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwiZiIsIm1lc3NhZ2UiLCJoYW5kbGVMb2NhbEZvbnRzVXBsb2FkIiwibmV3Rm9udHMiLCJsZW5ndGgiLCJwcm9jZXNzZWRGb250cyIsImFsbCIsImZvbnQiLCJ2YWxpZEZvbnRzIiwiZmlsdGVyIiwiY3VycmVudElkcyIsIlNldCIsIkJvb2xlYW4iLCJ0cnVseU5ld0ZvbnRzIiwicHJldkZvbnRzIiwiZm9udFRvU2F2ZSIsInN1Y2Nlc3MiLCJpbmZvIiwid2FybmluZyIsImxvYWRBbmRTZWxlY3RGb250c291cmNlRm9udCIsImV4aXN0aW5nRm9udCIsImZpbmQiLCJuYW1lTWF0Y2giLCJ2YXJpYWJsZU1hdGNoIiwiZGlzcGxheU5hbWVNYXRjaCIsImxvYWRGb250c291cmNlU3R5bGVWYXJpYW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./hooks/useFontLoader.js\n");

/***/ }),

/***/ "./hooks/useFontManager.js":
/*!*********************************!*\
  !*** ./hooks/useFontManager.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontManager: () => (/* binding */ useFontManager)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/fontUtilsCommon */ \"./utils/fontUtilsCommon.js\");\n/* harmony import */ var _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cssGenerator */ \"./utils/cssGenerator.js\");\n/* harmony import */ var _utils_db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/db */ \"./utils/db.js\");\n/* harmony import */ var _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/localFontProcessor */ \"./utils/localFontProcessor.js\");\n/* harmony import */ var _useFontPersistence__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useFontPersistence */ \"./hooks/useFontPersistence.js\");\n/* harmony import */ var _useFontLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./useFontLoader */ \"./hooks/useFontLoader.js\");\n/* harmony import */ var _useVariableFontControls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useVariableFontControls */ \"./hooks/useVariableFontControls.js\");\n/* harmony import */ var _useFontStyleManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useFontStyleManager */ \"./hooks/useFontStyleManager.js\");\n/* harmony import */ var _useFontCss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useFontCss */ \"./hooks/useFontCss.js\");\n/* harmony import */ var _useFontExport__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./useFontExport */ \"./hooks/useFontExport.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_5__, _useFontPersistence__WEBPACK_IMPORTED_MODULE_6__, _useFontLoader__WEBPACK_IMPORTED_MODULE_7__, _useVariableFontControls__WEBPACK_IMPORTED_MODULE_8__, _useFontCss__WEBPACK_IMPORTED_MODULE_10__, _useFontExport__WEBPACK_IMPORTED_MODULE_11__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_5__, _useFontPersistence__WEBPACK_IMPORTED_MODULE_6__, _useFontLoader__WEBPACK_IMPORTED_MODULE_7__, _useVariableFontControls__WEBPACK_IMPORTED_MODULE_8__, _useFontCss__WEBPACK_IMPORTED_MODULE_10__, _useFontExport__WEBPACK_IMPORTED_MODULE_11__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n// import opentype from 'opentype.js';\n\n\n\n\n // <<< Добавляем импорт revokeObjectURL\n // <<< Импортируем новый хук\n // <<< Импортируем useFontLoader\n\n // <<< Импортируем useFontStyleManager\n // <<< Импортируем useFontCss\n // <<< Импортируем useFontExport\n/**\n * Хук управления шрифтами в приложении\n * \n * Этот хук централизует всю логику работы со шрифтами, включая:\n * - Загрузку и парсинг шрифтов (локальных и Google Fonts)\n * - Управление вариативными осями шрифтов\n * - Генерацию CSS для шрифтов\n * - Удаление шрифтов и очистку ресурсов\n * - Создание статических версий вариативных шрифтов\n * \n * @example\n * // Использование хука в компоненте\n * const {\n *   fonts, \n *   selectedFont, \n *   handleFontsUploaded, \n *   getFontFamily, \n *   getVariationSettings \n * } = useFontManager();\n * \n * @returns {Object} Объект с состоянием и методами для работы со шрифтами\n */ function useFontManager() {\n    const [fonts, setFonts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedFont, setSelectedFont] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [variableSettings, setVariableSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [exportedFont, setExportedFont] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Референс для отслеживания последнего проанализированного шрифта\n    const loadedFontId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // <<< Флаг для отслеживания начальной загрузки >>>\n    const [isInitialLoadComplete, setIsInitialLoadComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Создаем ref для safeSelectFont, чтобы использовать в колбэках\n    const safeSelectFontRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // <<< Вызов хука загрузки шрифтов (обновляем коллбэк) >>>\n    const { handleLocalFontsUpload, loadAndSelectFontsourceFont, loadFontsourceStyleVariant } = (0,_useFontLoader__WEBPACK_IMPORTED_MODULE_7__.useFontLoader)(setFonts, setIsLoading, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font)=>safeSelectFontRef.current?.(font), []), fonts);\n    // Создаем ref для saveFontSettings, чтобы использовать в колбэке до его объявления\n    const saveFontSettingsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Создаем ref для saveLastVariableSettings, чтобы использовать до его объявления\n    const saveLastVariableSettingsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // <<< Вызов хука управления вариативными шрифтами >>>\n    const { applyVariableSettings, getDefaultAxisValues, resetVariableSettings, getVariableAxesInfo } = (0,_useVariableFontControls__WEBPACK_IMPORTED_MODULE_8__.useVariableFontControls)(selectedFont, variableSettings, setVariableSettings, setSelectedFont, setFonts, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__.debouncedUpdateVariableFontSettings, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((settings)=>{\n        console.log(\"[FontManager] Callback вызван для сохранения настроек:\", settings, \"ref доступен:\", !!saveLastVariableSettingsRef.current);\n        return saveLastVariableSettingsRef.current?.(settings);\n    }, []) // Передаем ref через callback\n    );\n    // Колбэк для сохранения настроек пресета в IndexedDB\n    const handlePresetApplied = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((fontId, settings)=>{\n        if (saveFontSettingsRef.current) {\n            saveFontSettingsRef.current(fontId, settings);\n        }\n    }, []);\n    // <<< Вызов хука управления стилями >>>\n    const { applyPresetStyle// Получаем функцию из нового хука\n     } = (0,_useFontStyleManager__WEBPACK_IMPORTED_MODULE_9__.useFontStyleManager)(selectedFont, setSelectedFont, setFonts, variableSettings, applyVariableSettings, loadFontsourceStyleVariant, handlePresetApplied // Передаем колбэк для сохранения в IndexedDB\n    );\n    // <<< Вызов хука персистентности (ПОСЛЕ объявления applyVariableSettings и applyPresetStyle) >>>\n    const { saveSelectedFontId, saveLastVariableSettings, saveLastPresetName, clearFontLocalStorage, resetPersistence, saveFontSettings } = (0,_useFontPersistence__WEBPACK_IMPORTED_MODULE_6__.useFontPersistence)(setFonts, setIsLoading, setIsInitialLoadComplete, setSelectedFont, applyVariableSettings, applyPresetStyle, fonts, selectedFont);\n    // Устанавливаем saveFontSettings в ref для использования в handlePresetApplied\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        saveFontSettingsRef.current = saveFontSettings;\n    }, [\n        saveFontSettings\n    ]);\n    // Устанавливаем saveLastVariableSettings в ref для использования в useVariableFontControls\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        console.log(\"[FontManager] Обновляем saveLastVariableSettingsRef:\", typeof saveLastVariableSettings);\n        saveLastVariableSettingsRef.current = saveLastVariableSettings;\n    }, [\n        saveLastVariableSettings\n    ]);\n    // <<< Производные состояния >>>\n    const isSelectedFontVariable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectedFont?.isVariableFont || false, [\n        selectedFont\n    ]);\n    // <<< Вызов хука управления CSS >>>\n    const { getFontFamily, getVariationSettings, generateCSS, loadFontFace, updateVariableFontCss, debouncedUpdateVariableFontCss, exportToCSS: exportToCSSFromHook, fontCssProperties } = (0,_useFontCss__WEBPACK_IMPORTED_MODULE_10__.useFontCss)(selectedFont, variableSettings, isSelectedFontVariable);\n    // <<< Вызов хука экспорта >>>\n    const { downloadFile, exportToCSS: exportToCSSFromExportHook, createStaticFont: createStaticFontFromExportHook, generateStaticFontFile, downloadStaticFont } = (0,_useFontExport__WEBPACK_IMPORTED_MODULE_11__.useFontExport)(exportToCSSFromHook);\n    /**\n   * Безопасно выбирает шрифт и применяет к нему базовые настройки\n   * @param {Object} font - Объект шрифта для выбора\n   */ const safeSelectFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((font)=>{\n        if (!font) {\n            console.warn(\"[safeSelectFont] Попытка выбрать null/undefined шрифт\");\n            return;\n        }\n        console.log(`[safeSelectFont] Выбираем шрифт: ${font.name || font.displayName}`);\n        // Устанавливаем выбранный шрифт\n        setSelectedFont(font);\n        // Проверяем, есть ли сохраненные настройки для этого шрифта\n        let settingsApplied = false;\n        // Приоритет 1: Сохраненные настройки осей для вариативного шрифта\n        if (font.isVariableFont && font.lastUsedVariableSettings) {\n            console.log(\"[safeSelectFont] Восстанавливаем сохраненные оси:\", font.lastUsedVariableSettings);\n            setVariableSettings(font.lastUsedVariableSettings);\n            // Применяем настройки через setTimeout для корректной работы\n            setTimeout(()=>{\n                if (applyVariableSettings) {\n                    applyVariableSettings(font.lastUsedVariableSettings, true, font);\n                }\n            }, 0);\n            settingsApplied = true;\n        } else if (font.lastUsedPresetName && applyPresetStyle) {\n            console.log(\"[safeSelectFont] Восстанавливаем сохраненный пресет:\", font.lastUsedPresetName);\n            // Убираем setTimeout - выполняем синхронно, чтобы currentWeight/currentStyle обновились\n            applyPresetStyle(font.lastUsedPresetName, font);\n            settingsApplied = true;\n        }\n        // Если настройки не были восстановлены, применяем дефолтные\n        if (!settingsApplied) {\n            if (font.isVariableFont && font.variableAxes) {\n                // Получаем дефолтные значения из хука\n                const defaultAxes = getDefaultAxisValues?.(font) || {};\n                console.log(\"[safeSelectFont] Применяем дефолтные оси для вариативного шрифта:\", defaultAxes);\n                setVariableSettings(defaultAxes);\n            } else {\n                // Для статических шрифтов очищаем настройки осей\n                setVariableSettings({});\n            }\n            // Применяем базовый стиль Regular\n            if (applyPresetStyle) {\n                // Убираем setTimeout - выполняем синхронно\n                applyPresetStyle(\"Regular\", font);\n            }\n        }\n    }, [\n        setSelectedFont,\n        setVariableSettings,\n        getDefaultAxisValues,\n        applyPresetStyle,\n        applyVariableSettings\n    ]);\n    // Сохраняем ссылку на функцию для использования в колбэках\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        safeSelectFontRef.current = safeSelectFont;\n    }, [\n        safeSelectFont\n    ]);\n    // Мемоизированное имя выбранного пресета (нужно определить до useEffect)\n    const selectedPresetName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!selectedFont) return \"Regular\"; // По умолчанию\n        console.log(`[selectedPresetName] Вычисляем для шрифта: ${selectedFont.name}`, {\n            lastUsedPresetName: selectedFont.lastUsedPresetName,\n            currentWeight: selectedFont.currentWeight,\n            currentStyle: selectedFont.currentStyle,\n            isVariableFont: selectedFont.isVariableFont,\n            variableSettings: variableSettings\n        });\n        // Приоритет 1: Для статических шрифтов используем currentWeight/currentStyle\n        if (!selectedFont.isVariableFont) {\n            // Сначала пытаемся определить по текущему весу и стилю\n            if (selectedFont.currentWeight !== undefined && selectedFont.currentStyle !== undefined) {\n                const styleInfo = (0,_utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle)(selectedFont.currentWeight, selectedFont.currentStyle);\n                const presetName = styleInfo?.name || \"Regular\";\n                console.log(`[selectedPresetName] Статический шрифт по текущему весу/стилю: ${presetName} (${selectedFont.currentWeight}, ${selectedFont.currentStyle})`);\n                return presetName;\n            }\n            // Если currentWeight/currentStyle не установлены, используем сохраненный пресет\n            if (selectedFont.lastUsedPresetName) {\n                console.log(`[selectedPresetName] Статический шрифт с сохраненным пресетом: ${selectedFont.lastUsedPresetName}`);\n                return selectedFont.lastUsedPresetName;\n            }\n            // По умолчанию\n            console.log(`[selectedPresetName] Статический шрифт по умолчанию: Regular`);\n            return \"Regular\";\n        }\n        // Приоритет 2: Для вариативных шрифтов с настройками осей, определяем пресет по осям\n        if (selectedFont.isVariableFont && variableSettings && Object.keys(variableSettings).length > 0) {\n            // Пытаемся найти пресет, который соответствует текущим настройкам осей\n            const currentWeight = variableSettings.wght || 400;\n            const currentStyle = variableSettings.ital === 1 || variableSettings.slnt && variableSettings.slnt < 0 ? \"italic\" : \"normal\";\n            const matchedPreset = (0,_utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle)(currentWeight, currentStyle);\n            if (matchedPreset) {\n                console.log(`[selectedPresetName] Вариативный шрифт по осям: ${matchedPreset.name}`);\n                return matchedPreset.name;\n            }\n        }\n        // Приоритет 3: Если есть сохраненный пресет, используем его\n        if (selectedFont.lastUsedPresetName) {\n            console.log(`[selectedPresetName] Сохраненный пресет: ${selectedFont.lastUsedPresetName}`);\n            return selectedFont.lastUsedPresetName;\n        }\n        // Приоритет 4: По умолчанию Regular\n        console.log(`[selectedPresetName] По умолчанию: Regular`);\n        return \"Regular\";\n    }, [\n        selectedFont,\n        variableSettings\n    ]);\n    // <<< Сохранение настроек при переключении шрифтов >>>\n    const previousSelectedFontRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const previousVariableSettingsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const previousPresetNameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"Regular\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Если есть предыдущий шрифт и он отличается от текущего\n        if (previousSelectedFontRef.current && previousSelectedFontRef.current.id !== selectedFont?.id) {\n            const prevFont = previousSelectedFontRef.current;\n            const prevVariableSettings = previousVariableSettingsRef.current;\n            const prevPresetName = previousPresetNameRef.current;\n            console.log(`[FontSwitch] Сохраняем настройки для предыдущего шрифта: ${prevFont.name}`);\n            // Сохраняем настройки предыдущего шрифта в его объект (для сессии)\n            const updatedFonts = fonts.map((font)=>{\n                if (font.id === prevFont.id) {\n                    const updatedFont = {\n                        ...font\n                    };\n                    let dbUpdates = {}; // Объект для обновления в IndexedDB\n                    // Сохраняем настройки в зависимости от типа ПРЕДЫДУЩЕГО шрифта\n                    if (prevFont.isVariableFont && Object.keys(prevVariableSettings).length > 0) {\n                        updatedFont.lastUsedVariableSettings = {\n                            ...prevVariableSettings\n                        };\n                        updatedFont.lastUsedPresetName = null; // Очищаем пресет, если есть оси\n                        dbUpdates.lastUsedVariableSettings = {\n                            ...prevVariableSettings\n                        };\n                        dbUpdates.lastUsedPresetName = null;\n                        console.log(`[FontSwitch] Сохранены оси для ${prevFont.name}:`, updatedFont.lastUsedVariableSettings);\n                    } else if (prevPresetName && prevPresetName !== \"Regular\") {\n                        updatedFont.lastUsedPresetName = prevPresetName;\n                        updatedFont.lastUsedVariableSettings = null; // Очищаем оси, если есть пресет\n                        dbUpdates.lastUsedPresetName = prevPresetName;\n                        dbUpdates.lastUsedVariableSettings = null;\n                        console.log(`[FontSwitch] Сохранен пресет для ${prevFont.name}:`, updatedFont.lastUsedPresetName);\n                    }\n                    // Сохраняем currentWeight и currentStyle если они есть\n                    if (prevFont.currentWeight !== undefined && prevFont.currentStyle !== undefined) {\n                        updatedFont.currentWeight = prevFont.currentWeight;\n                        updatedFont.currentStyle = prevFont.currentStyle;\n                        dbUpdates.currentWeight = prevFont.currentWeight;\n                        dbUpdates.currentStyle = prevFont.currentStyle;\n                    }\n                    // Сохраняем в IndexedDB если есть что сохранять\n                    if (Object.keys(dbUpdates).length > 0) {\n                        saveFontSettings(prevFont.id, dbUpdates);\n                    }\n                    return updatedFont;\n                }\n                return font;\n            });\n            setFonts(updatedFonts);\n            // Также сохраняем в localStorage (глобальные настройки)\n            if (prevFont.isVariableFont && Object.keys(prevVariableSettings).length > 0) {\n                saveLastVariableSettings(prevVariableSettings);\n            } else if (prevPresetName && prevPresetName !== \"Regular\") {\n                saveLastPresetName(prevPresetName);\n            }\n        }\n        // Обновляем ссылки на текущие настройки для следующего переключения\n        previousSelectedFontRef.current = selectedFont;\n        previousVariableSettingsRef.current = {\n            ...variableSettings\n        };\n        previousPresetNameRef.current = selectedPresetName;\n        // Сохраняем ID выбранного шрифта\n        if (selectedFont?.id) {\n            saveSelectedFontId(selectedFont.id);\n        }\n    }, [\n        selectedFont,\n        fonts,\n        setFonts,\n        saveSelectedFontId,\n        saveLastVariableSettings,\n        saveLastPresetName,\n        saveFontSettings,\n        variableSettings,\n        selectedPresetName\n    ]);\n    // Убираем старый код loadInitialState, так как теперь useFontPersistence работает напрямую\n    // Мемоизированные доступные стили и имя выбранного пресета\n    const availableStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!selectedFont) return [];\n        console.log(\"[useMemo availableStyles] selectedFont:\", selectedFont?.name, \"selectedFont.availableStyles:\", selectedFont?.availableStyles);\n        // Удаляем специальную логику для Google Fonts\n        /*\n      if (selectedFont.source === 'google') {\n        // Для Google шрифтов берем стили из карты или дефолтные\n        const styles = GOOGLE_FONT_STYLES_MAP[selectedFont.name] || [\n            PRESET_STYLES.find(p => p.name === 'Regular'),\n            PRESET_STYLES.find(p => p.name === 'Bold')\n        ].filter(Boolean);\n        return styles;\n      } else */ // Если шрифт вариативный, возвращаем все пресеты (для UI выбора)\n        if (selectedFont.isVariableFont) {\n            return _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.PRESET_STYLES;\n        // Если у шрифта есть поле availableStyles (из Fontsource или локального парсинга)\n        } else if (selectedFont.availableStyles && Array.isArray(selectedFont.availableStyles)) {\n            // Убедимся, что стили имеют нужный формат {name, weight, style}\n            // Если формат уже правильный, просто возвращаем\n            if (selectedFont.availableStyles.every((s)=>s.name && s.weight && s.style)) {\n                return selectedFont.availableStyles;\n            }\n            // Если формат другой (например, из Fontsource metadata), нужно будет его преобразовать\n            // Пока просто возвращаем пустой массив или базовые, если преобразование не реализовано\n            // TODO: Добавить преобразование из формата Fontsource metadata, если он отличается\n            console.warn(\"Формат availableStyles отличается от ожидаемого, требуется преобразование.\");\n            return [\n                _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.PRESET_STYLES.find((p)=>p.name === \"Regular\"),\n                _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.PRESET_STYLES.find((p)=>p.name === \"Bold\")\n            ].filter(Boolean);\n        // Иначе возвращаем базовые стили\n        } else {\n            return [\n                _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.PRESET_STYLES.find((p)=>p.name === \"Regular\"),\n                _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.PRESET_STYLES.find((p)=>p.name === \"Bold\")\n            ].filter(Boolean);\n        }\n    }, [\n        selectedFont\n    ]);\n    // Мемоизированный флаг вариативного шрифта (перенесено в useFontCss)\n    // Мемоизированное имя шрифта\n    const selectedFontName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return selectedFont ? selectedFont.name : \"\";\n    }, [\n        selectedFont\n    ]);\n    // Мемоизированные оси шрифта\n    const selectedFontAxes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return selectedFont && selectedFont.variableAxes ? selectedFont.variableAxes : {};\n    }, [\n        selectedFont\n    ]);\n    /**\n   * Создает статическую версию вариативного шрифта с текущими настройками осей\n   * \n   * @example\n   * // Создание статической версии текущего шрифта\n   * const staticFont = createStaticFont();\n   * console.log(staticFont.name); // Имя статического шрифта\n   * \n   * @returns {Object|undefined} Объект статического шрифта или undefined, если нет выбранного шрифта\n   */ const createStaticFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return createStaticFontFromExportHook(selectedFont, selectedFontName, variableSettings, setExportedFont);\n    }, [\n        createStaticFontFromExportHook,\n        selectedFont,\n        selectedFontName,\n        variableSettings,\n        setExportedFont\n    ]);\n    /**\n   * Обрабатывает загруженные шрифты: анализирует файлы, определяет характеристики и\n   * добавляет шрифты в состояние приложения\n   * \n   * @example\n   * // Обработка шрифтов из input[type=\"file\"]\n   * const handleFileUpload = (e) => {\n   *   const files = Array.from(e.target.files).map(file => ({\n   *     file,\n   *     name: file.name,\n   *     url: URL.createObjectURL(file)\n   *   }));\n   *   handleFontsUploaded(files);\n   * };\n   * \n   * @param {Array} newFonts - Массив объектов с информацией о новых шрифтах\n   * @returns {Promise<void>}\n   */ const handleFontsUploaded = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (newFonts)=>{\n        console.log(\"[handleFontsUploaded] Получены шрифты:\", newFonts);\n        // Используем функцию из useFontLoader\n        const result = await handleLocalFontsUpload(newFonts);\n        console.log(\"[handleFontsUploaded] handleLocalFontsUpload завершен\");\n        return result;\n    }, [\n        handleLocalFontsUpload\n    ]);\n    /**\n   * Удаляет шрифт и освобождает ресурсы\n   * Если удаляется текущий выбранный шрифт, выбирает следующий доступный\n   * \n   * @example\n   * // Кнопка удаления шрифта\n   * <button onClick={() => removeFont(font.id)}>\n   *   Удалить\n   * </button>\n   * \n   * @param {string} fontId - ID шрифта для удаления\n   */ const removeFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((fontId)=>{\n        let removedFontFamily = null;\n        setFonts((prev)=>{\n            const fontToRemove = prev.find((f)=>f.id === fontId);\n            if (fontToRemove) {\n                removedFontFamily = fontToRemove.fontFamily; // Сохраняем имя для очистки\n                if (fontToRemove.url) {\n                    // Освобождаем URL для предотвращения утечек памяти\n                    (0,_utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_5__.revokeObjectURL)(fontToRemove.url);\n                }\n                // <<< Удаляем из IndexedDB >>>\n                (0,_utils_db__WEBPACK_IMPORTED_MODULE_4__.deleteFontDB)(fontId).catch((err)=>{\n                    console.error(`[DB] Ошибка удаления шрифта ${fontId} из DB:`, err);\n                    react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Ошибка удаления шрифта из базы данных.\");\n                // Что делать в этом случае? Возможно, ничего, шрифт останется в DB.\n                });\n            }\n            const updatedFonts = prev.filter((f)=>f.id !== fontId);\n            // Если удаляем текущий выбранный шрифт, выбираем следующий доступный\n            if (selectedFont && selectedFont.id === fontId) {\n                if (updatedFonts.length > 0) {\n                    // Сохраняем ссылку на новый шрифт для дальнейшего применения стиля\n                    const newFont = updatedFonts[0];\n                    // Устанавливаем новый шрифт\n                    setSelectedFont(newFont);\n                    // После установки нового шрифта, настраиваем его со стилем Regular\n                    setTimeout(()=>{\n                        // Устанавливаем стиль Regular для нового шрифта\n                        const presetName = \"Regular\";\n                        safeSelectFontRef.current?.(newFont);\n                    }, 0);\n                } else {\n                    setSelectedFont(null);\n                }\n            }\n            return updatedFonts;\n        });\n        react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Шрифт удален\");\n    // Очистка FontFace из document.fonts (необязательно, но хорошо для гигиены)\n    // if (removedFontFamily && document.fonts) {\n    //    document.fonts.delete(removedFontFamily);\n    // }\n    }, [\n        selectedFont,\n        _utils_db__WEBPACK_IMPORTED_MODULE_4__.deleteFontDB,\n        setFonts,\n        setSelectedFont\n    ]);\n    // Обертки для совместимости с предыдущим API\n    const exportToCSS = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((download = false)=>{\n        return exportToCSSFromExportHook(selectedFont, selectedFontName, download);\n    }, [\n        exportToCSSFromExportHook,\n        selectedFont,\n        selectedFontName\n    ]);\n    /**\n   * Выбирает (или загружает, если ещё не загружен) шрифт Fontsource\n   * @param {string} fontFamilyName - Название семейства шрифтов\n   * @param {boolean} forceVariableFont - Загружать вариативный шрифт (если доступен)\n   */ const selectOrAddFontsourceFont = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fontFamilyName, forceVariableFont = false)=>{\n        // Просто перенаправляем на функцию из useFontLoader\n        return loadAndSelectFontsourceFont(fontFamilyName, forceVariableFont);\n    }, [\n        loadAndSelectFontsourceFont\n    ]);\n    // <<< Функция полного сброса >>>\n    const resetApplicationState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        console.log(\"[Reset] Запуск полного сброса состояния приложения...\");\n        try {\n            // 1. Очищаем хранилища (IndexedDB и localStorage) через новый хук\n            await resetPersistence(); // <<< Вызываем сброс персистентности\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Локальное хранилище данных очищено.\"); // Обновляем сообщение\n            // 2. Очищаем состояния хука (остается как было)\n            setFonts([]);\n            setSelectedFont(null);\n            setVariableSettings({});\n            setExportedFont(null);\n            setIsLoading(false); // Сбрасываем флаг загрузки\n            // isInitialLoadComplete останется true, т.к. начальная загрузка была\n            console.log(\"[Reset] Состояния useFontManager сброшены.\");\n            // 4. Вызываем сброс других контекстов (пока только SettingsContext)\n            // resetSettings(); // Вызов будет в компоненте кнопки\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.success(\"Состояние приложения успешно сброшено!\");\n        } catch (error) {\n            console.error(\"[Reset] Ошибка во время сброса состояния:\", error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Произошла ошибка при сбросе состояния.\");\n        }\n    }, [\n        setFonts,\n        setSelectedFont,\n        setVariableSettings,\n        setExportedFont,\n        setIsLoading,\n        resetPersistence\n    ]); // Добавляем зависимости сеттеров\n    // Убираем старые useEffect, связанные с loadInitialState\n    return {\n        // Состояния\n        fonts,\n        selectedFont,\n        variableSettings,\n        exportedFont,\n        isSelectedFontVariable,\n        selectedFontName,\n        selectedFontAxes,\n        availableStyles,\n        selectedPresetName,\n        isLoading,\n        isInitialLoadComplete,\n        // Методы управления состоянием\n        setFonts,\n        setSelectedFont,\n        setVariableSettings,\n        setExportedFont,\n        // Методы загрузки (из useFontLoader)\n        handleLocalFontsUpload,\n        handleFontsUploaded,\n        loadAndSelectFontsourceFont,\n        selectOrAddFontsourceFont,\n        // Методы управления шрифтами \n        removeFont,\n        safeSelectFont,\n        // <<< Методы работы с вариативными осями из useVariableFontControls >>>\n        getVariableAxesInfo,\n        getVariableAxes: getVariableAxesInfo,\n        applyVariableSettings,\n        handleVariableSettingsChange: applyVariableSettings,\n        resetVariableSettings,\n        getDefaultAxisValues,\n        // Методы для стилей шрифта\n        applyPresetStyle,\n        // Методы для CSS\n        getFontFamily,\n        getVariationSettings,\n        generateCSS,\n        exportToCSS,\n        fontCssProperties,\n        // Методы экспорта и скачивания (из useFontExport)\n        downloadFile,\n        generateStaticFontFile,\n        downloadStaticFont,\n        // Прочие методы\n        createStaticFont,\n        resetApplicationState,\n        // Методы персистентности\n        saveFontSettings\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFontManager.js\n");

/***/ }),

/***/ "./hooks/useFontPersistence.js":
/*!*************************************!*\
  !*** ./hooks/useFontPersistence.js ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontPersistence: () => (/* binding */ useFontPersistence)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _utils_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/db */ \"./utils/db.js\");\n/* harmony import */ var _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cssGenerator */ \"./utils/cssGenerator.js\");\n/* harmony import */ var _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/localFontProcessor */ \"./utils/localFontProcessor.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_4__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_1__, _utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__, _utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n // Нужен для восстановления\n // Для очистки URL\n// Ключи localStorage для настроек шрифта\nconst FONT_SETTINGS_LS_KEYS = {\n    LAST_PRESET_NAME: \"lastPresetName\",\n    LAST_VARIABLE_SETTINGS: \"lastVariableSettings\",\n    SELECTED_FONT_ID: \"selectedFontId\"\n};\n/**\n * Хук для управления постоянством данных шрифтов (IndexedDB, localStorage).\n * @param {Function} setFonts - Функция установки состояния массива шрифтов.\n * @param {Function} setIsLoading - Функция установки состояния загрузки.\n * @param {Function} setIsInitialLoadComplete - Функция установки флага завершения начальной загрузки.\n * @param {Function} setSelectedFont - Функция установки выбранного шрифта.\n * @param {Function} handleVariableSettingsChange - Функция применения настроек вариативности.\n * @param {Function} applyPresetStyle - Функция применения пресета стиля.\n * @param {Array} fonts - Текущий массив шрифтов (для поиска при восстановлении).\n * @param {Object|null} selectedFont - Текущий выбранный шрифт (для предотвращения повторного восстановления).\n */ function useFontPersistence(setFonts, setIsLoading, setIsInitialLoadComplete, setSelectedFont, handleVariableSettingsChange, applyPresetStyle, fonts, selectedFont // Передаем selectedFont\n) {\n    // --- Начальная загрузка из IndexedDB --- \n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        const loadInitialFonts = async ()=>{\n            console.log(\"[DB] Загрузка начальных шрифтов...\");\n            setIsLoading(true);\n            try {\n                const storedFonts = await (0,_utils_db__WEBPACK_IMPORTED_MODULE_2__.getAllFonts)();\n                if (!isMounted) return;\n                if (storedFonts && storedFonts.length > 0) {\n                    console.log(`[DB] Найдено ${storedFonts.length} шрифтов.`);\n                    const processedFonts = await Promise.all(storedFonts.map(async (font)=>{\n                        if (!font?.id || !font.file || !(font.file instanceof Blob)) {\n                            console.warn(\"[DB] Пропущен некорректный объект:\", font);\n                            return null;\n                        }\n                        try {\n                            font.url = URL.createObjectURL(font.file);\n                            const fontFamilyToLoad = font.fontFamily || `font-${font.id}`; // Генерируем имя, если нет\n                            font.fontFamily = fontFamilyToLoad;\n                            let initialVarSettings = {};\n                            if (font.isVariableFont && font.variableAxes) {\n                                initialVarSettings = Object.entries(font.variableAxes).reduce((acc, [tag, axis])=>{\n                                    if (axis && typeof axis === \"object\" && axis.default !== undefined) acc[tag] = axis.default;\n                                    return acc;\n                                }, {});\n                            }\n                            await (0,_utils_cssGenerator__WEBPACK_IMPORTED_MODULE_3__.loadFontFaceIfNeeded)(fontFamilyToLoad, font.url, initialVarSettings);\n                            // Добавляем недостающие поля сессии, если их нет\n                            return {\n                                ...font,\n                                lastUsedPresetName: font.lastUsedPresetName || null,\n                                lastUsedVariableSettings: font.lastUsedVariableSettings || null\n                            };\n                        } catch (loadError) {\n                            console.error(`[DB] Ошибка пересоздания FontFace для ${font.name}:`, loadError);\n                            if (font.url) (0,_utils_localFontProcessor__WEBPACK_IMPORTED_MODULE_4__.revokeObjectURL)(font.url);\n                            return null;\n                        }\n                    }));\n                    const validFonts = processedFonts.filter((f)=>f !== null);\n                    if (isMounted) {\n                        setFonts(validFonts);\n                        console.log(`[DB] ${validFonts.length} шрифтов успешно загружено.`);\n                    }\n                } else {\n                    console.log(\"[DB] В IndexedDB нет шрифтов.\");\n                }\n            } catch (error) {\n                console.error(\"[DB] Ошибка загрузки шрифтов:\", error);\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Ошибка загрузки сохраненных шрифтов.\");\n            } finally{\n                if (isMounted) {\n                    setIsLoading(false);\n                    setIsInitialLoadComplete(true);\n                }\n            }\n        };\n        loadInitialFonts();\n        return ()=>{\n            isMounted = false;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        setFonts,\n        setIsLoading,\n        setIsInitialLoadComplete\n    ]); // Зависимости только сеттеры\n    // --- Восстановление выбранного шрифта и его настроек --- \n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Запускаем только после завершения загрузки из DB и если есть шрифты, но ни один не выбран\n        if (fonts && fonts.length > 0 && !selectedFont) {\n            console.log(\"[Restore] Попытка восстановить выбор и настройки...\");\n            const storedId = localStorage.getItem(FONT_SETTINGS_LS_KEYS.SELECTED_FONT_ID);\n            let fontToSelect = null;\n            if (storedId) {\n                fontToSelect = fonts.find((f)=>f.id === storedId);\n                if (fontToSelect) {\n                    console.log(`[Restore] Найден шрифт по ID: ${fontToSelect.displayName || fontToSelect.name}`);\n                } else {\n                    console.log(`[Restore] Шрифт с ID ${storedId} не найден. Удаляем ID.`);\n                    localStorage.removeItem(FONT_SETTINGS_LS_KEYS.SELECTED_FONT_ID);\n                }\n            }\n            if (!fontToSelect && fonts && fonts.length > 0) {\n                console.log(\"[Restore] Выбираем первый доступный шрифт.\");\n                fontToSelect = fonts[0];\n                localStorage.setItem(FONT_SETTINGS_LS_KEYS.SELECTED_FONT_ID, fontToSelect.id); // Сохраняем ID первого\n            }\n            if (fontToSelect) {\n                setSelectedFont(fontToSelect); // Устанавливаем шрифт\n                // Используем setTimeout для применения настроек после установки шрифта\n                setTimeout(()=>{\n                    console.log(`[Restore] Применение настроек для ${fontToSelect.displayName || fontToSelect.name} через setTimeout`);\n                    const restoredVarSettingsRaw = localStorage.getItem(FONT_SETTINGS_LS_KEYS.LAST_VARIABLE_SETTINGS);\n                    const restoredPresetName = localStorage.getItem(FONT_SETTINGS_LS_KEYS.LAST_PRESET_NAME);\n                    let settingsApplied = false;\n                    // 1. ПРИОРИТЕТ: Глобальные настройки из localStorage (самые свежие)\n                    if (fontToSelect.isVariableFont && restoredVarSettingsRaw) {\n                        try {\n                            const restoredVarSettings = JSON.parse(restoredVarSettingsRaw);\n                            console.log(\"[Restore] Восстанавливаем оси из localStorage (приоритет):\", restoredVarSettings);\n                            if (handleVariableSettingsChange) {\n                                handleVariableSettingsChange(restoredVarSettings, true, fontToSelect);\n                                settingsApplied = true;\n                            }\n                        } catch (e) {\n                            console.error(\"[Restore] Ошибка парсинга осей из localStorage:\", e);\n                            localStorage.removeItem(FONT_SETTINGS_LS_KEYS.LAST_VARIABLE_SETTINGS);\n                        }\n                    } else if (restoredPresetName && applyPresetStyle) {\n                        console.log(`[Restore] Восстанавливаем пресет из localStorage (приоритет): ${restoredPresetName}`);\n                        applyPresetStyle(restoredPresetName, fontToSelect);\n                        settingsApplied = true;\n                    }\n                    // 2. FALLBACK: Настройки конкретного шрифта из IndexedDB (если нет в localStorage)\n                    if (!settingsApplied) {\n                        if (fontToSelect.isVariableFont && fontToSelect.lastUsedVariableSettings && handleVariableSettingsChange) {\n                            console.log(\"[Restore] Восстанавливаем оси из IndexedDB (fallback):\", fontToSelect.lastUsedVariableSettings);\n                            handleVariableSettingsChange(fontToSelect.lastUsedVariableSettings, true, fontToSelect);\n                            settingsApplied = true;\n                        } else if (fontToSelect.lastUsedPresetName && applyPresetStyle) {\n                            console.log(`[Restore] Восстанавливаем пресет из IndexedDB (fallback): ${fontToSelect.lastUsedPresetName}`);\n                            applyPresetStyle(fontToSelect.lastUsedPresetName, fontToSelect);\n                            settingsApplied = true;\n                        }\n                    }\n                    // 3. ПОСЛЕДНИЙ FALLBACK: Если вообще ничего не восстановлено, ставим дефолт\n                    if (!settingsApplied) {\n                        console.log(\"[Restore] Настройки не восстановлены, применяем дефолтный Regular\");\n                        if (applyPresetStyle) {\n                            applyPresetStyle(\"Regular\", fontToSelect);\n                            settingsApplied = true;\n                        }\n                    }\n                }, 0);\n            }\n        }\n    // Добавляем fonts и selectedFont в зависимости, чтобы эффект срабатывал при их изменении\n    }, [\n        fonts,\n        selectedFont,\n        setSelectedFont,\n        applyPresetStyle,\n        handleVariableSettingsChange\n    ]);\n    // --- Функции для управления localStorage --- \n    const saveSelectedFontId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((fontId)=>{\n        if (false) {}\n    }, []);\n    const saveLastVariableSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((settings)=>{\n        console.log(\"[Persistence] saveLastVariableSettings вызвана с настройками:\", settings);\n        if (false) {} else {\n            console.warn(\"[Persistence] window недоступен, сохранение пропущено\");\n        }\n    }, []);\n    const saveLastPresetName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((presetName)=>{\n        if (false) {}\n    }, []);\n    const clearFontLocalStorage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (false) {}\n    }, []);\n    // --- Функция сброса персистентности --- \n    const resetPersistence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            await (0,_utils_db__WEBPACK_IMPORTED_MODULE_2__.deleteAllFontsDB)();\n            clearFontLocalStorage();\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.info(\"Хранилища шрифтов (DB и LS) очищены.\");\n        } catch (error) {\n            console.error(\"[Persistence] Ошибка при сбросе хранилищ:\", error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(\"Ошибка очистки хранилищ шрифтов.\");\n        }\n    }, [\n        clearFontLocalStorage\n    ]);\n    // --- Функция сохранения настроек шрифта в IndexedDB ---\n    const saveFontSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (fontId, settings)=>{\n        if (!fontId || !settings) return;\n        try {\n            await (0,_utils_db__WEBPACK_IMPORTED_MODULE_2__.updateFontSettings)(fontId, settings);\n        } catch (error) {\n            console.error(`[Persistence] Ошибка сохранения настроек шрифта ${fontId}:`, error);\n        }\n    }, []);\n    // Возвращаем функции для управления персистентностью\n    return {\n        saveSelectedFontId,\n        saveLastVariableSettings,\n        saveLastPresetName,\n        clearFontLocalStorage,\n        resetPersistence,\n        saveFontSettings\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFontPersistence.js\n");

/***/ }),

/***/ "./hooks/useFontStyleManager.js":
/*!**************************************!*\
  !*** ./hooks/useFontStyleManager.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFontStyleManager: () => (/* binding */ useFontStyleManager)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/fontUtilsCommon */ \"./utils/fontUtilsCommon.js\");\n\n\n/**\n * Хук для управления стилями шрифтов (пресетами).\n * \n * @param {Object} selectedFont - Текущий выбранный объект шрифта.\n * @param {Function} setSelectedFont - Функция для обновления состояния выбранного шрифта.\n * @param {Function} setFonts - Функция для обновления всего массива шрифтов (для сохранения lastUsedPresetName).\n * @param {Object} variableSettings - Текущие настройки вариативных осей (для чтения перед применением пресета).\n * @param {Function} applyVariableSettings - Функция из useVariableFontControls для применения настроек осей.\n * @param {Function} loadFontsourceStyleVariant - Функция из useFontLoader для потенциальной загрузки статических вариантов Fontsource (пока не используется напрямую в applyPresetStyle).\n * @param {Function} onPresetApplied - Колбэк, вызываемый после применения пресета для сохранения в IndexedDB.\n * @returns {{ applyPresetStyle: Function }} - Объект с функцией применения пресета.\n */ function useFontStyleManager(selectedFont, setSelectedFont, setFonts, variableSettings, applyVariableSettings, loadFontsourceStyleVariant, onPresetApplied) {\n    /**\n   * Применяет предустановленный стиль (пресет) для текущего или указанного шрифта.\n   * (Перенесено из useFontManager)\n   * \n   * @param {string} presetName - Имя пресета (например, 'Regular', 'Bold', 'Italic').\n   * @param {Object|null} font - Шрифт для применения (по умолчанию selectedFont).\n   */ const applyPresetStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (presetName, font = null)=>{\n        const fontToApply = font || selectedFont;\n        if (!fontToApply) return;\n        const presetInfo = _utils_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_1__.PRESET_STYLES.find((p)=>p.name === presetName);\n        if (!presetInfo) {\n            console.warn(`Пресет \"${presetName}\" не найден.`);\n            return;\n        }\n        const { weight, style } = presetInfo;\n        console.log(`[applyPresetStyle] Применяем пресет '${presetName}' (weight: ${weight}, style: ${style}) к шрифту '${fontToApply.name}' (ID: ${fontToApply.id})`);\n        // Внутренняя функция для обновления состояния selectedFont, если необходимо\n        const updateSelectedFontStateIfNeeded = ()=>{\n            // Обновляем selectedFont если:\n            // 1. Применяем стиль к текущему выбранному шрифту\n            // 2. selectedFont еще не установлен, но fontToApply есть (восстановление)\n            // 3. fontToApply - это тот шрифт, который должен стать selectedFont (при переключении)\n            if (selectedFont && fontToApply.id === selectedFont.id || !selectedFont && fontToApply || font && fontToApply.id === font.id) {\n                setSelectedFont((prevSelected)=>{\n                    // Случай 1: prevSelected есть и это тот же шрифт - обновляем его\n                    if (prevSelected && prevSelected.id === fontToApply.id) {\n                        console.log(`[applyPresetStyle] Обновляем состояние selectedFont (${fontToApply.name}) до weight: ${weight}, style: ${style}`);\n                        return {\n                            ...prevSelected,\n                            currentWeight: weight,\n                            currentStyle: style\n                        };\n                    } else if (fontToApply) {\n                        console.log(`[applyPresetStyle] Устанавливаем состояние selectedFont (${fontToApply.name}) до weight: ${weight}, style: ${style}`);\n                        return {\n                            ...fontToApply,\n                            currentWeight: weight,\n                            currentStyle: style\n                        };\n                    }\n                    return prevSelected; // Возвращаем старое состояние в остальных случаях\n                });\n            }\n        };\n        // Логика для невариативных Fontsource шрифтов\n        if (fontToApply.source === \"fontsource\" && !fontToApply.isVariableFont) {\n            // Проверяем, был ли стиль загружен ранее\n            const styleIsLoaded = fontToApply.loadedStyles?.some((s)=>s.weight === weight && s.style === style);\n            if (!styleIsLoaded) {\n                console.log(`[applyPresetStyle] Загружаем стиль ${presetName} для Fontsource ${fontToApply.name}`);\n                // Загружаем нужный стиль\n                if (loadFontsourceStyleVariant) {\n                    try {\n                        loadFontsourceStyleVariant(fontToApply.name, weight, style, fontToApply);\n                    } catch (error) {\n                        console.error(`[applyPresetStyle] Ошибка загрузки стиля ${presetName}:`, error);\n                    }\n                }\n            }\n        } else if (fontToApply.isVariableFont) {\n            const currentAxes = fontToApply.variableAxes || {};\n            // Используем актуальные настройки из variableSettings (переданные в хук)\n            const currentFontSettings = variableSettings;\n            const newSettings = {\n                ...currentFontSettings\n            }; // Копируем текущие настройки\n            let settingsChanged = false;\n            // Обновляем 'wght', если ось существует\n            if (\"wght\" in currentAxes) {\n                // Применяем вес из пресета\n                if (newSettings.wght !== weight) {\n                    newSettings.wght = weight;\n                    settingsChanged = true;\n                }\n            }\n            // Обновляем 'ital' или 'slnt' в зависимости от стиля пресета\n            const targetItal = style === \"italic\" ? 1 : 0;\n            const slantAxis = typeof currentAxes.slnt === \"object\" ? currentAxes.slnt : undefined;\n            // Определяем целевое значение 'slnt'. Если стиль 'italic', используем min оси (или -15), иначе default (или 0)\n            const targetSlnt = style === \"italic\" ? slantAxis?.min ?? -15 : slantAxis?.default ?? 0;\n            if (\"ital\" in currentAxes) {\n                if (newSettings.ital !== targetItal) {\n                    newSettings.ital = targetItal;\n                    settingsChanged = true;\n                    // Если есть 'slnt', удаляем его, т.к. 'ital' имеет приоритет\n                    if (\"slnt\" in newSettings) delete newSettings.slnt;\n                }\n            } else if (\"slnt\" in currentAxes) {\n                if (newSettings.slnt !== targetSlnt) {\n                    newSettings.slnt = targetSlnt;\n                    settingsChanged = true;\n                    // Если есть 'ital', удаляем его (хотя не должно быть по логике выше)\n                    if (\"ital\" in newSettings) delete newSettings.ital;\n                }\n            }\n            // Если настройки осей изменились, вызываем applyVariableSettings\n            if (settingsChanged) {\n                console.log(`[applyPresetStyle] Настройки изменились. Вызываем applyVariableSettings для ${fontToApply.name}:`, newSettings);\n                // Передаем isFinalUpdate = true, и сам объект шрифта fontToApply\n                applyVariableSettings(newSettings, true, fontToApply);\n            } else {\n                console.log(`[applyPresetStyle] Настройки вариативности для пресета '${presetName}' уже применены или не изменились.`);\n            }\n        } else {\n            console.log(`[applyPresetStyle] Применяем стиль ${presetName} к статическому/другому типу шрифта: ${fontToApply.name}`);\n        }\n        // ВАЖНО: Обновляем selectedFont для ВСЕХ типов шрифтов (только один раз в конце)\n        updateSelectedFontStateIfNeeded();\n        // Обновляем lastUsedPresetName в общем массиве шрифтов\n        // Это нужно делать всегда, независимо от того, изменились ли оси\n        setFonts((currentFonts)=>{\n            if (!Array.isArray(currentFonts)) {\n                console.warn(\"[applyPresetStyle] currentFonts не является массивом:\", currentFonts);\n                return currentFonts; // Возвращаем как есть, если не массив\n            }\n            return currentFonts.map((f)=>{\n                if (f.id === fontToApply.id) {\n                    console.log(`[applyPresetStyle] Обновляем lastUsedPresetName для ${f.name} на ${presetName}`);\n                    // Для вариативных шрифтов НЕ сбрасываем lastUsedVariableSettings,\n                    // так как пресет может изменить оси, и мы хотим сохранить эти изменения\n                    if (fontToApply.isVariableFont) {\n                        return {\n                            ...f,\n                            lastUsedPresetName: presetName\n                        };\n                    } else {\n                        // Для статических шрифтов сбрасываем variableSettings и сохраняем пресет\n                        return {\n                            ...f,\n                            lastUsedPresetName: presetName,\n                            lastUsedVariableSettings: null\n                        };\n                    }\n                }\n                return f;\n            });\n        });\n        // Сохраняем настройки в IndexedDB через колбэк\n        if (onPresetApplied) {\n            const settingsToSave = {\n                lastUsedPresetName: presetName,\n                currentWeight: weight,\n                currentStyle: style\n            };\n            // Для статических шрифтов очищаем lastUsedVariableSettings\n            if (!fontToApply.isVariableFont) {\n                settingsToSave.lastUsedVariableSettings = null;\n            }\n            console.log(`[applyPresetStyle] Сохраняем настройки в IndexedDB для ${fontToApply.name}:`, settingsToSave);\n            onPresetApplied(fontToApply.id, settingsToSave);\n        }\n    }, [\n        selectedFont,\n        setSelectedFont,\n        setFonts,\n        variableSettings,\n        applyVariableSettings,\n        loadFontsourceStyleVariant,\n        onPresetApplied\n    ]); // Зависимости useCallback\n    return {\n        applyPresetStyle\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useFontStyleManager.js\n");

/***/ }),

/***/ "./hooks/useVariableFontControls.js":
/*!******************************************!*\
  !*** ./hooks/useVariableFontControls.js ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVariableFontControls: () => (/* binding */ useVariableFontControls)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__]);\nreact_toastify__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// import opentype from 'opentype.js'; // opentype нужен для getVariableAxes, если парсим файл\n// Кэш для хранения метаданных шрифтов (перенесен из useFontManager)\nconst fontMetadataCache = new Map();\n/**\n * Хук для управления настройками вариативных шрифтов.\n * @param {Object} selectedFont - Текущий выбранный объект шрифта.\n * @param {Object} variableSettings - Текущие настройки вариативных осей.\n * @param {Function} setVariableSettings - Функция для обновления состояния настроек осей.\n * @param {Function} setSelectedFont - Функция для обновления состояния выбранного шрифта.\n * @param {Function} setFonts - Функция для обновления всего массива шрифтов (для сохранения lastUsedVariableSettings).\n * @param {Function} debouncedUpdateCssSettings - Debounced функция для обновления CSS (переименована из debouncedUpdateVariableFontSettings).\n * @param {Function} saveLastVariableSettings - Функция для сохранения настроек в localStorage.\n */ function useVariableFontControls(selectedFont, variableSettings, setVariableSettings, setSelectedFont, setFonts, debouncedUpdateCssSettings, saveLastVariableSettings) {\n    // Реф для applyVariableSettings, если он будет вызываться из других функций этого хука\n    const applyVariableSettingsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    /**\n   * Применяет новые настройки к вариативному шрифту.\n   * (Перенесено из useFontManager, переименовано из handleVariableSettingsChange)\n   * @param {Object} newSettings - Новые значения осей.\n   * @param {boolean} isFinalUpdate - Флаг финального обновления (для CSS).\n   * @param {Object|null} font - Шрифт для применения (по умолчанию selectedFont).\n   */ const applyVariableSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newSettings, isFinalUpdate = false, font = null)=>{\n        const fontToApply = font || selectedFont;\n        if (!fontToApply || !fontToApply.isVariableFont) return;\n        const prevSettings = {\n            ...variableSettings\n        }; // Сохраняем предыдущие для CSS\n        let hasChanges = false;\n        Object.keys(newSettings).forEach((tag)=>{\n            if (variableSettings[tag] !== newSettings[tag]) hasChanges = true;\n        });\n        if (!hasChanges && !isFinalUpdate) return; // Выходим если нет изменений И это не финальный апдейт (финальный может быть без изменений)\n        setVariableSettings((currentPrevSettings)=>({\n                ...currentPrevSettings,\n                ...newSettings\n            }));\n        const updatedSettings = {\n            ...variableSettings,\n            ...newSettings\n        };\n        // Обновляем объект selectedFont асинхронно\n        setSelectedFont((prevFont)=>{\n            if (!prevFont || prevFont.id !== fontToApply.id) return prevFont;\n            const variationSettingsStr = Object.entries(updatedSettings).map(([tag, value])=>`\\\"${tag}\\\" ${value}`).join(\", \");\n            const updatedAxes = {\n                ...fontToApply.variableAxes\n            };\n            Object.entries(updatedSettings).forEach(([tag, value])=>{\n                if (updatedAxes[tag]) {\n                    if (typeof updatedAxes[tag] === \"object\") {\n                        updatedAxes[tag] = {\n                            ...updatedAxes[tag],\n                            currentValue: value\n                        };\n                    } else {\n                        updatedAxes[tag] = {\n                            min: value * 0.5,\n                            max: value * 1.5,\n                            default: value,\n                            currentValue: value,\n                            name: tag.charAt(0).toUpperCase() + tag.slice(1)\n                        };\n                    }\n                }\n            });\n            return {\n                ...prevFont,\n                variableAxes: updatedAxes,\n                variationSettings: variationSettingsStr\n            };\n        });\n        // Обновляем CSS (если финальное изменение)\n        if (isFinalUpdate && typeof debouncedUpdateCssSettings === \"function\") {\n            // Передаем сам объект шрифта, актуальные и предыдущие настройки\n            debouncedUpdateCssSettings(fontToApply, updatedSettings, prevSettings);\n        }\n        // Сохраняем настройки в localStorage при финальном обновлении\n        if (isFinalUpdate && typeof saveLastVariableSettings === \"function\") {\n            console.log(`[VarControls] Сохраняем настройки в localStorage:`, updatedSettings);\n            saveLastVariableSettings(updatedSettings);\n        }\n        // Обновляем lastUsedVariableSettings в общем массиве шрифтов\n        setFonts((currentFonts)=>currentFonts.map((f)=>{\n                if (f.id === fontToApply.id) {\n                    console.log(`[VarControls] Обновляем lastUsedVariableSettings для ${f.name}:`, updatedSettings);\n                    return {\n                        ...f,\n                        lastUsedVariableSettings: updatedSettings,\n                        lastUsedPresetName: null\n                    };\n                }\n                return f;\n            }));\n    }, [\n        selectedFont,\n        variableSettings,\n        setVariableSettings,\n        setSelectedFont,\n        setFonts,\n        debouncedUpdateCssSettings,\n        saveLastVariableSettings\n    ]);\n    // Обновляем реф при каждом изменении функции\n    applyVariableSettingsRef.current = applyVariableSettings;\n    /**\n   * Получает дефолтные значения осей для текущего шрифта.\n   * (Перенесено из useFontManager)\n   */ const getDefaultAxisValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!selectedFont || !selectedFont.variableAxes) return {};\n        const defaultSettings = {};\n        Object.entries(selectedFont.variableAxes).forEach(([tag, axisData])=>{\n            if (typeof axisData === \"object\" && axisData.default !== undefined) {\n                defaultSettings[tag] = axisData.default;\n            } else if (typeof axisData === \"number\") {\n                defaultSettings[tag] = axisData; // Если вдруг ось - просто число\n            }\n        });\n        return defaultSettings;\n    }, [\n        selectedFont\n    ]);\n    /**\n   * Сбрасывает настройки осей к дефолтным значениям.\n   * (Перенесено из useFontManager)\n   */ const resetVariableSettings = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const defaultSettings = getDefaultAxisValues();\n        if (Object.keys(defaultSettings).length > 0) {\n            // Используем applyVariableSettings через реф\n            applyVariableSettingsRef.current?.(defaultSettings, true); // isFinalUpdate = true для обновления CSS\n        }\n        return defaultSettings; // Возвращаем на всякий случай\n    }, [\n        getDefaultAxisValues\n    ]);\n    /**\n   * Извлекает информацию о вариативных осях шрифта.\n   * (Перенесено из useFontManager)\n   * TODO: Рассмотреть возможность использования opentype.js здесь или вынести в утилиты.\n   */ const getVariableAxesInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (font)=>{\n        const targetFont = font || selectedFont;\n        if (!targetFont) return [];\n        const fontId = targetFont.id || null;\n        if (targetFont.isVariableFont === false) return [];\n        // 1. Используем существующие данные, если есть\n        if (targetFont.variableAxes && Object.keys(targetFont.variableAxes).length > 0) {\n            const fontAxes = Object.entries(targetFont.variableAxes).map(([tag, axisData])=>({\n                    tag,\n                    name: axisData.name || tag,\n                    min: axisData.min,\n                    max: axisData.max,\n                    default: axisData.default,\n                    // Добавляем текущее значение для UI\n                    current: typeof axisData.currentValue !== \"undefined\" ? axisData.currentValue : axisData.default\n                }));\n            // Фильтрация по supportedAxes (если есть)\n            let filteredAxes = fontAxes;\n            if (targetFont.supportedAxes?.length > 0) {\n                filteredAxes = fontAxes.filter((axis)=>targetFont.supportedAxes.includes(axis.tag));\n                if (filteredAxes.length === 0) filteredAxes = fontAxes; // Показать все, если фильтр ничего не дал\n            }\n            return filteredAxes;\n        }\n        // 2. Используем кэш\n        if (fontId && fontMetadataCache.has(fontId)) {\n            return fontMetadataCache.get(fontId);\n        }\n        // 3. Парсим файл (если есть и если opentype.js доступен)\n        // TODO: Добавить проверку на opentype.js и реализовать парсинг, если нужно\n        /*\n    if (targetFont.file instanceof Blob && typeof opentype !== 'undefined') {\n      try {\n        const fontData = await parseFontFile(targetFont.file); // Нужна функция parseFontFile\n        if (fontData?.tables?.fvar) {\n          const axes = fontData.tables.fvar.axes.map(axis => ({ ... }));\n          if (fontId) fontMetadataCache.set(fontId, axes);\n          return axes;\n        } else {\n          if (fontId) fontMetadataCache.set(fontId, []);\n          return [];\n        }\n      } catch (error) {\n        toast.error(`Ошибка парсинга шрифта: ${error.message}`);\n        return [];\n      }\n    }\n    */ console.warn(`[VarControls] Не удалось получить оси для ${targetFont.name}. Нет данных в объекте или кэше, парсинг файла не реализован.`);\n        return []; // Возвращаем пустой массив, если оси не найдены/не спарсены\n    }, [\n        selectedFont\n    ]); // Зависит только от selectedFont (для дефолта) и кэша\n    return {\n        applyVariableSettings,\n        getDefaultAxisValues,\n        resetVariableSettings,\n        getVariableAxesInfo\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useVariableFontControls.js\n");

/***/ }),

/***/ "./pages/_app.jsx":
/*!************************!*\
  !*** ./pages/_app.jsx ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MyApp)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-toastify/dist/ReactToastify.css */ \"./node_modules/react-toastify/dist/ReactToastify.css\");\n/* harmony import */ var react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_toastify_dist_ReactToastify_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _contexts_SettingsContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../contexts/SettingsContext */ \"./contexts/SettingsContext.js\");\n/* harmony import */ var _contexts_FontContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../contexts/FontContext */ \"./contexts/FontContext.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_7__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_2__, _contexts_FontContext__WEBPACK_IMPORTED_MODULE_6__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_2__, _contexts_FontContext__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nfunction MyApp({ Component, pageProps }) {\n    // Очищаем все шрифты при загрузке страницы\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Создаем стиль, который очистит все шрифты перед загрузкой\n        const clearFontsStyle = document.createElement(\"style\");\n        clearFontsStyle.textContent = `\n      /* Очистка всех шрифтов */\n      @font-face {\n        font-family: 'Arial';\n        src: local('Arial');\n        font-weight: normal;\n        font-style: normal;\n      }\n    `;\n        document.head.appendChild(clearFontsStyle);\n        return ()=>{\n            // Удаляем стиль при размонтировании\n            if (clearFontsStyle.parentNode) {\n                clearFontsStyle.parentNode.removeChild(clearFontsStyle);\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_7___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"viewport\",\n                        content: \"width=device-width, initial-scale=1\"\n                    }, void 0, false, {\n                        fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                        lineNumber: 36,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Font Gauntlet - Инструмент для работы со шрифтами\"\n                    }, void 0, false, {\n                        fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                        lineNumber: 37,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                lineNumber: 35,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_SettingsContext__WEBPACK_IMPORTED_MODULE_5__.SettingsProvider, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_FontContext__WEBPACK_IMPORTED_MODULE_6__.FontProvider, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                            ...pageProps\n                        }, void 0, false, {\n                            fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                            lineNumber: 42,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_toastify__WEBPACK_IMPORTED_MODULE_2__.ToastContainer, {\n                            position: \"bottom-right\",\n                            autoClose: 3000,\n                            hideProgressBar: false,\n                            newestOnTop: true,\n                            closeOnClick: true,\n                            rtl: false,\n                            pauseOnFocusLoss: true,\n                            draggable: true,\n                            pauseOnHover: true\n                        }, void 0, false, {\n                            fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                            lineNumber: 43,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                    lineNumber: 41,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/igormocalov/Desktop/Font/pages/_app.jsx\",\n                lineNumber: 40,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFDYztBQUN4QjtBQUNnQjtBQUNnQjtBQUNSO0FBQzFCO0FBRWQsU0FBU08sTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRTtJQUNwRCwyQ0FBMkM7SUFDM0NSLGdEQUFTQSxDQUFDO1FBQ1IsNERBQTREO1FBQzVELE1BQU1TLGtCQUFrQkMsU0FBU0MsYUFBYSxDQUFDO1FBQy9DRixnQkFBZ0JHLFdBQVcsR0FBRyxDQUFDOzs7Ozs7OztJQVEvQixDQUFDO1FBQ0RGLFNBQVNHLElBQUksQ0FBQ0MsV0FBVyxDQUFDTDtRQUUxQixPQUFPO1lBQ0wsb0NBQW9DO1lBQ3BDLElBQUlBLGdCQUFnQk0sVUFBVSxFQUFFO2dCQUM5Qk4sZ0JBQWdCTSxVQUFVLENBQUNDLFdBQVcsQ0FBQ1A7WUFDekM7UUFDRjtJQUNGLEdBQUcsRUFBRTtJQUVMLHFCQUNFOzswQkFDRSw4REFBQ0osa0RBQUlBOztrQ0FDSCw4REFBQ1k7d0JBQUtDLE1BQUs7d0JBQVdDLFNBQVE7Ozs7OztrQ0FDOUIsOERBQUNDO2tDQUFNOzs7Ozs7Ozs7Ozs7MEJBR1QsOERBQUNqQix1RUFBZ0JBOzBCQUNmLDRFQUFDQywrREFBWUE7O3NDQUNYLDhEQUFDRzs0QkFBVyxHQUFHQyxTQUFTOzs7Ozs7c0NBQ3hCLDhEQUFDUCwwREFBY0E7NEJBQ2JvQixVQUFTOzRCQUNUQyxXQUFXOzRCQUNYQyxpQkFBaUI7NEJBQ2pCQyxXQUFXOzRCQUNYQyxZQUFZOzRCQUNaQyxLQUFLOzRCQUNMQyxnQkFBZ0I7NEJBQ2hCQyxTQUFTOzRCQUNUQyxZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTXhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9udC1nYXVudGxldC1jbG9uZS8uL3BhZ2VzL19hcHAuanN4PzRjYjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyLCB0b2FzdCB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5JztcbmltcG9ydCAnLi4vc3R5bGVzL2dsb2JhbHMuY3NzJzsgXG5pbXBvcnQgJ3JlYWN0LXRvYXN0aWZ5L2Rpc3QvUmVhY3RUb2FzdGlmeS5jc3MnO1xuaW1wb3J0IHsgU2V0dGluZ3NQcm92aWRlciB9IGZyb20gJy4uL2NvbnRleHRzL1NldHRpbmdzQ29udGV4dCc7XG5pbXBvcnQgeyBGb250UHJvdmlkZXIgfSBmcm9tICcuLi9jb250ZXh0cy9Gb250Q29udGV4dCc7XG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNeUFwcCh7IENvbXBvbmVudCwgcGFnZVByb3BzIH0pIHtcbiAgLy8g0J7Rh9C40YnQsNC10Lwg0LLRgdC1INGI0YDQuNGE0YLRiyDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0YDQsNC90LjRhtGLXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YHRgtC40LvRjCwg0LrQvtGC0L7RgNGL0Lkg0L7Rh9C40YHRgtC40YIg0LLRgdC1INGI0YDQuNGE0YLRiyDQv9C10YDQtdC0INC30LDQs9GA0YPQt9C60L7QuVxuICAgIGNvbnN0IGNsZWFyRm9udHNTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgY2xlYXJGb250c1N0eWxlLnRleHRDb250ZW50ID0gYFxuICAgICAgLyog0J7Rh9C40YHRgtC60LAg0LLRgdC10YUg0YjRgNC40YTRgtC+0LIgKi9cbiAgICAgIEBmb250LWZhY2Uge1xuICAgICAgICBmb250LWZhbWlseTogJ0FyaWFsJztcbiAgICAgICAgc3JjOiBsb2NhbCgnQXJpYWwnKTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgfVxuICAgIGA7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChjbGVhckZvbnRzU3R5bGUpO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyDQo9C00LDQu9GP0LXQvCDRgdGC0LjQu9GMINC/0YDQuCDRgNCw0LfQvNC+0L3RgtC40YDQvtCy0LDQvdC40LhcbiAgICAgIGlmIChjbGVhckZvbnRzU3R5bGUucGFyZW50Tm9kZSkge1xuICAgICAgICBjbGVhckZvbnRzU3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbGVhckZvbnRzU3R5bGUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIiAvPlxuICAgICAgICA8dGl0bGU+Rm9udCBHYXVudGxldCAtINCY0L3RgdGC0YDRg9C80LXQvdGCINC00LvRjyDRgNCw0LHQvtGC0Ysg0YHQviDRiNGA0LjRhNGC0LDQvNC4PC90aXRsZT5cbiAgICAgIDwvSGVhZD5cbiAgICAgIFxuICAgICAgPFNldHRpbmdzUHJvdmlkZXI+XG4gICAgICAgIDxGb250UHJvdmlkZXI+XG4gICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgICAgIDxUb2FzdENvbnRhaW5lciBcbiAgICAgICAgICAgIHBvc2l0aW9uPVwiYm90dG9tLXJpZ2h0XCJcbiAgICAgICAgICAgIGF1dG9DbG9zZT17MzAwMH1cbiAgICAgICAgICAgIGhpZGVQcm9ncmVzc0Jhcj17ZmFsc2V9XG4gICAgICAgICAgICBuZXdlc3RPblRvcFxuICAgICAgICAgICAgY2xvc2VPbkNsaWNrXG4gICAgICAgICAgICBydGw9e2ZhbHNlfVxuICAgICAgICAgICAgcGF1c2VPbkZvY3VzTG9zc1xuICAgICAgICAgICAgZHJhZ2dhYmxlXG4gICAgICAgICAgICBwYXVzZU9uSG92ZXJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZvbnRQcm92aWRlcj5cbiAgICAgIDwvU2V0dGluZ3NQcm92aWRlcj5cbiAgICA8Lz5cbiAgKTtcbn0gIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwiVG9hc3RDb250YWluZXIiLCJ0b2FzdCIsIlNldHRpbmdzUHJvdmlkZXIiLCJGb250UHJvdmlkZXIiLCJIZWFkIiwiTXlBcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiLCJjbGVhckZvbnRzU3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIm1ldGEiLCJuYW1lIiwiY29udGVudCIsInRpdGxlIiwicG9zaXRpb24iLCJhdXRvQ2xvc2UiLCJoaWRlUHJvZ3Jlc3NCYXIiLCJuZXdlc3RPblRvcCIsImNsb3NlT25DbGljayIsInJ0bCIsInBhdXNlT25Gb2N1c0xvc3MiLCJkcmFnZ2FibGUiLCJwYXVzZU9uSG92ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.jsx\n");

/***/ }),

/***/ "./utils/cssGenerator.js":
/*!*******************************!*\
  !*** ./utils/cssGenerator.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addFontFace: () => (/* binding */ addFontFace),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   debouncedAddFontFace: () => (/* binding */ debouncedAddFontFace),\n/* harmony export */   debouncedUpdateVariableFontSettings: () => (/* binding */ debouncedUpdateVariableFontSettings),\n/* harmony export */   hasSignificantChanges: () => (/* binding */ hasSignificantChanges),\n/* harmony export */   loadFontFaceIfNeeded: () => (/* binding */ loadFontFaceIfNeeded),\n/* harmony export */   updateVariableFontSettings: () => (/* binding */ updateVariableFontSettings)\n/* harmony export */ });\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _fontUtilsCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fontUtilsCommon */ \"./utils/fontUtilsCommon.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_0__]);\nreact_toastify__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Функции для генерации CSS правил (@font-face, font-variation-settings и т.д.) \n\n\n// Восстанавливаем функцию hasSignificantChanges\n/**\n * Проверяет, являются ли изменения в настройках вариативных осей \"значительными\"\n * Используется для оптимизации обновлений CSS (например, при перетаскивании слайдера)\n * @param {Object} prevSettings - Предыдущие настройки\n * @param {Object} currentSettings - Текущие настройки\n * @param {number} threshold - Порог \"значительности\" изменения для одной оси\n * @returns {boolean} true, если изменения значительны\n */ const hasSignificantChanges = (prevSettings, currentSettings, threshold = 10)=>{\n    // Если предыдущих настроек нет, считаем изменение значительным\n    if (!prevSettings) return true;\n    // Получаем ключи (теги осей) из обоих объектов\n    const prevKeys = Object.keys(prevSettings);\n    const currentKeys = Object.keys(currentSettings);\n    // Если количество осей изменилось, считаем изменение значительным\n    if (prevKeys.length !== currentKeys.length) return true;\n    // Проверяем каждую ось\n    for (const key of currentKeys){\n        // Если ось новая или значение изменилось значительно, считаем изменение значительным\n        if (!(key in prevSettings) || Math.abs(parseFloat(prevSettings[key]) - parseFloat(currentSettings[key])) >= threshold) {\n            return true;\n        }\n    }\n    // Если ни одно из условий выше не сработало, изменения незначительны\n    return false;\n};\n/**\n * Буфер для CSS обновлений\n * Помогает предотвратить моргание шрифта при частом обновлении\n */ const fontCssBuffer = {\n    // Основной буфер (активный)\n    main: new Map(),\n    // Вторичный буфер (для подготовки)\n    shadow: new Map(),\n    // Флаг отслеживания активного переключения\n    switching: false,\n    // ID кадра анимации для отмены\n    animationFrameId: null\n};\n/**\n * Обновляет CSS правило с использованием двойной буферизации и requestAnimationFrame\n * @param {string} fontId - ID шрифта\n * @param {string} cssRule - CSS правило\n */ const updateBufferedFontCss = (fontId, cssRule)=>{\n    // Сохраняем правило в теневом буфере\n    fontCssBuffer.shadow.set(fontId, cssRule);\n    // Если кадр анимации уже запланирован, не создаем новый\n    if (fontCssBuffer.animationFrameId) {\n        return;\n    }\n    // Планируем переключение на следующий кадр анимации\n    fontCssBuffer.animationFrameId = requestAnimationFrame(()=>{\n        // Устанавливаем флаг переключения\n        fontCssBuffer.switching = true;\n        // Применяем все CSS правила из теневого буфера\n        fontCssBuffer.shadow.forEach((rule, id)=>{\n            try {\n                // Находим существующий элемент style или создаем новый\n                let styleElement = document.querySelector(`style[data-font-id=\"${id}\"]`);\n                if (!styleElement) {\n                    styleElement = document.createElement(\"style\");\n                    styleElement.setAttribute(\"data-font-id\", id);\n                    document.head.appendChild(styleElement);\n                }\n                // Обновляем содержимое, только если оно изменилось\n                if (styleElement.textContent !== rule) {\n                    styleElement.textContent = rule;\n                }\n                // Копируем правило в основной буфер\n                fontCssBuffer.main.set(id, rule);\n            // УДАЛЕНО: Принудительная перерисовка страницы\n            // document.body.offsetHeight;\n            } catch (error) {\n                console.error(`Ошибка при обновлении CSS для шрифта ${id}:`, error);\n            }\n        });\n        // Очищаем теневой буфер\n        fontCssBuffer.shadow.clear();\n        // Сбрасываем флаг переключения и ID кадра анимации\n        fontCssBuffer.switching = false;\n        fontCssBuffer.animationFrameId = null;\n    });\n};\n/**\n * Кэш для хранения загруженных объектов FontFace\n * Ключ: `${fontFamily}_${url}`, Значение: Promise<FontFace>\n */ const fontFaceCache = new Map();\n/**\n * Загружает шрифт с использованием FontFace API и кэширования\n * @param {string} fontFamily - Имя семейства шрифтов\n * @param {string} url - URL шрифта\n * @param {Object} settings - Настройки вариативных осей (опционально)\n * @returns {Promise<FontFace>} - Промис с объектом FontFace\n */ const loadFontFaceIfNeeded = async (fontFamily, url, settings = {})=>{\n    const cacheKey = `${fontFamily}_${url}`;\n    // Проверяем кэш\n    if (fontFaceCache.has(cacheKey)) {\n        try {\n            const cachedPromise = fontFaceCache.get(cacheKey);\n            const fontFace = await cachedPromise; // Дожидаемся разрешения промиса из кэша\n            // Проверяем, добавлен ли шрифт в document.fonts (на случай, если он был удален)\n            if (typeof document !== \"undefined\" && document.fonts && !document.fonts.has(fontFace)) {\n                document.fonts.add(fontFace);\n            }\n            return fontFace;\n        } catch (error) {\n            // Если промис в кэше был отклонен, удаляем его и продолжаем загрузку\n            console.warn(`Ошибка при использовании кэшированного FontFace для ${fontFamily}, повторная загрузка:`, error);\n            fontFaceCache.delete(cacheKey);\n        }\n    }\n    // Создаем промис для загрузки (чтобы закэшировать сам промис)\n    const loadPromise = (async ()=>{\n        try {\n            // ИСПРАВЛЕНИЕ: НЕ устанавливаем variationSettings в FontFace опциях!\n            // Это позволит динамически изменять оси через CSS font-variation-settings\n            const options = {};\n            // УДАЛЕНО: if (Object.keys(settings).length > 0) { ... }\n            console.log(`[loadFontFaceIfNeeded] Создаем FontFace для ${fontFamily} БЕЗ фиксированных variationSettings`);\n            const fontFace = new FontFace(fontFamily, `url(${url})`, options);\n            await fontFace.load();\n            if (typeof document !== \"undefined\" && document.fonts) {\n                document.fonts.add(fontFace);\n            }\n            console.log(`[loadFontFaceIfNeeded] FontFace успешно загружен и добавлен: ${fontFamily}`);\n            return fontFace;\n        } catch (error) {\n            console.error(`Ошибка при загрузке шрифта ${fontFamily} через FontFace API:`, error);\n            fontFaceCache.delete(cacheKey); // Удаляем из кэша при ошибке загрузки\n            throw error; // Пробрасываем ошибку дальше\n        }\n    })();\n    // Кэшируем сам промис\n    fontFaceCache.set(cacheKey, loadPromise);\n    return loadPromise;\n};\n/**\n * @deprecated Эта функция больше не добавляет @font-face. Используйте loadFontFaceIfNeeded.\n *             Она может быть использована только для обновления настроек, но лучше использовать updateVariableFontSettings.\n */ const addFontFace = (fontObj, prevSettings = null)=>{\n    // Проверяем, что у нас есть допустимый объект шрифта\n    if (!fontObj) {\n        console.error(\"fontObj не предоставлен\");\n        return null;\n    }\n    // Проверяем, что у нас есть файл или URL (уже не нужно для этой функции)\n    /*\n  if (!fontObj.url && (!fontObj.file || !(fontObj.file instanceof Blob))) {\n    console.error('Нет URL или файла для шрифта');\n    return fontObj;\n  }\n  */ // Убедимся, что у шрифта есть ID\n    if (!fontObj.id) {\n        fontObj.id = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n    // Убедимся, что есть fontFamily (он должен быть установлен в processLocalFont или взят из источника)\n    const fontFamilyName = fontObj.fontFamily;\n    if (!fontFamilyName) {\n        console.error(\"fontObj не имеет fontFamily, не могу обновить CSS.\", fontObj);\n        return fontObj; // Возвращаем без изменений\n    }\n    // --- УДАЛЕНА ГЕНЕРАЦИЯ @font-face --- \n    // Вся логика, связанная с `src: url(...)` и `format()` удалена.\n    // --- ЛОГИКА ОБНОВЛЕНИЯ VARIATION SETTINGS (оставлена для обратной совместимости, но лучше использовать updateVariableFontSettings) ---\n    // ... (код извлечения currentSettings и генерации variationSettingsRule остается, как в предыдущем анализе)\n    const currentSettings = {};\n    if (fontObj.isVariableFont && fontObj.variableAxes) {\n        Object.entries(fontObj.variableAxes).forEach(([tag, axisData])=>{\n            const value = axisData?.currentValue ?? axisData?.default;\n            if (value !== undefined) {\n                currentSettings[tag] = value;\n            }\n        });\n    }\n    // Подготавливаем строку font-variation-settings\n    let variationSettingsRule = \"\";\n    if (fontObj.isVariableFont) {\n        const settingsToApply = Object.entries(currentSettings);\n        if (settingsToApply.length > 0) {\n            const settingsArray = settingsToApply.map(([tag, value])=>`\\\"${tag}\\\" ${value}`);\n            // Используем data-атрибут как селектор (пример)\n            variationSettingsRule = `[data-font-family=\"${fontFamilyName}\"] { font-variation-settings: ${settingsArray.join(\", \")}; }`;\n        }\n    }\n    const cssRule = variationSettingsRule;\n    // Обновляем CSS с помощью буферизации, если есть что обновлять\n    if (cssRule) {\n        // Используем ID + '-settings', чтобы не конфликтовать с возможным старым @font-face стилем\n        updateBufferedFontCss(fontObj.id + \"-settings\", cssRule);\n    }\n    return fontObj;\n};\n/**\n * Создает дебаунсированную версию функции для предотвращения частых вызовов\n * @param {Function} func - Функция для дебаунсинга\n * @param {number} wait - Время ожидания в миллисекундах\n * @returns {Function} - Дебаунсированная функция\n */ const debounce = (func, wait = 50)=>{\n    let timeout;\n    return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(()=>func.apply(context, args), wait);\n    };\n};\n/**\n * Дебаунсированная версия addFontFace для безопасного вызова при изменении осей\n */ const debouncedAddFontFace = debounce(addFontFace, 50);\n/**\n * Переименовываем updateFontFaceIfNeeded в updateVariableFontSettings\n * @param {Object} fontObj - Объект шрифта\n * @param {Object} currentSettings - Объект с текущими настройками осей { tag: value, ... }\n * @param {Object} prevSettings - Предыдущие настройки (опционально, для hasSignificantChanges)\n * @returns {Object} - Исходный fontObj\n */ const updateVariableFontSettings = (fontObj, currentSettings, prevSettings = null)=>{\n    if (!fontObj || !fontObj.fontFamily || !fontObj.isVariableFont) {\n        console.warn(\"updateVariableFontSettings: Невалидный fontObj или не вариативный шрифт.\");\n        return fontObj;\n    }\n    if (!currentSettings || typeof currentSettings !== \"object\") {\n        console.warn(\"updateVariableFontSettings: Не предоставлены currentSettings.\");\n        return fontObj;\n    }\n    const fontFamilyName = fontObj.fontFamily;\n    const fontId = fontObj.id || fontFamilyName; // Нужен ID для updateBufferedFontCss\n    // Опциональная проверка на значительные изменения\n    // if (prevSettings && !hasSignificantChanges(prevSettings, currentSettings)) {\n    //     return fontObj; // Нет значительных изменений\n    // }\n    // Формируем CSS правило ТОЛЬКО для font-variation-settings\n    let variationSettingsRule = \"\";\n    const settingsToApply = Object.entries(currentSettings);\n    if (settingsToApply.length > 0) {\n        const settingsArray = settingsToApply.map(([tag, value])=>`\\\"${tag}\\\" ${value}`);\n        // Используем data-атрибут как селектор. Убедись, что элемент превью имеет этот атрибут!\n        variationSettingsRule = `[data-font-family=\"${fontFamilyName}\"] { font-variation-settings: ${settingsArray.join(\", \")}; }`;\n    // Альтернатива: CSS переменные (требует изменений в компоненте)\n    // variationSettingsRule = `:root { ${settingsArray.map(([tag, value]) => `--${fontId}-${tag}: ${value};`).join('\\n')} }`;\n    }\n    // Обновляем CSS через буфер\n    if (variationSettingsRule) {\n        updateBufferedFontCss(fontId + \"-settings\", variationSettingsRule); // Используем уникальный ID для стилей настроек\n    } else {\n    // Если настроек нет, возможно, нужно удалить предыдущее правило?\n    // updateBufferedFontCss(fontId + '-settings', ''); // Очистить стиль\n    }\n    return fontObj;\n};\n// Дебаунсированная версия updateVariableFontSettings (остается)\nconst debouncedUpdateVariableFontSettings = debounce(updateVariableFontSettings, 50);\n/**\n * Счетчик для отслеживания количества загрузок шрифтов для отладки\n */ let fontLoadCounter = 0;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/cssGenerator.js\n");

/***/ }),

/***/ "./utils/db.js":
/*!*********************!*\
  !*** ./utils/db.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteAllFontsDB: () => (/* binding */ deleteAllFontsDB),\n/* harmony export */   deleteFontDB: () => (/* binding */ deleteFontDB),\n/* harmony export */   getAllFonts: () => (/* binding */ getAllFonts),\n/* harmony export */   saveFont: () => (/* binding */ saveFont),\n/* harmony export */   updateFontSettings: () => (/* binding */ updateFontSettings)\n/* harmony export */ });\n// utils/db.js\nconst DB_NAME = \"FontGauntletDB\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"fonts\";\nlet dbPromise = null;\n/**\n * Открывает (или создает/обновляет) базу данных IndexedDB.\n * @returns {Promise<IDBDatabase>} Промис с объектом базы данных.\n */ function openDB() {\n    if (dbPromise) {\n        return dbPromise;\n    }\n    dbPromise = new Promise((resolve, reject)=>{\n        const request = indexedDB.open(DB_NAME, DB_VERSION);\n        request.onerror = (event)=>{\n            console.error(\"Ошибка открытия IndexedDB:\", event.target.error);\n            reject(\"Ошибка открытия IndexedDB\");\n        };\n        request.onsuccess = (event)=>{\n            console.log(\"IndexedDB успешно открыта\");\n            resolve(event.target.result);\n        };\n        // Вызывается при создании БД или обновлении версии\n        request.onupgradeneeded = (event)=>{\n            console.log(\"Обновление схемы IndexedDB...\");\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(STORE_NAME)) {\n                console.log(`Создание хранилища объектов: ${STORE_NAME}`);\n                // Создаем хранилище объектов для шрифтов\n                // 'id' будет ключом\n                db.createObjectStore(STORE_NAME, {\n                    keyPath: \"id\"\n                });\n            // Можно добавить индексы при необходимости, например:\n            // store.createIndex('name', 'name', { unique: false });\n            }\n        };\n    });\n    return dbPromise;\n}\n/**\n * Сохраняет объект шрифта в IndexedDB.\n * @param {Object} fontObj - Объект шрифта для сохранения (должен содержать Blob в поле file).\n * @returns {Promise<void>}\n */ async function saveFont(fontObj) {\n    if (!fontObj || !fontObj.id || !fontObj.file) {\n        console.warn(\"Попытка сохранить некорректный fontObj в IndexedDB\", fontObj);\n        return;\n    }\n    try {\n        const db = await openDB();\n        const transaction = db.transaction(STORE_NAME, \"readwrite\");\n        const store = transaction.objectStore(STORE_NAME);\n        // Используем put для вставки или обновления\n        const request = store.put(fontObj);\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>{\n                // console.log(`Шрифт ${fontObj.name} (${fontObj.id}) сохранен в IndexedDB`);\n                resolve();\n            };\n            request.onerror = (event)=>{\n                console.error(\"Ошибка сохранения шрифта в IndexedDB:\", event.target.error);\n                reject(\"Ошибка сохранения шрифта\");\n            };\n        });\n    } catch (error) {\n        console.error(\"Не удалось выполнить транзакцию сохранения в IndexedDB:\", error);\n    }\n}\n/**\n * Получает все объекты шрифтов из IndexedDB.\n * @returns {Promise<Array<Object>>} Промис с массивом объектов шрифтов.\n */ async function getAllFonts() {\n    try {\n        const db = await openDB();\n        const transaction = db.transaction(STORE_NAME, \"readonly\");\n        const store = transaction.objectStore(STORE_NAME);\n        const request = store.getAll();\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = (event)=>{\n                resolve(event.target.result || []);\n            };\n            request.onerror = (event)=>{\n                console.error(\"Ошибка получения всех шрифтов из IndexedDB:\", event.target.error);\n                reject(\"Ошибка получения шрифтов\");\n            };\n        });\n    } catch (error) {\n        console.error(\"Не удалось выполнить транзакцию чтения из IndexedDB:\", error);\n        return []; // Возвращаем пустой массив при ошибке\n    }\n}\n/**\n * Удаляет объект шрифта из IndexedDB по ID.\n * @param {string} fontId - ID шрифта для удаления.\n * @returns {Promise<void>}\n */ async function deleteFontDB(fontId) {\n    if (!fontId) return;\n    try {\n        const db = await openDB();\n        const transaction = db.transaction(STORE_NAME, \"readwrite\");\n        const store = transaction.objectStore(STORE_NAME);\n        const request = store.delete(fontId);\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>{\n                // console.log(`Шрифт ${fontId} удален из IndexedDB`);\n                resolve();\n            };\n            request.onerror = (event)=>{\n                console.error(\"Ошибка удаления шрифта из IndexedDB:\", event.target.error);\n                reject(\"Ошибка удаления шрифта\");\n            };\n        });\n    } catch (error) {\n        console.error(\"Не удалось выполнить транзакцию удаления из IndexedDB:\", error);\n    }\n}\n/**\n * Удаляет ВСЕ объекты шрифтов из хранилища IndexedDB.\n * @returns {Promise<void>}\n */ async function deleteAllFontsDB() {\n    try {\n        const db = await openDB();\n        const transaction = db.transaction(STORE_NAME, \"readwrite\");\n        const store = transaction.objectStore(STORE_NAME);\n        // Используем clear() для удаления всех записей\n        const request = store.clear();\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>{\n                console.log(`Все шрифты удалены из IndexedDB (хранилище ${STORE_NAME})`);\n                resolve();\n            };\n            request.onerror = (event)=>{\n                console.error(\"Ошибка очистки хранилища шрифтов в IndexedDB:\", event.target.error);\n                reject(\"Ошибка очистки хранилища шрифтов\");\n            };\n        });\n    } catch (error) {\n        console.error(\"Не удалось выполнить транзакцию очистки хранилища IndexedDB:\", error);\n    // Не пробрасываем ошибку дальше, просто логируем\n    }\n}\n/**\n * Обновляет настройки шрифта в IndexedDB (lastUsedPresetName, lastUsedVariableSettings, currentWeight, currentStyle).\n * @param {string} fontId - ID шрифта для обновления.\n * @param {Object} updates - Объект с обновлениями для шрифта.\n * @returns {Promise<void>}\n */ async function updateFontSettings(fontId, updates) {\n    if (!fontId || !updates) {\n        console.warn(\"updateFontSettings: некорректные параметры\", {\n            fontId,\n            updates\n        });\n        return;\n    }\n    try {\n        const db = await openDB();\n        const transaction = db.transaction(STORE_NAME, \"readwrite\");\n        const store = transaction.objectStore(STORE_NAME);\n        // Сначала получаем существующий объект\n        const getRequest = store.get(fontId);\n        return new Promise((resolve, reject)=>{\n            getRequest.onsuccess = ()=>{\n                const existingFont = getRequest.result;\n                if (!existingFont) {\n                    console.warn(`updateFontSettings: шрифт ${fontId} не найден в IndexedDB`);\n                    resolve();\n                    return;\n                }\n                // Обновляем только нужные поля\n                const updatedFont = {\n                    ...existingFont,\n                    ...updates,\n                    // Обновляем timestamp для отслеживания изменений\n                    lastUpdated: Date.now()\n                };\n                // Сохраняем обновленный объект\n                const putRequest = store.put(updatedFont);\n                putRequest.onsuccess = ()=>{\n                    console.log(`Настройки шрифта ${fontId} обновлены в IndexedDB:`, updates);\n                    resolve();\n                };\n                putRequest.onerror = (event)=>{\n                    console.error(\"Ошибка обновления настроек шрифта в IndexedDB:\", event.target.error);\n                    reject(\"Ошибка обновления настроек шрифта\");\n                };\n            };\n            getRequest.onerror = (event)=>{\n                console.error(\"Ошибка получения шрифта для обновления из IndexedDB:\", event.target.error);\n                reject(\"Ошибка получения шрифта для обновления\");\n            };\n        });\n    } catch (error) {\n        console.error(\"Не удалось выполнить транзакцию обновления в IndexedDB:\", error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/db.js\n");

/***/ }),

/***/ "./utils/fontManagerUtils.js":
/*!***********************************!*\
  !*** ./utils/fontManagerUtils.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToArrayBuffer: () => (/* binding */ base64ToArrayBuffer)\n/* harmony export */ });\n/**\n * Вспомогательная функция для декодирования Base64 в ArrayBuffer.\n * @param {string} base64 - Строка в формате Base64.\n * @returns {ArrayBuffer} - Декодированный ArrayBuffer.\n * @throws {Error} Если декодирование не удалось.\n */ function base64ToArrayBuffer(base64) {\n    try {\n        const binaryString = window.atob(base64);\n        const len = binaryString.length;\n        const bytes = new Uint8Array(len);\n        for(let i = 0; i < len; i++){\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes.buffer;\n    } catch (e) {\n        console.error(\"Ошибка декодирования base64:\", e);\n        throw new Error(\"Не удалось декодировать данные шрифта.\");\n    }\n} // Другие общие утилиты для useFontManager можно будет добавить сюда позже \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9mb250TWFuYWdlclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUNNLFNBQVNBLG9CQUFvQkMsTUFBTTtJQUN4QyxJQUFJO1FBQ0YsTUFBTUMsZUFBZUMsT0FBT0MsSUFBSSxDQUFDSDtRQUNqQyxNQUFNSSxNQUFNSCxhQUFhSSxNQUFNO1FBQy9CLE1BQU1DLFFBQVEsSUFBSUMsV0FBV0g7UUFDN0IsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlKLEtBQUtJLElBQUs7WUFDNUJGLEtBQUssQ0FBQ0UsRUFBRSxHQUFHUCxhQUFhUSxVQUFVLENBQUNEO1FBQ3JDO1FBQ0EsT0FBT0YsTUFBTUksTUFBTTtJQUNyQixFQUFFLE9BQU9DLEdBQUc7UUFDVkMsUUFBUUMsS0FBSyxDQUFDLGdDQUFnQ0Y7UUFDOUMsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0FBQ0YsRUFFQSwyRUFBMkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb250LWdhdW50bGV0LWNsb25lLy4vdXRpbHMvZm9udE1hbmFnZXJVdGlscy5qcz9lYzIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3QsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDQtNC10LrQvtC00LjRgNC+0LLQsNC90LjRjyBCYXNlNjQg0LIgQXJyYXlCdWZmZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0IC0g0KHRgtGA0L7QutCwINCyINGE0L7RgNC80LDRgtC1IEJhc2U2NC5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gLSDQlNC10LrQvtC00LjRgNC+0LLQsNC90L3Ri9C5IEFycmF5QnVmZmVyLlxuICogQHRocm93cyB7RXJyb3J9INCV0YHQu9C4INC00LXQutC+0LTQuNGA0L7QstCw0L3QuNC1INC90LUg0YPQtNCw0LvQvtGB0YwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gICAgY29uc3QgbGVuID0gYmluYXJ5U3RyaW5nLmxlbmd0aDtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCLQntGI0LjQsdC60LAg0LTQtdC60L7QtNC40YDQvtCy0LDQvdC40Y8gYmFzZTY0OlwiLCBlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC1INGD0LTQsNC70L7RgdGMINC00LXQutC+0LTQuNGA0L7QstCw0YLRjCDQtNCw0L3QvdGL0LUg0YjRgNC40YTRgtCwLlwiKTtcbiAgfVxufVxuXG4vLyDQlNGA0YPQs9C40LUg0L7QsdGJ0LjQtSDRg9GC0LjQu9C40YLRiyDQtNC70Y8gdXNlRm9udE1hbmFnZXIg0LzQvtC20L3QviDQsdGD0LTQtdGCINC00L7QsdCw0LLQuNGC0Ywg0YHRjtC00LAg0L/QvtC30LbQtSAiXSwibmFtZXMiOlsiYmFzZTY0VG9BcnJheUJ1ZmZlciIsImJhc2U2NCIsImJpbmFyeVN0cmluZyIsIndpbmRvdyIsImF0b2IiLCJsZW4iLCJsZW5ndGgiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJpIiwiY2hhckNvZGVBdCIsImJ1ZmZlciIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/fontManagerUtils.js\n");

/***/ }),

/***/ "./utils/fontParser.js":
/*!*****************************!*\
  !*** ./utils/fontParser.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _parseFontBufferDirect: () => (/* binding */ _parseFontBufferDirect),\n/* harmony export */   _parseFontFileDirect: () => (/* binding */ _parseFontFileDirect),\n/* harmony export */   getGlyphDataForFont: () => (/* binding */ getGlyphDataForFont),\n/* harmony export */   isVariableFont: () => (/* binding */ isVariableFont),\n/* harmony export */   parseFontBuffer: () => (/* binding */ parseFontBuffer)\n/* harmony export */ });\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! opentype.js */ \"opentype.js\");\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(opentype_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _glyphUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyphUtils */ \"./utils/glyphUtils.js\");\n/* harmony import */ var woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! woff2-encoder/decompress */ \"woff2-encoder/decompress\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_1__, woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_1__, woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// Функции для парсинга файлов шрифтов с использованием opentype.js\n // Оставляем стандартный импорт\n // toast используется в parseFontFile\n\n// --- ИМПОРТИРУЕМ ДЕКОМПРЕССОР ИЗ НОВОГО ПАКЕТА ---\n\n// <<< ЛОГ ПРОВЕРКИ OPENTYPE.JS >>>\ntry {\n    console.log(\"[Main] opentype.js status:\", typeof (opentype_js__WEBPACK_IMPORTED_MODULE_0___default()), \"Version:\", (opentype_js__WEBPACK_IMPORTED_MODULE_0___default())?.version || \"N/A\");\n} catch (e) {\n    console.error(\"[Main] Failed to access opentype object after import:\", e);\n}\n// <<< КОНЕЦ ЛОГА ПРОВЕРКИ >>>\n// <<< ЛОГ ПРОВЕРКИ ДЕКОМПРЕССОРА >>>\ntry {\n    console.log(\"[Main] woff2-encoder/decompress status:\", typeof woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n} catch (e) {\n    console.error(\"[Main] Failed to access decompress function after import:\", e);\n}\n// <<< КОНЕЦ ЛОГА ПРОВЕРКИ >>>\n/**\n * Проверяет первые 4 байта буфера на сигнатуру WOFF2 ('wOF2')\n */ const isWoff2 = (buffer)=>{\n    if (!buffer || buffer.byteLength < 4) return false;\n    if (!(buffer instanceof ArrayBuffer) && typeof buffer.slice !== \"function\") return false;\n    try {\n        const signature = String.fromCharCode(...new Uint8Array(buffer.slice(0, 4)));\n        return signature === \"wOF2\";\n    } catch (e) {\n        console.error(\"Error checking WOFF2 signature:\", e);\n        return false;\n    }\n};\n/**\n * Проверяет, является ли шрифт вариативным (содержит таблицу fvar).\n * @param {opentype.Font} fontData - Объект шрифта, полученный из opentype.parse.\n * @returns {boolean} - true, если шрифт вариативный, иначе false.\n */ const isVariableFont = (fontData)=>{\n    return !!(fontData && fontData.tables && fontData.tables.fvar);\n};\n/**\n * [Только основной поток] Асинхронно парсит ArrayBuffer шрифта.\n * Декомпрессирует WOFF2 при необходимости.\n * Возвращает полный объект opentype.Font или null при ошибке.\n *\n * @param {ArrayBuffer} buffer - ArrayBuffer с данными шрифта.\n * @param {string} [fontName='unknown'] - Имя шрифта для логирования.\n * @returns {Promise<opentype.Font|null>} Промис с объектом шрифта или null.\n */ async function parseFontBuffer(buffer, fontName = \"unknown\") {\n    // Теперь эта функция просто вызывает _parseFontBufferDirect\n    return _parseFontBufferDirect(buffer, fontName);\n}\n/**\n * [Только основной поток] Асинхронно парсит ArrayBuffer файла шрифта с помощью opentype.js\n * Декомпрессирует WOFF2 с помощью woff2-encoder.\n * @param {ArrayBuffer} buffer - Буфер с данными файла шрифта\n * @param {string} fontName - Имя шрифта (для сообщений об ошибках)\n * @returns {Promise<opentype.Font|null>} - Промис с объектом fontData от opentype.js или null в случае ошибки\n */ const _parseFontBufferDirect = async (buffer, fontName = \"font\")=>{\n    if (!buffer || !(buffer instanceof ArrayBuffer) || buffer.byteLength === 0) {\n        console.error(`[${fontName}] Invalid or empty buffer provided for direct parsing.`);\n        return null;\n    }\n    let processedBuffer = buffer;\n    try {\n        if (isWoff2(buffer)) {\n            console.log(`[Main] Detected WOFF2 for ${fontName}, attempting decompression with woff2-encoder...`);\n            try {\n                if (typeof woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__[\"default\"] !== \"function\") {\n                    throw new Error(\"woff2-encoder decompress function is not available. Check import.\");\n                }\n                const decompressedData = await (0,woff2_encoder_decompress__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(new Uint8Array(buffer));\n                if (!decompressedData) {\n                    throw new Error(\"woff2-encoder decompression returned null or undefined.\");\n                }\n                processedBuffer = decompressedData.buffer;\n                console.log(`[Main] WOFF2 decompression successful for ${fontName}`);\n            } catch (decompError) {\n                react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка декомпрессии WOFF2 для ${fontName}: ${decompError.message}`);\n                console.error(`[Main] WOFF2 decompression failed for ${fontName}:`, decompError);\n                return null;\n            }\n        }\n        if (typeof (opentype_js__WEBPACK_IMPORTED_MODULE_0___default()) === \"undefined\" || typeof (opentype_js__WEBPACK_IMPORTED_MODULE_0___default().parse) !== \"function\") {\n            throw new Error(\"opentype.js is not loaded or parse function is missing.\");\n        }\n        const parsedFont = opentype_js__WEBPACK_IMPORTED_MODULE_0___default().parse(processedBuffer);\n        console.log(`[Main] Parsed ${fontName} successfully.`);\n        return parsedFont;\n    } catch (parseError) {\n        react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка анализа шрифта ${fontName}: ${parseError.message}`);\n        console.error(`[Main] Font parsing/processing error for ${fontName}:`, parseError);\n        return null;\n    }\n};\n/**\n * [Только основной поток] Читает файл шрифта (Blob) и парсит его.\n */ const _parseFontFileDirect = (file, fontName = \"font\")=>{\n    return new Promise((resolve)=>{\n        if (!(file instanceof Blob)) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Недопустимый файл шрифта для ${fontName} (ожидается Blob)`);\n            resolve(null);\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = async (e)=>{\n            try {\n                const buffer = e.target.result;\n                // Вызываем парсер основного потока\n                const parsedFont = await _parseFontBufferDirect(buffer, fontName);\n                resolve(parsedFont);\n            } catch (error) {\n                console.error(\"Unexpected error during font buffer processing (direct):\", error);\n                resolve(null);\n            }\n        };\n        reader.onerror = (error)=>{\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Ошибка при чтении файла шрифта ${fontName}`);\n            console.error(`FileReader error for ${fontName}:`, error);\n            resolve(null);\n        };\n        try {\n            reader.readAsArrayBuffer(file);\n        } catch (readError) {\n            react_toastify__WEBPACK_IMPORTED_MODULE_1__.toast.error(`Не удалось начать чтение файла ${fontName}`);\n            console.error(`Error calling readAsArrayBuffer for ${fontName}:`, readError);\n            resolve(null);\n        }\n    });\n};\n/**\n * [Только основной поток] Получает данные глифов для шрифта.\n * @param {Object} fontObj - Объект шрифта\n * @returns {Promise<Object|null>} - Промис с данными глифов или null.\n */ const getGlyphDataForFont = async (fontObj)=>{\n    if (!fontObj || !fontObj.file) {\n        console.error(\"getGlyphDataForFont: Invalid fontObj or missing file.\");\n        return null;\n    }\n    const fontId = fontObj.id || fontObj.name;\n    try {\n        // Получаем ArrayBuffer\n        const buffer = await fontObj.file.arrayBuffer();\n        if (!buffer || buffer.byteLength === 0) {\n            console.error(`[fontParser] Font file buffer is empty for ${fontObj.name}`);\n            throw new Error(\"Font file buffer is empty.\");\n        }\n        // --- Используем только основной поток --- \n        console.log(`[fontParser] Processing glyphs in main thread for ${fontObj.name}`);\n        // Парсим буфер в основном потоке\n        const font = await parseFontBuffer(buffer, fontObj.name); // parseFontBuffer теперь вызывает _parseFontBufferDirect\n        if (!font) {\n            console.error(`[fontParser] Main thread: Failed to parse font buffer for ${fontObj.name}`);\n            throw new Error(\"Ошибка при парсинге шрифта в основном потоке\");\n        }\n        // Извлекаем глифы\n        const resultData = (0,_glyphUtils__WEBPACK_IMPORTED_MODULE_2__.extractBasicGlyphData)(font, \"main\");\n        if (!resultData) {\n            console.error(`[fontParser] Main thread: extractBasicGlyphData returned null for ${fontObj.name}.`);\n            throw new Error(\"Ошибка при извлечении данных глифов в основном потоке\");\n        }\n        // --- Конец использования основного потока --- \n        // Логируем ошибки, если они были\n        if (resultData.errors && resultData.errors.length > 0) {\n            console.warn(`[fontParser - main] Found ${resultData.errors.length} errors processing glyphs for ${fontObj.name}.`);\n        }\n        // Проверяем итоговый результат перед возвратом\n        if (!resultData || !Array.isArray(resultData.allGlyphs)) {\n            console.error(`[fontParser - main] Final glyph data result is invalid for ${fontObj.name}`, resultData);\n            return null;\n        }\n        return resultData; // Возвращаем { allGlyphs, names, unicodes, advanceWidths, errors }\n    } catch (error) {\n        console.error(`[fontParser] Error in getGlyphDataForFont for ${fontId}:`, error);\n        // toast.error('Ошибка при загрузке данных о глифах'); // Можно раскомментировать, если нужно\n        return null; // Возвращаем null при критической ошибке\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/fontParser.js\n");

/***/ }),

/***/ "./utils/fontUtilsCommon.js":
/*!**********************************!*\
  !*** ./utils/fontUtilsCommon.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PRESET_STYLES: () => (/* binding */ PRESET_STYLES),\n/* harmony export */   findStyleInfoByWeightAndStyle: () => (/* binding */ findStyleInfoByWeightAndStyle),\n/* harmony export */   getAxisName: () => (/* binding */ getAxisName),\n/* harmony export */   getFormatFromExtension: () => (/* binding */ getFormatFromExtension)\n/* harmony export */ });\n// Общие вспомогательные функции для работы со шрифтами\n// Константы пресетов стилей\nconst PRESET_STYLES = [\n    {\n        name: \"Thin\",\n        weight: 100,\n        style: \"normal\"\n    },\n    {\n        name: \"ExtraLight\",\n        weight: 200,\n        style: \"normal\"\n    },\n    {\n        name: \"Light\",\n        weight: 300,\n        style: \"normal\"\n    },\n    {\n        name: \"Regular\",\n        weight: 400,\n        style: \"normal\"\n    },\n    {\n        name: \"Medium\",\n        weight: 500,\n        style: \"normal\"\n    },\n    {\n        name: \"SemiBold\",\n        weight: 600,\n        style: \"normal\"\n    },\n    {\n        name: \"Bold\",\n        weight: 700,\n        style: \"normal\"\n    },\n    {\n        name: \"ExtraBold\",\n        weight: 800,\n        style: \"normal\"\n    },\n    {\n        name: \"Black\",\n        weight: 900,\n        style: \"normal\"\n    },\n    // { name: 'ExtraBlack', weight: 1000, style: 'normal' }, // Редко используется\n    {\n        name: \"Thin Italic\",\n        weight: 100,\n        style: \"italic\"\n    },\n    {\n        name: \"ExtraLight Italic\",\n        weight: 200,\n        style: \"italic\"\n    },\n    {\n        name: \"Light Italic\",\n        weight: 300,\n        style: \"italic\"\n    },\n    {\n        name: \"Italic\",\n        weight: 400,\n        style: \"italic\"\n    },\n    {\n        name: \"Medium Italic\",\n        weight: 500,\n        style: \"italic\"\n    },\n    {\n        name: \"SemiBold Italic\",\n        weight: 600,\n        style: \"italic\"\n    },\n    {\n        name: \"Bold Italic\",\n        weight: 700,\n        style: \"italic\"\n    },\n    {\n        name: \"ExtraBold Italic\",\n        weight: 800,\n        style: \"italic\"\n    },\n    {\n        name: \"Black Italic\",\n        weight: 900,\n        style: \"italic\"\n    }\n];\n/**\n * Находит информацию о стиле по весу и типу шрифта\n * @param {number} weight - Вес шрифта (100-900)\n * @param {string} style - Стиль шрифта ('normal', 'italic')\n * @returns {Object} - Объект с информацией о стиле (имя, вес, стиль)\n */ const findStyleInfoByWeightAndStyle = (weight, style)=>{\n    // Нормализуем вес для поиска\n    if (!weight) weight = 400;\n    if (!style) style = \"normal\";\n    // Ищем соответствие стилю и весу\n    switch(true){\n        case weight <= 100 && style === \"normal\":\n            return {\n                name: \"Thin\",\n                weight: 100,\n                style: \"normal\"\n            };\n        case weight <= 100 && style === \"italic\":\n            return {\n                name: \"Thin Italic\",\n                weight: 100,\n                style: \"italic\"\n            };\n        case weight <= 200 && style === \"normal\":\n            return {\n                name: \"ExtraLight\",\n                weight: 200,\n                style: \"normal\"\n            };\n        case weight <= 200 && style === \"italic\":\n            return {\n                name: \"ExtraLight Italic\",\n                weight: 200,\n                style: \"italic\"\n            };\n        case weight <= 300 && style === \"normal\":\n            return {\n                name: \"Light\",\n                weight: 300,\n                style: \"normal\"\n            };\n        case weight <= 300 && style === \"italic\":\n            return {\n                name: \"Light Italic\",\n                weight: 300,\n                style: \"italic\"\n            };\n        case weight <= 400 && style === \"normal\":\n            return {\n                name: \"Regular\",\n                weight: 400,\n                style: \"normal\"\n            };\n        case weight <= 400 && style === \"italic\":\n            return {\n                name: \"Italic\",\n                weight: 400,\n                style: \"italic\"\n            };\n        case weight <= 500 && style === \"normal\":\n            return {\n                name: \"Medium\",\n                weight: 500,\n                style: \"normal\"\n            };\n        case weight <= 500 && style === \"italic\":\n            return {\n                name: \"Medium Italic\",\n                weight: 500,\n                style: \"italic\"\n            };\n        case weight <= 600 && style === \"normal\":\n            return {\n                name: \"SemiBold\",\n                weight: 600,\n                style: \"normal\"\n            };\n        case weight <= 600 && style === \"italic\":\n            return {\n                name: \"SemiBold Italic\",\n                weight: 600,\n                style: \"italic\"\n            };\n        case weight <= 700 && style === \"normal\":\n            return {\n                name: \"Bold\",\n                weight: 700,\n                style: \"normal\"\n            };\n        case weight <= 700 && style === \"italic\":\n            return {\n                name: \"Bold Italic\",\n                weight: 700,\n                style: \"italic\"\n            };\n        case weight <= 800 && style === \"normal\":\n            return {\n                name: \"ExtraBold\",\n                weight: 800,\n                style: \"normal\"\n            };\n        case weight <= 800 && style === \"italic\":\n            return {\n                name: \"ExtraBold Italic\",\n                weight: 800,\n                style: \"italic\"\n            };\n        case weight <= 900 && style === \"normal\":\n            return {\n                name: \"Black\",\n                weight: 900,\n                style: \"normal\"\n            };\n        case weight <= 900 && style === \"italic\":\n            return {\n                name: \"Black Italic\",\n                weight: 900,\n                style: \"italic\"\n            };\n        default:\n            return {\n                name: \"Regular\",\n                weight: 400,\n                style: \"normal\"\n            };\n    }\n};\n/**\n * Определяет формат шрифта на основе расширения файла\n * @param {string} fileName - Имя файла шрифта\n * @returns {string} - Формат шрифта для @font-face\n */ const getFormatFromExtension = (fileName)=>{\n    const extension = fileName?.toLowerCase().split(\".\").pop() || \"\";\n    switch(extension){\n        case \"ttf\":\n            return \"truetype\";\n        case \"otf\":\n            return \"opentype\";\n        case \"woff\":\n            return \"woff\";\n        case \"woff2\":\n            return \"woff2\";\n        default:\n            // Попытка вернуть truetype по умолчанию, если расширение неизвестно, но есть\n            return extension ? \"truetype\" : \"\";\n    }\n};\n/**\n * Получает читаемое имя для тега оси вариативного шрифта\n * @param {string} tag - Тег оси (например, 'wght', 'wdth')\n * @returns {string} - Читаемое имя (например, 'Weight', 'Width')\n */ const getAxisName = (tag)=>{\n// ... (остальной код)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/fontUtilsCommon.js\n");

/***/ }),

/***/ "./utils/glyphUtils.js":
/*!*****************************!*\
  !*** ./utils/glyphUtils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractBasicGlyphData: () => (/* binding */ extractBasicGlyphData),\n/* harmony export */   getAllGlyphsFromFont: () => (/* binding */ getAllGlyphsFromFont),\n/* harmony export */   getCharUnicode: () => (/* binding */ getCharUnicode),\n/* harmony export */   getGlyphAlternatives: () => (/* binding */ getGlyphAlternatives),\n/* harmony export */   getGlyphNameFromFont: () => (/* binding */ getGlyphNameFromFont),\n/* harmony export */   getLigatures: () => (/* binding */ getLigatures),\n/* harmony export */   getSimpleCharName: () => (/* binding */ getSimpleCharName)\n/* harmony export */ });\n// Функции для работы с глифами, лигатурами, альтернативными символами шрифта\n// import { getCharUnicode } from './fontUtilsCommon'; // Удаляем этот лишний импорт\n// Вспомогательные функции для работы с глифами и структурами opentype.js\n// --- НОВАЯ ОБЩАЯ ФУНКЦИЯ ---\n/**\n * Извлекает базовые данные глифов из объекта шрифта opentype.js\n * Эта функция будет использоваться как в основном потоке (fallback), так и в веб-воркере.\n * \n * @param {object} font - Распарсенный объект шрифта opentype.js\n * @param {string} [source='unknown'] - Источник вызова ('worker' или 'main') для логирования\n * @returns {object|null} - Объект с данными глифов: { allGlyphs: Array, names: Object, unicodes: Object, advanceWidths: Object, errors: Array }\n *                   или null в случае ошибки.\n */ const extractBasicGlyphData = (font, source = \"unknown\")=>{\n    if (!font || !font.glyphs || typeof font.glyphs.get !== \"function\") {\n        console.error(`[extractBasicGlyphData - ${source}] Invalid font object provided.`);\n        return null;\n    }\n    const allGlyphs = [];\n    const glyphNames = {};\n    const glyphUnicodes = {};\n    const advanceWidths = {};\n    const errors = []; // Собираем ошибки\n    const numGlyphs = font.numGlyphs;\n    // console.log(`[extractBasicGlyphData - ${source}] Processing ${numGlyphs} glyphs.`);\n    for(let i = 0; i < numGlyphs; i++){\n        try {\n            const glyph = font.glyphs.get(i);\n            // Пропускаем невалидные глифы и .notdef\n            if (!glyph || glyph.name === \".notdef\") {\n                continue;\n            }\n            // Основная информация\n            const glyphInfo = {\n                id: glyph.index,\n                name: glyph.name || `glyph_${glyph.index}`,\n                unicode: glyph.unicode || null,\n                unicodes: glyph.unicodes || [],\n                advanceWidth: Math.round(glyph.advanceWidth) || 0\n            };\n            allGlyphs.push(glyphInfo);\n            // Сохраняем имя и Unicode для быстрого доступа\n            glyphNames[glyphInfo.id] = glyphInfo.name;\n            if (glyphInfo.unicode) {\n                glyphUnicodes[glyphInfo.id] = `U+${glyphInfo.unicode.toString(16).toUpperCase().padStart(4, \"0\")}`;\n            }\n            advanceWidths[glyphInfo.id] = glyphInfo.advanceWidth;\n        } catch (glyphError) {\n            // Логируем ошибку обработки конкретного глифа\n            console.warn(`[extractBasicGlyphData - ${source}] Error processing glyph index ${i}:`, glyphError);\n            errors.push({\n                index: i,\n                message: glyphError.message\n            }); // Сохраняем ошибку\n        }\n    }\n    // console.log(`[extractBasicGlyphData - ${source}] Successfully extracted ${allGlyphs.length} glyphs.`);\n    return {\n        allGlyphs: allGlyphs,\n        names: glyphNames,\n        unicodes: glyphUnicodes,\n        advanceWidths: advanceWidths,\n        errors: errors // Возвращаем ошибки\n    };\n};\n// --- КОНЕЦ НОВОЙ ОБЩЕЙ ФУНКЦИИ ---\n/**\n * Получает имя глифа из шрифта с помощью opentype.js\n * @param {Object} font - Объект шрифта из opentype.js\n * @param {string} char - Символ для поиска имени глифа\n * @returns {string|null} - Имя глифа из шрифта или null, если не найдено или ошибка\n */ const getGlyphNameFromFont = (font, char)=>{\n    if (!font || typeof font.charToGlyph !== \"function\" || !char || typeof char !== \"string\") {\n        return null;\n    }\n    try {\n        const glyph = font.charToGlyph(char);\n        return glyph ? glyph.name : null;\n    } catch (error) {\n        // console.error(`Error getting glyph name for char \"${char}\":`, error);\n        return null;\n    }\n};\n/**\n * Получает упрощенное название символа\n * @param {string} char - Символ для получения названия\n * @returns {string} - Упрощенное название символа\n */ const getSimpleCharName = (char)=>{\n    if (!char || typeof char !== \"string\" || !char.length) {\n        return \"unknown\";\n    }\n    // Используем специальный словарь для латинских букв\n    const latinNames = {\n        \"a\": \"a (lowercase)\",\n        \"b\": \"b (lowercase)\",\n        \"c\": \"c (lowercase)\",\n        \"d\": \"d (lowercase)\",\n        \"e\": \"e (lowercase)\",\n        \"f\": \"f (lowercase)\",\n        \"g\": \"g (lowercase)\",\n        \"h\": \"h (lowercase)\",\n        \"i\": \"i (lowercase)\",\n        \"j\": \"j (lowercase)\",\n        \"k\": \"k (lowercase)\",\n        \"l\": \"l (lowercase)\",\n        \"m\": \"m (lowercase)\",\n        \"n\": \"n (lowercase)\",\n        \"o\": \"o (lowercase)\",\n        \"p\": \"p (lowercase)\",\n        \"q\": \"q (lowercase)\",\n        \"r\": \"r (lowercase)\",\n        \"s\": \"s (lowercase)\",\n        \"t\": \"t (lowercase)\",\n        \"u\": \"u (lowercase)\",\n        \"v\": \"v (lowercase)\",\n        \"w\": \"w (lowercase)\",\n        \"x\": \"x (lowercase)\",\n        \"y\": \"y (lowercase)\",\n        \"z\": \"z (lowercase)\",\n        \"A\": \"A (uppercase)\",\n        \"B\": \"B (uppercase)\",\n        \"C\": \"C (uppercase)\",\n        \"D\": \"D (uppercase)\",\n        \"E\": \"E (uppercase)\",\n        \"F\": \"F (uppercase)\",\n        \"G\": \"G (uppercase)\",\n        \"H\": \"H (uppercase)\",\n        \"I\": \"I (uppercase)\",\n        \"J\": \"J (uppercase)\",\n        \"K\": \"K (uppercase)\",\n        \"L\": \"L (uppercase)\",\n        \"M\": \"M (uppercase)\",\n        \"N\": \"N (uppercase)\",\n        \"O\": \"O (uppercase)\",\n        \"P\": \"P (uppercase)\",\n        \"Q\": \"Q (uppercase)\",\n        \"R\": \"R (uppercase)\",\n        \"S\": \"S (uppercase)\",\n        \"T\": \"T (uppercase)\",\n        \"U\": \"U (uppercase)\",\n        \"V\": \"V (uppercase)\",\n        \"W\": \"W (uppercase)\",\n        \"X\": \"X (uppercase)\",\n        \"Y\": \"Y (uppercase)\",\n        \"Z\": \"Z (uppercase)\",\n        \"0\": \"zero\",\n        \"1\": \"one\",\n        \"2\": \"two\",\n        \"3\": \"three\",\n        \"4\": \"four\",\n        \"5\": \"five\",\n        \"6\": \"six\",\n        \"7\": \"seven\",\n        \"8\": \"eight\",\n        \"9\": \"nine\",\n        \".\": \"period\",\n        \",\": \"comma\",\n        \":\": \"colon\",\n        \";\": \"semicolon\",\n        \"-\": \"hyphen\",\n        \"_\": \"underscore\",\n        \"!\": \"exclamation\",\n        \"?\": \"question\",\n        '\"': \"quotation mark\",\n        \"'\": \"apostrophe\",\n        \"(\": \"left parenthesis\",\n        \")\": \"right parenthesis\",\n        \"[\": \"left bracket\",\n        \"]\": \"right bracket\",\n        \"{\": \"left brace\",\n        \"}\": \"right brace\",\n        \"/\": \"slash\",\n        \"\\\\\": \"backslash\",\n        \"|\": \"vertical bar\",\n        \"@\": \"at sign\",\n        \"#\": \"number sign\",\n        \"$\": \"dollar sign\",\n        \"%\": \"percent\",\n        \"^\": \"caret\",\n        \"&\": \"ampersand\",\n        \"*\": \"asterisk\",\n        \"+\": \"plus\",\n        \"=\": \"equals\",\n        \"<\": \"less than\",\n        \">\": \"greater than\",\n        \"~\": \"tilde\",\n        \"`\": \"grave accent\",\n        \"№\": \"numero\",\n        \"€\": \"euro sign\",\n        \"\\xa3\": \"pound sign\",\n        \"\\xa5\": \"yen sign\",\n        \"\\xa9\": \"copyright\",\n        \"\\xae\": \"registered\",\n        \"™\": \"trademark\",\n        \"\\xb0\": \"degree\",\n        \"\\xb1\": \"plus-minus\",\n        \"\\xd7\": \"multiply\",\n        \"\\xf7\": \"divide\",\n        \"≠\": \"not equal\",\n        \"≈\": \"approximately equal\",\n        \" \": \"space\"\n    };\n    // Используем словарь для кириллицы\n    const cyrillicNames = {\n        \"А\": \"А (заглавная)\",\n        \"Б\": \"Б (заглавная)\",\n        \"В\": \"В (заглавная)\",\n        \"Г\": \"Г (заглавная)\",\n        \"Д\": \"Д (заглавная)\",\n        \"Е\": \"Е (заглавная)\",\n        \"Ё\": \"Ё (заглавная)\",\n        \"Ж\": \"Ж (заглавная)\",\n        \"З\": \"З (заглавная)\",\n        \"И\": \"И (заглавная)\",\n        \"Й\": \"Й (заглавная)\",\n        \"К\": \"К (заглавная)\",\n        \"Л\": \"Л (заглавная)\",\n        \"М\": \"М (заглавная)\",\n        \"Н\": \"Н (заглавная)\",\n        \"О\": \"О (заглавная)\",\n        \"П\": \"П (заглавная)\",\n        \"Р\": \"Р (заглавная)\",\n        \"С\": \"С (заглавная)\",\n        \"Т\": \"Т (заглавная)\",\n        \"У\": \"У (заглавная)\",\n        \"Ф\": \"Ф (заглавная)\",\n        \"Х\": \"Х (заглавная)\",\n        \"Ц\": \"Ц (заглавная)\",\n        \"Ч\": \"Ч (заглавная)\",\n        \"Ш\": \"Ш (заглавная)\",\n        \"Щ\": \"Щ (заглавная)\",\n        \"Ъ\": \"Ъ (заглавная)\",\n        \"Ы\": \"Ы (заглавная)\",\n        \"Ь\": \"Ь (заглавная)\",\n        \"Э\": \"Э (заглавная)\",\n        \"Ю\": \"Ю (заглавная)\",\n        \"Я\": \"Я (заглавная)\",\n        \"а\": \"а (строчная)\",\n        \"б\": \"б (строчная)\",\n        \"в\": \"в (строчная)\",\n        \"г\": \"г (строчная)\",\n        \"д\": \"д (строчная)\",\n        \"е\": \"е (строчная)\",\n        \"ё\": \"ё (строчная)\",\n        \"ж\": \"ж (строчная)\",\n        \"з\": \"з (строчная)\",\n        \"и\": \"и (строчная)\",\n        \"й\": \"й (строчная)\",\n        \"к\": \"к (строчная)\",\n        \"л\": \"л (строчная)\",\n        \"м\": \"м (строчная)\",\n        \"н\": \"н (строчная)\",\n        \"о\": \"о (строчная)\",\n        \"п\": \"п (строчная)\",\n        \"р\": \"р (строчная)\",\n        \"с\": \"с (строчная)\",\n        \"т\": \"т (строчная)\",\n        \"у\": \"у (строчная)\",\n        \"ф\": \"ф (строчная)\",\n        \"х\": \"х (строчная)\",\n        \"ц\": \"ц (строчная)\",\n        \"ч\": \"ч (строчная)\",\n        \"ш\": \"ш (строчная)\",\n        \"щ\": \"щ (строчная)\",\n        \"ъ\": \"ъ (строчная)\",\n        \"ы\": \"ы (строчная)\",\n        \"ь\": \"ь (строчная)\",\n        \"э\": \"э (строчная)\",\n        \"ю\": \"ю (строчная)\",\n        \"я\": \"я (строчная)\"\n    };\n    // Сначала проверяем в словарях\n    if (latinNames[char]) return latinNames[char];\n    if (cyrillicNames[char]) return cyrillicNames[char];\n    // Если не нашли, пытаемся определить категорию символа по Unicode блоку\n    try {\n        const code = char.codePointAt(0);\n        if (isNaN(code)) return \"unknown\";\n        if (code >= 0x2600 && code <= 0x26FF) return \"Miscellaneous Symbols\";\n        if (code >= 0x2700 && code <= 0x27BF) return \"Dingbats\";\n        if (code >= 0x1F300 && code <= 0x1F5FF) return \"Miscellaneous Symbols and Pictographs\";\n        if (code >= 0x1F600 && code <= 0x1F64F) return \"Emoticons\";\n        if (code >= 0x1F680 && code <= 0x1F6FF) return \"Transport and Map Symbols\";\n        if (code >= 0x1F700 && code <= 0x1F77F) return \"Alchemical Symbols\";\n    // Добавить другие блоки по необходимости\n    } catch (error) {\n        // Ошибка при получении codePoint (например, для суррогатных пар)\n        return \"unknown\";\n    }\n    // Если не смогли классифицировать, возвращаем generic name\n    return \"character\";\n};\n/**\n * Получает все доступные глифы из шрифта\n * @param {Object} font - Объект шрифта из opentype.js\n * @returns {Array<{character: string, unicode: string, name: string, index: number}>} - Массив объектов глифов\n */ const getAllGlyphsFromFont = (font)=>{\n    if (!font || !font.glyphs || typeof font.glyphs.get !== \"function\" || typeof font.numGlyphs !== \"number\") {\n        return [];\n    }\n    try {\n        const glyphs = [];\n        const numGlyphs = font.numGlyphs;\n        for(let i = 0; i < numGlyphs; i++){\n            const glyph = font.glyphs.get(i);\n            // Пропускаем .notdef и глифы без Unicode\n            if (!glyph || glyph.name === \".notdef\" || !glyph.unicode) continue;\n            // Получаем символ (может быть несколько Unicode для одного глифа)\n            // Берем первый Unicode для простоты\n            const charCode = glyph.unicode;\n            const char = String.fromCodePoint(charCode);\n            // Добавляем только уникальные символы (не глифы)\n            if (!glyphs.some((g)=>g.character === char)) {\n                glyphs.push({\n                    character: char,\n                    unicode: getCharUnicode(char),\n                    name: glyph.name || \"\",\n                    index: i // Сохраняем индекс глифа\n                });\n            }\n        }\n        // Можно добавить сортировку по Unicode\n        glyphs.sort((a, b)=>a.unicode.localeCompare(b.unicode));\n        return glyphs;\n    } catch (error) {\n        console.error(\"Error getting all glyphs from font:\", error);\n        return [];\n    }\n};\n/**\n * Получает альтернативные формы глифа (если они есть в шрифте)\n * Реализация требует глубокого понимания таблицы GSUB 'aalt' и других фич.\n * Эта функция является заглушкой или требует значительной доработки.\n * @param {Object} font - Объект шрифта из opentype.js\n * @param {string} char - Символ для поиска альтернативных форм\n * @returns {Array<{name: string, unicode: string, index: number}>} - Массив объектов альтернативных глифов\n */ const getGlyphAlternatives = (font, char)=>{\n    if (!font || !char || !font.tables || !font.tables.gsub || !font.glyphs) return [];\n    try {\n        const alternatives = [];\n        const mainGlyph = font.charToGlyph(char);\n        if (!mainGlyph || !mainGlyph.index) return [];\n        const mainGlyphIndex = mainGlyph.index;\n        const gsub = font.tables.gsub;\n        // Поиск альтернатив в таблицах GSUB (упрощенный пример для lookupType 3)\n        if (gsub.lookups) {\n            for (const lookup of gsub.lookups){\n                // LookupType 3: Alternate Substitution Subtable\n                if (lookup.lookupType === 3) {\n                    for (const subtable of lookup.subtables){\n                        if (subtable.coverage && subtable.coverage.glyphs) {\n                            const coverageIndex = subtable.coverage.glyphs.indexOf(mainGlyphIndex);\n                            if (coverageIndex !== -1 && subtable.alternateSets && subtable.alternateSets[coverageIndex]) {\n                                const alternateIndices = subtable.alternateSets[coverageIndex];\n                                alternateIndices.forEach((altIndex)=>{\n                                    const altGlyph = font.glyphs.get(altIndex);\n                                    if (altGlyph) {\n                                        alternatives.push({\n                                            name: altGlyph.name || \"\",\n                                            unicode: altGlyph.unicode ? getCharUnicode(String.fromCodePoint(altGlyph.unicode)) : \"\",\n                                            index: altIndex\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            // Можно добавить поддержку других lookupTypes (e.g., lookupType 1)\n            }\n        }\n        // Удаляем дубликаты и основной глиф из альтернатив\n        const uniqueAlternatives = alternatives.filter((alt, index, self)=>alt.index !== mainGlyphIndex && index === self.findIndex((t)=>t.index === alt.index));\n        return uniqueAlternatives;\n    } catch (error) {\n        console.error(\"Error getting glyph alternatives:\", error);\n        return [];\n    }\n};\n/**\n * Получает лигатуры для последовательности символов (если они есть в шрифте)\n * Реализация требует глубокого понимания таблицы GSUB 'liga', 'clig' и др.\n * Эта функция является заглушкой или требует значительной доработки.\n * @param {Object} font - Объект шрифта из opentype.js\n * @param {string} chars - Последовательность символов для поиска лигатур\n * @returns {Array<{original: string, ligature: string, unicode: string}>} - Массив объектов лигатур\n */ const getLigatures = (font, chars)=>{\n    if (!font || !chars || chars.length < 2 || !font.tables || !font.tables.gsub) return [];\n    try {\n        const ligatures = [];\n        // const gsub = font.tables.gsub;\n        // TODO: Реализовать сложную логику поиска лигатур в GSUB таблицах (lookupType 4)\n        // Это требует рекурсивного обхода или сложного сопоставления последовательностей глифов.\n        // Добавляем базовые лигатуры для распространенных сочетаний как запасной вариант\n        const commonLigatures = {\n            \"ff\": \"ﬀ\",\n            \"fi\": \"ﬁ\",\n            \"fl\": \"ﬂ\",\n            \"ffi\": \"ﬃ\",\n            \"ffl\": \"ﬄ\"\n        };\n        if (commonLigatures[chars]) {\n            const ligChar = commonLigatures[chars];\n            ligatures.push({\n                original: chars,\n                ligature: ligChar,\n                unicode: getCharUnicode(ligChar)\n            });\n        }\n        return ligatures;\n    } catch (error) {\n        console.error(\"Error getting ligatures:\", error);\n        return [];\n    }\n};\n// Добавляем функцию getCharUnicode, перенесенную из fontUtilsCommon.js\n/**\n * Получает Unicode-код символа в формате \"U+XXXX\"\n * @param {string} char - Символ для получения Unicode\n * @returns {string} - Unicode-код в формате \"U+XXXX\"\n */ const getCharUnicode = (char)=>{\n    if (!char || typeof char !== \"string\" || !char.length) {\n        return \"U+????\";\n    }\n    try {\n        const codePoint = char.codePointAt(0);\n        // Проверка на NaN, чтобы избежать \"U+NAN\"\n        if (isNaN(codePoint)) {\n            return \"U+????\";\n        }\n        return `U+${codePoint.toString(16).toUpperCase().padStart(4, \"0\")}`;\n    } catch (error) {\n        return \"U+????\";\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/glyphUtils.js\n");

/***/ }),

/***/ "./utils/localFontProcessor.js":
/*!*************************************!*\
  !*** ./utils/localFontProcessor.js ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processLocalFont: () => (/* binding */ processLocalFont),\n/* harmony export */   revokeObjectURL: () => (/* binding */ revokeObjectURL)\n/* harmony export */ });\n/* harmony import */ var react_toastify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-toastify */ \"react-toastify\");\n/* harmony import */ var _fontParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fontParser */ \"./utils/fontParser.js\");\n/* harmony import */ var _fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fontUtilsCommon */ \"./utils/fontUtilsCommon.js\");\n/* harmony import */ var _cssGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssGenerator */ \"./utils/cssGenerator.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_toastify__WEBPACK_IMPORTED_MODULE_0__, _fontParser__WEBPACK_IMPORTED_MODULE_1__, _cssGenerator__WEBPACK_IMPORTED_MODULE_3__]);\n([react_toastify__WEBPACK_IMPORTED_MODULE_0__, _fontParser__WEBPACK_IMPORTED_MODULE_1__, _cssGenerator__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// Функции для обработки локально загруженных шрифтов (кэширование, FontFace)\n\n\n\n\n/**\n * Кэш для хранения результатов анализа локальных шрифтов\n * Ключ - хеш содержимого шрифта.\n * Значение - объект metadata, полученный из воркера.\n * @type {Object.<string, Object>}\n */ const localFontCache = {};\n/**\n * Освобождает URL, созданный через URL.createObjectURL()\n * @param {string} url - URL для освобождения\n */ const revokeObjectURL = (url)=>{\n    if (url && typeof url === \"string\" && url.startsWith(\"blob:\")) {\n        try {\n            URL.revokeObjectURL(url);\n        } catch (error) {\n            console.warn(\"Failed to revoke Object URL:\", error); // Используем warn вместо error\n        // toast.error('Ошибка при освобождении URL'); // Не спамим пользователя\n        }\n    }\n};\n/**\n * Асинхронно вычисляет SHA-256 хеш для Blob файла.\n * @param {Blob} file - Файл (Blob).\n * @returns {Promise<string|null>} - Промис с HEX-строкой хеша или null в случае ошибки.\n */ const calculateFileHash = async (file)=>{\n    if (!(file instanceof Blob)) {\n        console.error(\"Invalid input for hashing: expected Blob.\");\n        return null;\n    }\n    try {\n        const buffer = await file.arrayBuffer();\n        const hashBuffer = await crypto.subtle.digest(\"SHA-256\", buffer);\n        // Преобразуем ArrayBuffer хеша в HEX-строку\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashHex = hashArray.map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n        return hashHex;\n    } catch (error) {\n        console.error(\"Error calculating file hash:\", error);\n        react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Не удалось вычислить хеш файла для кэширования.\");\n        return null;\n    }\n};\n/**\n * Полностью анализирует локальный шрифт (из файла), определяя его характеристики.\n * Включает парсинг, извлечение метаданных, кэширование и добавление @font-face.\n * @param {Object} fontInput - Объект шрифта с file (Blob) и name (string)\n * @returns {Promise<Object|null>} - Промис с обработанным объектом шрифта или null при критической ошибке.\n */ const processLocalFont = async (fontInput)=>{\n    if (!fontInput || !(fontInput.file instanceof Blob) || !fontInput.name) {\n        react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Неверные входные данные для обработки локального шрифта.\");\n        return null;\n    }\n    const { file, name } = fontInput;\n    const fontId = Math.random().toString(36).substring(2, 9); // Короткий ID для читаемости\n    const cleanedName = name.replace(/\\.[^/.]+$/, \"\");\n    let objectUrl = null;\n    let cacheKey = null; // Инициализируем cacheKey\n    try {\n        // 1. Вычисляем хеш файла для использования в качестве ключа кэша\n        cacheKey = await calculateFileHash(file);\n        if (!cacheKey) {\n            // Если хеш не удалось получить, кэширование невозможно, но продолжаем обработку\n            react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.warning(\"Не удалось создать ключ кэша для шрифта, кэширование будет пропущено.\");\n        }\n        // 2. Проверка кэша (теперь по хешу)\n        if (cacheKey && localFontCache[cacheKey]) {\n            console.log(`Using cached metadata for ${name} (hash: ${cacheKey.substring(0, 8)}...)`); // Лог для отладки\n            objectUrl = URL.createObjectURL(file); // Свежий URL нужен всегда\n            const cachedMetadata = {\n                ...localFontCache[cacheKey]\n            }; // Получаем метаданные из кэша\n            const fontFamilyName = `font-${fontId}`; // Генерируем уникальное имя\n            // Создаем fontObj на основе кэшированных метаданных\n            const fontObj = {\n                id: fontId,\n                name: cachedMetadata.preferredFamily || cachedMetadata.names?.fontFamily || cleanedName,\n                originalName: name,\n                source: \"local\",\n                currentWeight: 400,\n                currentStyle: \"normal\",\n                isVariableFont: cachedMetadata.isVariable || false,\n                variableAxes: {},\n                supportedAxes: [],\n                variationSettings: \"\",\n                availableStyles: [],\n                file: file,\n                url: objectUrl,\n                fontFamily: fontFamilyName\n            };\n            // Восстанавливаем оси и стили из кэшированных метаданных\n            if (fontObj.isVariableFont && cachedMetadata.supportedAxes) {\n                // Заполняем информацию об осях из кэша\n                fontObj.variableAxes = Object.entries(cachedMetadata.supportedAxes).reduce((acc, [tag, axisInfo])=>{\n                    acc[tag] = {\n                        name: axisInfo.name || tag.toUpperCase(),\n                        min: axisInfo.min,\n                        max: axisInfo.max,\n                        default: axisInfo.default\n                    };\n                    return acc;\n                }, {});\n                fontObj.supportedAxes = Object.keys(cachedMetadata.supportedAxes);\n                fontObj.variationSettings = Object.entries(fontObj.variableAxes).map(([tag, value])=>`\\\"${tag}\\\" ${value.default || 400}`) // Запасное значение для веса\n                .join(\", \");\n                // Определяем начальные стили для вариативных шрифтов из кэша (может быть пересмотрено)\n                // Пока оставляем заглушку или определяем на основе дефолтных осей, если возможно\n                // TODO: Уточнить логику availableStyles для вариативных из кэша\n                fontObj.availableStyles = [\n                    {\n                        name: \"Default\",\n                        weight: 400,\n                        style: \"normal\"\n                    }\n                ]; // Заглушка\n            } else if (!fontObj.isVariableFont && cachedMetadata.names) {\n                // Определяем стиль/вес для невариативных из кэша\n                let weight = 400;\n                let style = \"normal\";\n                const subfamily = cachedMetadata.preferredSubfamily || cachedMetadata.names?.fontSubfamily || \"Regular\";\n                const subfamilyLower = subfamily.toLowerCase();\n                style = subfamilyLower.includes(\"italic\") || subfamilyLower.includes(\"oblique\") ? \"italic\" : \"normal\";\n                // ... (логика определения веса из subfamily) ...\n                if (subfamilyLower.includes(\"thin\")) weight = 100;\n                else if (subfamilyLower.includes(\"extralight\") || subfamilyLower.includes(\"ultralight\")) weight = 200;\n                else if (subfamilyLower.includes(\"light\")) weight = 300;\n                else if (subfamilyLower.includes(\"medium\")) weight = 500;\n                else if (subfamilyLower.includes(\"semibold\") || subfamilyLower.includes(\"demibold\")) weight = 600;\n                else if (subfamilyLower.includes(\"bold\")) weight = 700;\n                else if (subfamilyLower.includes(\"extrabold\") || subfamilyLower.includes(\"ultrabold\")) weight = 800;\n                else if (subfamilyLower.includes(\"black\") || subfamilyLower.includes(\"heavy\")) weight = 900;\n                fontObj.currentWeight = weight;\n                fontObj.currentStyle = style;\n                const styleInfo = (0,_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle)(weight, style);\n                fontObj.availableStyles = [\n                    {\n                        name: styleInfo.name,\n                        weight,\n                        style\n                    }\n                ];\n            } else {\n                // Если стилей нет в кэше (например, старый кэш или ошибка парсинга при кэшировании)\n                fontObj.availableStyles = [\n                    {\n                        name: \"Regular\",\n                        weight: 400,\n                        style: \"normal\"\n                    }\n                ];\n            }\n            // Определяем начальные настройки для вариативных шрифтов из кэша\n            let initialSettings = {};\n            if (fontObj.isVariableFont && fontObj.variableAxes) {\n                initialSettings = Object.entries(fontObj.variableAxes).reduce((acc, [tag, axis])=>{\n                    acc[tag] = axis.default;\n                    return acc;\n                }, {});\n            }\n            // !!! Используем loadFontFaceIfNeeded напрямую !!!\n            try {\n                // Вызываем функцию через именованный импорт\n                await (0,_cssGenerator__WEBPACK_IMPORTED_MODULE_3__.loadFontFaceIfNeeded)(fontFamilyName, objectUrl, initialSettings);\n                console.log(`Font ${fontFamilyName} loaded successfully from cache using FontFace API.`);\n                // Успешно загрузили, возвращаем fontObj\n                revokeObjectURL(objectUrl); // Освобождаем blob URL после успешной загрузки\n                return fontObj;\n            } catch (error) {\n                console.error(`Failed to load font ${fontFamilyName} from cache using FontFace API:`, error);\n                react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(`Ошибка при загрузке шрифта ${fontObj.name} из кэша.`);\n                revokeObjectURL(objectUrl); // Освобождаем blob URL при ошибке\n                fontObj.error = \"Failed to load via FontFace API\";\n                return fontObj; // Возвращаем объект с ошибкой\n            }\n        // --- Конец обработки кэша ---\n        }\n        // --- Конец проверки кэша ---\n        // 3. Создание URL (если не из кэша)\n        if (!objectUrl) {\n            objectUrl = URL.createObjectURL(file);\n        }\n        // 4. Парсинг файла -> получение полного объекта шрифта через parseFontBuffer\n        // parseFontFile теперь возвращает объект metadata или null\n        let parsedFontData = null;\n        try {\n            const buffer = await file.arrayBuffer();\n            parsedFontData = await (0,_fontParser__WEBPACK_IMPORTED_MODULE_1__.parseFontBuffer)(buffer); // Используем parseFontBuffer\n        } catch (e) {\n            console.error(`Error reading or parsing font buffer for ${name}:`, e);\n            react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(`Ошибка чтения или анализа файла шрифта ${name}.`);\n        // Не возвращаем null сразу, т.к. addFontFace может работать с базовым fontObj\n        }\n        // Создаем базовый объект шрифта (как и раньше)\n        const fontObj = {\n            id: fontId,\n            name: cleanedName,\n            originalName: name,\n            source: \"local\",\n            currentWeight: 400,\n            currentStyle: \"normal\",\n            isVariableFont: false,\n            variableAxes: {},\n            supportedAxes: [],\n            variationSettings: \"\",\n            availableStyles: [],\n            file: file,\n            // url: objectUrl, // Устанавливаем ниже, после создания fontFamilyName\n            fontFamily: null\n        };\n        // Установим fontObj.url и fontObj.fontFamily\n        const fontFamilyName = `font-${fontId}`;\n        fontObj.url = objectUrl;\n        fontObj.fontFamily = fontFamilyName;\n        // 5. Заполнение fontObj из данных парсинга, если парсинг успешен\n        if (parsedFontData) {\n            // Используем данные из объекта parsedFontData (результат opentype.parse)\n            // Получаем имена (предпочитаем английские)\n            const names = parsedFontData.names || {};\n            const preferredFamily = names.preferredFamily?.en || names.fontFamily?.en;\n            const preferredSubfamily = names.preferredSubfamily?.en || names.fontSubfamily?.en || \"Regular\";\n            fontObj.name = preferredFamily || fontObj.name;\n            fontObj.isVariableFont = (0,_fontParser__WEBPACK_IMPORTED_MODULE_1__.isVariableFont)(parsedFontData); // Используем isVariableFont\n            if (fontObj.isVariableFont && parsedFontData.tables?.fvar?.axes) {\n                // Заполняем информацию об осях из parsedFontData.tables.fvar.axes\n                fontObj.variableAxes = parsedFontData.tables.fvar.axes.reduce((acc, axis)=>{\n                    const tag = axis.tag;\n                    // Используем имя из axis.name?.en, если оно есть\n                    const axisName = axis.name?.en || tag.toUpperCase();\n                    acc[tag] = {\n                        name: axisName,\n                        min: axis.minValue,\n                        max: axis.maxValue,\n                        default: axis.defaultValue\n                    };\n                    return acc;\n                }, {});\n                fontObj.supportedAxes = Object.keys(fontObj.variableAxes);\n                fontObj.variationSettings = Object.entries(fontObj.variableAxes).map(([tag, value])=>`\\\"${tag}\\\" ${value.default || 400}`) // Запасное значение для веса\n                .join(\", \");\n                fontObj.availableStyles = [\n                    {\n                        name: \"Default\",\n                        weight: 400,\n                        style: \"normal\"\n                    }\n                ]; // Заглушка\n            } else if (fontObj.isVariableFont && !parsedFontData.tables?.fvar?.axes) {\n                // Вариативный, но оси не извлеклись\n                console.warn(`Variable font ${name} parsed without axes info.`);\n                fontObj.isVariableFont = false; // Считаем невариативным\n                fontObj.availableStyles = [\n                    {\n                        name: \"Regular\",\n                        weight: 400,\n                        style: \"normal\"\n                    }\n                ];\n            } else {\n                // НЕвариативный шрифт - определяем стиль из имен\n                let weight = 400;\n                let style = \"normal\";\n                if (names) {\n                    const subfamily = preferredSubfamily; // Используем извлеченное имя\n                    const subfamilyLower = subfamily.toLowerCase();\n                    style = subfamilyLower.includes(\"italic\") || subfamilyLower.includes(\"oblique\") ? \"italic\" : \"normal\";\n                    // ... (логика определения веса из subfamily - без изменений) ...\n                    if (subfamilyLower.includes(\"thin\")) weight = 100;\n                    else if (subfamilyLower.includes(\"extralight\") || subfamilyLower.includes(\"ultralight\")) weight = 200;\n                    else if (subfamilyLower.includes(\"light\")) weight = 300;\n                    else if (subfamilyLower.includes(\"medium\")) weight = 500;\n                    else if (subfamilyLower.includes(\"semibold\") || subfamilyLower.includes(\"demibold\")) weight = 600;\n                    else if (subfamilyLower.includes(\"bold\")) weight = 700;\n                    else if (subfamilyLower.includes(\"extrabold\") || subfamilyLower.includes(\"ultrabold\")) weight = 800;\n                    else if (subfamilyLower.includes(\"black\") || subfamilyLower.includes(\"heavy\")) weight = 900;\n                }\n                fontObj.currentWeight = weight;\n                fontObj.currentStyle = style;\n                const styleInfo = (0,_fontUtilsCommon__WEBPACK_IMPORTED_MODULE_2__.findStyleInfoByWeightAndStyle)(weight, style);\n                fontObj.availableStyles = [\n                    {\n                        name: styleInfo.name,\n                        weight,\n                        style\n                    }\n                ];\n            }\n            // 6. Кэширование результата (метаданных - извлекаем из parsedFontData для совместимости кэша)\n            if (cacheKey && parsedFontData) {\n                // Кэшируем объект, похожий на старый metadata, для обратной совместимости?\n                // Или кэшировать весь parsedFontData? Пока оставим как было, извлекая нужное\n                const metadataToCache = {\n                    names: parsedFontData.names,\n                    preferredFamily: preferredFamily,\n                    preferredSubfamily: preferredSubfamily,\n                    isVariable: fontObj.isVariableFont,\n                    supportedAxes: fontObj.isVariableFont ? parsedFontData.tables.fvar.axes.reduce((acc, axis)=>{\n                        acc[axis.tag] = {\n                            name: axis.name?.en,\n                            min: axis.minValue,\n                            max: axis.maxValue,\n                            default: axis.defaultValue\n                        };\n                        return acc;\n                    }, {}) : null\n                };\n                localFontCache[cacheKey] = metadataToCache;\n            // console.log(`Metadata cached for ${name} (hash: ${cacheKey.substring(0, 8)}...)`); // Удаляем лог\n            }\n        } else {\n            // Парсинг не удался (parsedFontData is null)\n            react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.warning(`Не удалось проанализировать шрифт ${name}. Используются значения по умолчанию.`);\n            fontObj.availableStyles = [\n                {\n                    name: \"Regular\",\n                    weight: 400,\n                    style: \"normal\"\n                }\n            ];\n        }\n        // Определяем начальные настройки для вариативных шрифтов\n        let initialSettings = {};\n        if (fontObj.isVariableFont && fontObj.variableAxes) {\n            initialSettings = Object.entries(fontObj.variableAxes).reduce((acc, [tag, axis])=>{\n                acc[tag] = axis.default;\n                return acc;\n            }, {});\n        }\n        // !!! Используем loadFontFaceIfNeeded напрямую !!!\n        try {\n            // Вызываем функцию через именованный импорт\n            await (0,_cssGenerator__WEBPACK_IMPORTED_MODULE_3__.loadFontFaceIfNeeded)(fontFamilyName, objectUrl, initialSettings);\n            console.log(`Font ${fontFamilyName} loaded successfully using FontFace API.`);\n            // Успешно загрузили, возвращаем fontObj\n            revokeObjectURL(objectUrl); // Освобождаем blob URL после успешной загрузки\n            return fontObj;\n        } catch (error) {\n            console.error(`Failed to load font ${fontFamilyName} using FontFace API:`, error);\n            react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(`Ошибка при загрузке шрифта ${fontObj.name}.`);\n            revokeObjectURL(objectUrl); // Освобождаем blob URL при ошибке\n            fontObj.error = \"Failed to load via FontFace API\";\n            return fontObj; // Возвращаем объект с ошибкой\n        }\n    } catch (error) {\n        console.error(`Critical error processing font ${name}:`, error);\n        react_toastify__WEBPACK_IMPORTED_MODULE_0__.toast.error(`Критическая ошибка при обработке шрифта ${name}.`);\n        if (objectUrl) {\n            revokeObjectURL(objectUrl); // Освобождаем URL при любой критической ошибке\n        }\n        return null; // Возвращаем null при критической ошибке\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/localFontProcessor.js\n");

/***/ }),

/***/ "./utils/staticFontGenerator.js":
/*!**************************************!*\
  !*** ./utils/staticFontGenerator.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkGenerationCapabilities: () => (/* binding */ checkGenerationCapabilities),\n/* harmony export */   generateStaticFont: () => (/* binding */ generateStaticFont)\n/* harmony export */ });\n/**\n * Утилита для генерации статических шрифтов из вариативных\n * Использует различные подходы в зависимости от доступности инструментов\n */ // Попытка загрузки HarfBuzz WASM (если доступен)\nlet harfbuzzWasm = null;\nconst loadHarfBuzz = async ()=>{\n    if (harfbuzzWasm) return harfbuzzWasm;\n    try {\n        // Пытаемся загрузить HarfBuzz WASM (пакет не установлен, будет fallback)\n        return null;\n    } catch (error) {\n        return null;\n    }\n};\n/**\n * Генерирует статический шрифт с использованием HarfBuzz WASM\n */ const generateWithHarfBuzz = async (fontBuffer, variableSettings)=>{\n    const hb = await loadHarfBuzz();\n    if (!hb) throw new Error(\"HarfBuzz WASM недоступен\");\n    // Создаем blob из font data\n    const blob = hb.createBlob(fontBuffer);\n    const face = hb.createFace(blob, 0);\n    const font = hb.createFont(face);\n    // Применяем вариативные настройки\n    const variations = Object.entries(variableSettings).map(([tag, value])=>({\n            tag: hb.tagFromString(tag),\n            value: parseFloat(value)\n        }));\n    font.setVariations(variations);\n    // Получаем новые данные шрифта\n    const outputBlob = face.reference_table(hb.tagFromString(\"GDEF\")); // Это упрощенный пример\n    const outputBuffer = outputBlob.getData();\n    // Очищаем ресурсы\n    font.destroy();\n    face.destroy();\n    blob.destroy();\n    return outputBuffer;\n};\n/**\n * Генерирует статический шрифт через серверный API\n */ const generateViaAPI = async (fontBuffer, variableSettings, format = \"woff2\")=>{\n    const response = await fetch(\"/api/generate-static-font\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            fontData: Buffer.from(fontBuffer).toString(\"base64\"),\n            variableSettings,\n            format\n        })\n    });\n    if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.details || \"Серверная генерация не удалась\");\n    }\n    const result = await response.json();\n    return Buffer.from(result.data, \"base64\");\n};\n/**\n * Fallback: создает \"псевдо-статический\" шрифт с CSS переменными\n */ const generatePseudoStatic = (fontBuffer, variableSettings, fontName)=>{\n    // Возвращаем оригинальный шрифт + CSS с фиксированными настройками\n    const cssVariations = Object.entries(variableSettings).map(([axis, value])=>`\"${axis}\" ${value}`).join(\", \");\n    const css = `\n@font-face {\n  font-family: \"${fontName}-Static\";\n  src: url(data:font/woff2;base64,${Buffer.from(fontBuffer).toString(\"base64\")}) format(\"woff2\");\n  font-variation-settings: ${cssVariations};\n  font-display: swap;\n}\n\n.static-font {\n  font-family: \"${fontName}-Static\", sans-serif;\n  font-variation-settings: ${cssVariations};\n}\n`;\n    return {\n        fontBuffer,\n        css,\n        isPseudoStatic: true\n    };\n};\n/**\n * Основная функция генерации статического шрифта\n * Пробует разные методы в порядке приоритета\n */ const generateStaticFont = async (fontBuffer, variableSettings, options = {})=>{\n    const { format = \"woff2\", fontName = \"VariableFont\", preferredMethod = \"auto\" } = options;\n    // Метод 1: HarfBuzz WASM (наиболее качественный)\n    if (preferredMethod === \"auto\" || preferredMethod === \"harfbuzz\") {\n        try {\n            const result = await generateWithHarfBuzz(fontBuffer, variableSettings);\n            return {\n                buffer: result,\n                method: \"harfbuzz\",\n                isRealStatic: true\n            };\n        } catch (error) {\n        // Переходим к следующему методу\n        }\n    }\n    // Метод 2: Серверный API (второй по качеству)\n    if (preferredMethod === \"auto\" || preferredMethod === \"server\") {\n        try {\n            const result = await generateViaAPI(fontBuffer, variableSettings, format);\n            return {\n                buffer: result,\n                method: \"server\",\n                isRealStatic: true\n            };\n        } catch (error) {\n        // Переходим к следующему методу\n        }\n    }\n    // Метод 3: Псевдо-статический (fallback)\n    const result = generatePseudoStatic(fontBuffer, variableSettings, fontName);\n    return {\n        buffer: result.fontBuffer,\n        css: result.css,\n        method: \"pseudo-static\",\n        isRealStatic: false,\n        warning: \"Создан псевдо-статический шрифт. Для настоящей статической генерации требуется серверная поддержка.\"\n    };\n};\n/**\n * Проверяет доступность различных методов генерации\n */ const checkGenerationCapabilities = async ()=>{\n    const capabilities = {\n        harfbuzz: false,\n        server: false,\n        pseudoStatic: true // Всегда доступен\n    };\n    // Проверяем HarfBuzz\n    try {\n        await loadHarfBuzz();\n        capabilities.harfbuzz = true;\n    } catch (error) {\n    // HarfBuzz недоступен\n    }\n    // Проверяем серверный API\n    try {\n        const response = await fetch(\"/api/generate-static-font\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                test: true\n            })\n        });\n        capabilities.server = response.status !== 404;\n    } catch (error) {\n    // Серверный API недоступен\n    }\n    return capabilities;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/staticFontGenerator.js\n");

/***/ }),

/***/ "./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "opentype.js":
/*!******************************!*\
  !*** external "opentype.js" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("opentype.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "react/jsx-runtime":
/*!************************************!*\
  !*** external "react/jsx-runtime" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-runtime");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "react-toastify":
/*!*********************************!*\
  !*** external "react-toastify" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("react-toastify");;

/***/ }),

/***/ "woff2-encoder/decompress":
/*!*******************************************!*\
  !*** external "woff2-encoder/decompress" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = import("woff2-encoder/decompress");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc","vendor-chunks/react-toastify"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES&page=%2F_error&preferredRegion=&absolutePagePath=private-next-pages%2F_error&absoluteAppPath=private-next-pages%2F_app&absoluteDocumentPath=private-next-pages%2F_document&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();